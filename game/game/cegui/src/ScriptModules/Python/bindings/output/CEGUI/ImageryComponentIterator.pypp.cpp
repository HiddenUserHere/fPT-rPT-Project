// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "ImageryComponentIterator.pypp.hpp"

namespace bp = boost::python;

struct ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper : CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >, bp::wrapper< CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > > > {

    ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper(CEGUI::ConstVectorIterator<std::vector<CEGUI::ImageryComponent, std::allocator<CEGUI::ImageryComponent> > > const & arg )
    : CEGUI::ConstVectorIterator<std::vector<CEGUI::ImageryComponent, std::allocator<CEGUI::ImageryComponent> > >( arg )
      , bp::wrapper< CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > > >(){
        // copy constructor
        
    }

    ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper( )
    : CEGUI::ConstVectorIterator<std::vector<CEGUI::ImageryComponent, std::allocator<CEGUI::ImageryComponent> > >( )
      , bp::wrapper< CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > > >(){
        // null constructor
    
    }

    virtual ::CEGUI::ImageryComponent getCurrentValue(  ) const  {
        if( bp::override func_getCurrentValue = this->get_override( "getCurrentValue" ) )
            return func_getCurrentValue(  );
        else{
            return this->CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >::getCurrentValue(  );
        }
    }
    
    ::CEGUI::ImageryComponent default_getCurrentValue(  ) const  {
        return CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >::getCurrentValue( );
    }

};

void Iterator_next(::CEGUI::ConstVectorIterator<std::vector<CEGUI::ImageryComponent, std::allocator<CEGUI::ImageryComponent> > >& t)
{
    t++;
}

void Iterator_previous(::CEGUI::ConstVectorIterator<std::vector<CEGUI::ImageryComponent, std::allocator<CEGUI::ImageryComponent> > >& t)
{
    t--;
}

void register_ImageryComponentIterator_class(){

    { //::CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >
        typedef bp::class_< ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper, bp::bases< CEGUI::ConstBaseIterator< std::vector< CEGUI::ImageryComponent >, CEGUI::ImageryComponent > > > ImageryComponentIterator_exposer_t;
        ImageryComponentIterator_exposer_t ImageryComponentIterator_exposer = ImageryComponentIterator_exposer_t( "ImageryComponentIterator", bp::no_init );
        bp::scope ImageryComponentIterator_scope( ImageryComponentIterator_exposer );
        ImageryComponentIterator_exposer.def( bp::init< >("*************************************************************************\n\
           No default construction available\n\
        *************************************************************************\n") );
        { //::CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >::getCurrentValue
        
            typedef CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > > exported_class_t;
            typedef ::CEGUI::ImageryComponent ( exported_class_t::*getCurrentValue_function_type )(  ) const;
            typedef ::CEGUI::ImageryComponent ( ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper::*default_getCurrentValue_function_type )(  ) const;
            
            ImageryComponentIterator_exposer.def( 
                "getCurrentValue"
                , getCurrentValue_function_type(&::CEGUI::ConstVectorIterator< std::vector< CEGUI::ImageryComponent > >::getCurrentValue)
                , default_getCurrentValue_function_type(&ConstVectorIterator_less__std_scope_vector_less__CEGUI_scope_ImageryComponent__greater___greater__wrapper::default_getCurrentValue) );
        
        }
        ImageryComponentIterator_exposer.def("next", &::Iterator_next);
        ImageryComponentIterator_exposer.def("previous", &::Iterator_previous);
    }

}
