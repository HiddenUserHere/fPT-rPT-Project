// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "BoundSlot.pypp.hpp"

namespace bp = boost::python;

void register_BoundSlot_class(){

    { //::CEGUI::BoundSlot
        typedef bp::class_< CEGUI::BoundSlot > BoundSlot_exposer_t;
        BoundSlot_exposer_t BoundSlot_exposer = BoundSlot_exposer_t( "BoundSlot", bp::init< unsigned int, CEGUI::SubscriberSlot const &, CEGUI::Event & >(( bp::arg("group"), bp::arg("subscriber"), bp::arg("event") ), "*!\n\
            \n\
                Constructor.\n\
        \n\
            @param group\n\
                The subscriber group this slot is attached to.\n\
        \n\
            @param subscriber\n\
                The actual slot object that is controlling this connection binding.\n\
        \n\
            @param event\n\
                The Event object to which the subscribed slot is attached.\n\
            *\n") );
        bp::scope BoundSlot_scope( BoundSlot_exposer );
        BoundSlot_exposer.def( bp::init< CEGUI::BoundSlot const & >(( bp::arg("other") ), "*!\n\
        \n\
            Copy constructor.\n\
        *\n") );
        { //::CEGUI::BoundSlot::connected
        
            typedef bool ( ::CEGUI::BoundSlot::*connected_function_type )(  ) const;
            
            BoundSlot_exposer.def( 
                "connected"
                , connected_function_type( &::CEGUI::BoundSlot::connected )
                , "*!\n\
                \n\
                    Returns whether the slot which this object is tracking is still\n\
                    internally connected to the signal  event mechanism.\n\
            \n\
                @return\n\
                    - true to indicate that the slot is still connected.\n\
                    - false to indicate that the slot has been disconnected.\n\
                *\n" );
        
        }
        { //::CEGUI::BoundSlot::disconnect
        
            typedef void ( ::CEGUI::BoundSlot::*disconnect_function_type )(  ) ;
            
            BoundSlot_exposer.def( 
                "disconnect"
                , disconnect_function_type( &::CEGUI::BoundSlot::disconnect )
                , "*!\n\
                \n\
                    Disconnects the slot.  Once disconnected, the slot will no longer be\n\
                    called when the associated signal  event fires.  There is no way to\n\
                    re-connect a slot once it has been disconnected, a new subscription to\n\
                    the signal  event is required.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        BoundSlot_exposer.def( bp::self != bp::self );
        BoundSlot_exposer.def( bp::self == bp::self );
    }

}
