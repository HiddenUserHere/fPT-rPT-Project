// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "ListHeader.pypp.hpp"

namespace bp = boost::python;

struct ListHeader_wrapper : CEGUI::ListHeader, bp::wrapper< CEGUI::ListHeader > {

    ListHeader_wrapper(::CEGUI::String const & type, ::CEGUI::String const & name )
    : CEGUI::ListHeader( boost::ref(type), boost::ref(name) )
      , bp::wrapper< CEGUI::ListHeader >(){
        // constructor
    
    }

    ::CEGUI::ListHeaderSegment * createInitialisedSegment( ::CEGUI::String const & text, ::CEGUI::uint id, ::CEGUI::UDim const & width ){
        return CEGUI::ListHeader::createInitialisedSegment( boost::ref(text), id, boost::ref(width) );
    }

    ::CEGUI::ListHeaderSegment * createNewSegment( ::CEGUI::String const & name ) const {
        return CEGUI::ListHeader::createNewSegment( boost::ref(name) );
    }

    void destroyListSegment( ::CEGUI::ListHeaderSegment * segment ) const {
        CEGUI::ListHeader::destroyListSegment( boost::python::ptr(segment) );
    }

    void layoutSegments(  ){
        CEGUI::ListHeader::layoutSegments(  );
    }

    virtual void onDragMoveSettingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDragMoveSettingChanged = this->get_override( "onDragMoveSettingChanged" ) )
            func_onDragMoveSettingChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onDragMoveSettingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onDragMoveSettingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onDragMoveSettingChanged( boost::ref(e) );
    }

    virtual void onDragSizeSettingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDragSizeSettingChanged = this->get_override( "onDragSizeSettingChanged" ) )
            func_onDragSizeSettingChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onDragSizeSettingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onDragSizeSettingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onDragSizeSettingChanged( boost::ref(e) );
    }

    virtual void onSegmentAdded( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentAdded = this->get_override( "onSegmentAdded" ) )
            func_onSegmentAdded( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentAdded( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentAdded( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentAdded( boost::ref(e) );
    }

    virtual void onSegmentClicked( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentClicked = this->get_override( "onSegmentClicked" ) )
            func_onSegmentClicked( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentClicked( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentClicked( boost::ref(e) );
    }

    virtual void onSegmentOffsetChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentOffsetChanged = this->get_override( "onSegmentOffsetChanged" ) )
            func_onSegmentOffsetChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentOffsetChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentOffsetChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentOffsetChanged( boost::ref(e) );
    }

    virtual void onSegmentRemoved( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentRemoved = this->get_override( "onSegmentRemoved" ) )
            func_onSegmentRemoved( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentRemoved( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentRemoved( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentRemoved( boost::ref(e) );
    }

    virtual void onSegmentSequenceChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentSequenceChanged = this->get_override( "onSegmentSequenceChanged" ) )
            func_onSegmentSequenceChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentSequenceChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentSequenceChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentSequenceChanged( boost::ref(e) );
    }

    virtual void onSegmentSized( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSegmentSized = this->get_override( "onSegmentSized" ) )
            func_onSegmentSized( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSegmentSized( boost::ref(e) );
        }
    }
    
    virtual void default_onSegmentSized( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSegmentSized( boost::ref(e) );
    }

    virtual void onSortColumnChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSortColumnChanged = this->get_override( "onSortColumnChanged" ) )
            func_onSortColumnChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSortColumnChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSortColumnChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSortColumnChanged( boost::ref(e) );
    }

    virtual void onSortDirectionChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSortDirectionChanged = this->get_override( "onSortDirectionChanged" ) )
            func_onSortDirectionChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSortDirectionChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSortDirectionChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSortDirectionChanged( boost::ref(e) );
    }

    virtual void onSortSettingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSortSettingChanged = this->get_override( "onSortSettingChanged" ) )
            func_onSortSettingChanged( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSortSettingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSortSettingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSortSettingChanged( boost::ref(e) );
    }

    virtual void onSplitterDoubleClicked( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSplitterDoubleClicked = this->get_override( "onSplitterDoubleClicked" ) )
            func_onSplitterDoubleClicked( boost::ref(e) );
        else{
            this->CEGUI::ListHeader::onSplitterDoubleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onSplitterDoubleClicked( ::CEGUI::WindowEventArgs & e ){
        CEGUI::ListHeader::onSplitterDoubleClicked( boost::ref(e) );
    }

    bool segmentClickedHandler( ::CEGUI::EventArgs const & e ){
        return CEGUI::ListHeader::segmentClickedHandler( boost::ref(e) );
    }

    bool segmentDoubleClickHandler( ::CEGUI::EventArgs const & e ){
        return CEGUI::ListHeader::segmentDoubleClickHandler( boost::ref(e) );
    }

    bool segmentDragHandler( ::CEGUI::EventArgs const & e ){
        return CEGUI::ListHeader::segmentDragHandler( boost::ref(e) );
    }

    bool segmentMovedHandler( ::CEGUI::EventArgs const & e ){
        return CEGUI::ListHeader::segmentMovedHandler( boost::ref(e) );
    }

    bool segmentSizedHandler( ::CEGUI::EventArgs const & e ){
        return CEGUI::ListHeader::segmentSizedHandler( boost::ref(e) );
    }

    virtual bool validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        if( bp::override func_validateWindowRenderer = this->get_override( "validateWindowRenderer" ) )
            return func_validateWindowRenderer( boost::python::ptr(renderer) );
        else{
            return this->CEGUI::ListHeader::validateWindowRenderer( boost::python::ptr(renderer) );
        }
    }
    
    virtual bool default_validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        return CEGUI::ListHeader::validateWindowRenderer( boost::python::ptr(renderer) );
    }

    virtual void addChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_addChild_impl = this->get_override( "addChild_impl" ) )
            func_addChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::addChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_addChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::addChild_impl( boost::python::ptr(element) );
    }

    void addElementProperties(  ){
        CEGUI::Element::addElementProperties(  );
    }

    void addNamedElementProperties(  ){
        CEGUI::NamedElement::addNamedElementProperties(  );
    }

    void addWindowProperties(  ){
        CEGUI::Window::addWindowProperties(  );
    }

    void addWindowToDrawList( ::CEGUI::Window & wnd, bool at_back=false ){
        CEGUI::Window::addWindowToDrawList( boost::ref(wnd), at_back );
    }

    void allocateRenderingWindow(  ){
        CEGUI::Window::allocateRenderingWindow(  );
    }

    virtual void banPropertiesForAutoWindow(  ){
        if( bp::override func_banPropertiesForAutoWindow = this->get_override( "banPropertiesForAutoWindow" ) )
            func_banPropertiesForAutoWindow(  );
        else{
            this->CEGUI::Window::banPropertiesForAutoWindow(  );
        }
    }
    
    virtual void default_banPropertiesForAutoWindow(  ){
        CEGUI::Window::banPropertiesForAutoWindow( );
    }

    virtual void beginInitialisation(  ) {
        if( bp::override func_beginInitialisation = this->get_override( "beginInitialisation" ) )
            func_beginInitialisation(  );
        else{
            this->CEGUI::Window::beginInitialisation(  );
        }
    }
    
    void default_beginInitialisation(  ) {
        CEGUI::Window::beginInitialisation( );
    }

    void bufferGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::bufferGeometry( boost::ref(ctx) );
    }

    virtual void cleanupChildren(  ){
        if( bp::override func_cleanupChildren = this->get_override( "cleanupChildren" ) )
            func_cleanupChildren(  );
        else{
            this->CEGUI::Window::cleanupChildren(  );
        }
    }
    
    virtual void default_cleanupChildren(  ){
        CEGUI::Window::cleanupChildren( );
    }

    virtual void cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_cloneChildWidgetsTo = this->get_override( "cloneChildWidgetsTo" ) )
            func_cloneChildWidgetsTo( boost::ref(target) );
        else{
            this->CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
        }
    }
    
    void default_cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
    }

    virtual void clonePropertiesTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_clonePropertiesTo = this->get_override( "clonePropertiesTo" ) )
            func_clonePropertiesTo( boost::ref(target) );
        else{
            this->CEGUI::Window::clonePropertiesTo( boost::ref(target) );
        }
    }
    
    void default_clonePropertiesTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::clonePropertiesTo( boost::ref(target) );
    }

    virtual void destroy(  ) {
        if( bp::override func_destroy = this->get_override( "destroy" ) )
            func_destroy(  );
        else{
            this->CEGUI::Window::destroy(  );
        }
    }
    
    void default_destroy(  ) {
        CEGUI::Window::destroy( );
    }

    virtual void drawSelf( ::CEGUI::RenderingContext const & ctx ){
        if( bp::override func_drawSelf = this->get_override( "drawSelf" ) )
            func_drawSelf( boost::ref(ctx) );
        else{
            this->CEGUI::Window::drawSelf( boost::ref(ctx) );
        }
    }
    
    virtual void default_drawSelf( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::drawSelf( boost::ref(ctx) );
    }

    virtual void endInitialisation(  ) {
        if( bp::override func_endInitialisation = this->get_override( "endInitialisation" ) )
            func_endInitialisation(  );
        else{
            this->CEGUI::Window::endInitialisation(  );
        }
    }
    
    void default_endInitialisation(  ) {
        CEGUI::Window::endInitialisation( );
    }

    void fireAreaChangeEvents( bool const moved, bool const sized ){
        CEGUI::Element::fireAreaChangeEvents( moved, sized );
    }

    virtual void fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        if( bp::override func_fireEvent = this->get_override( "fireEvent" ) )
            func_fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        else{
            this->CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        }
    }
    
    void default_fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
    }

    void fireEvent_impl( ::CEGUI::String const & name, ::CEGUI::EventArgs & args ){
        CEGUI::EventSet::fireEvent_impl( boost::ref(name), boost::ref(args) );
    }

    void generateAutoRepeatEvent( ::CEGUI::MouseButton button ){
        CEGUI::Window::generateAutoRepeatEvent( button );
    }

    virtual ::CEGUI::NamedElement * getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        if( bp::override func_getChildByNamePath_impl = this->get_override( "getChildByNamePath_impl" ) )
            return func_getChildByNamePath_impl( boost::ref(name_path) );
        else{
            return this->CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        return CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
    }

    virtual ::CEGUI::NamedElement * getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        if( bp::override func_getChildByNameRecursive_impl = this->get_override( "getChildByNameRecursive_impl" ) )
            return func_getChildByNameRecursive_impl( boost::ref(name) );
        else{
            return this->CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        return CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
    }

    virtual ::CEGUI::Rectf getHitTestRect_impl(  ) const {
        if( bp::override func_getHitTestRect_impl = this->get_override( "getHitTestRect_impl" ) )
            return func_getHitTestRect_impl(  );
        else{
            return this->CEGUI::Window::getHitTestRect_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getHitTestRect_impl(  ) const {
        return CEGUI::Window::getHitTestRect_impl( );
    }

    virtual ::CEGUI::Rectf getInnerRectClipper_impl(  ) const {
        if( bp::override func_getInnerRectClipper_impl = this->get_override( "getInnerRectClipper_impl" ) )
            return func_getInnerRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getInnerRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getInnerRectClipper_impl(  ) const {
        return CEGUI::Window::getInnerRectClipper_impl( );
    }

    virtual ::CEGUI::Rectf getOuterRectClipper_impl(  ) const {
        if( bp::override func_getOuterRectClipper_impl = this->get_override( "getOuterRectClipper_impl" ) )
            return func_getOuterRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getOuterRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getOuterRectClipper_impl(  ) const {
        return CEGUI::Window::getOuterRectClipper_impl( );
    }

    ::CEGUI::Rectf getParentElementClipIntersection( ::CEGUI::Rectf const & unclipped_area ) const {
        return CEGUI::Window::getParentElementClipIntersection( boost::ref(unclipped_area) );
    }

    virtual void getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        if( bp::override func_getRenderingContext_impl = this->get_override( "getRenderingContext_impl" ) )
            func_getRenderingContext_impl( boost::ref(ctx) );
        else{
            this->CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
        }
    }
    
    void default_getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
    }

    ::CEGUI::ScriptModule * getScriptModule(  ) const {
        return CEGUI::EventSet::getScriptModule(  );
    }

    virtual ::CEGUI::Rectf getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedInnerRect_impl = this->get_override( "getUnclippedInnerRect_impl" ) )
            return func_getUnclippedInnerRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
    }

    virtual ::CEGUI::Rectf getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedOuterRect_impl = this->get_override( "getUnclippedOuterRect_impl" ) )
            return func_getUnclippedOuterRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
    }

    ::CEGUI::Window const * getWindowAttachedToCommonAncestor( ::CEGUI::Window const & wnd ) const {
        return CEGUI::Window::getWindowAttachedToCommonAncestor( boost::ref(wnd) );
    }

    virtual bool handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        if( bp::override func_handleFontRenderSizeChange = this->get_override( "handleFontRenderSizeChange" ) )
            return func_handleFontRenderSizeChange( boost::ref(args) );
        else{
            return this->CEGUI::Window::handleFontRenderSizeChange( boost::ref(args) );
        }
    }
    
    virtual bool default_handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        return CEGUI::Window::handleFontRenderSizeChange( boost::ref(args) );
    }

    void initialiseClippers( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::initialiseClippers( boost::ref(ctx) );
    }

    virtual void initialiseComponents(  ) {
        if( bp::override func_initialiseComponents = this->get_override( "initialiseComponents" ) )
            func_initialiseComponents(  );
        else{
            this->CEGUI::Window::initialiseComponents(  );
        }
    }
    
    void default_initialiseComponents(  ) {
        CEGUI::Window::initialiseComponents( );
    }

    void invalidate_impl( bool const recursive ){
        CEGUI::Window::invalidate_impl( recursive );
    }

    virtual bool isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        if( bp::override func_isHit = this->get_override( "isHit" ) )
            return func_isHit( boost::ref(position), allow_disabled );
        else{
            return this->CEGUI::Window::isHit( boost::ref(position), allow_disabled );
        }
    }
    
    bool default_isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        return CEGUI::Window::isHit( boost::ref(position), allow_disabled );
    }

    bool isHitTargetWindow( ::CEGUI::Vector2f const & position, bool allow_disabled ) const {
        return CEGUI::Window::isHitTargetWindow( boost::ref(position), allow_disabled );
    }

    bool isInnerRectSizeChanged(  ) const {
        return CEGUI::Element::isInnerRectSizeChanged(  );
    }

    bool isPropertyAtDefault( ::CEGUI::Property const * property ) const {
        return CEGUI::Window::isPropertyAtDefault( boost::python::ptr(property) );
    }

    bool isTopOfZOrder(  ) const {
        return CEGUI::Window::isTopOfZOrder(  );
    }

    void layoutLookNFeelChildWidgets(  ){
        CEGUI::Window::layoutLookNFeelChildWidgets(  );
    }

    void markCachedWindowRectsInvalid(  ){
        CEGUI::Window::markCachedWindowRectsInvalid(  );
    }

    virtual bool moveToFront_impl( bool wasClicked ){
        if( bp::override func_moveToFront_impl = this->get_override( "moveToFront_impl" ) )
            return func_moveToFront_impl( wasClicked );
        else{
            return this->CEGUI::Window::moveToFront_impl( wasClicked );
        }
    }
    
    virtual bool default_moveToFront_impl( bool wasClicked ){
        return CEGUI::Window::moveToFront_impl( wasClicked );
    }

    void notifyChildrenOfSizeChange( bool const non_client, bool const client ){
        CEGUI::Element::notifyChildrenOfSizeChange( non_client, client );
    }

    void notifyClippingChanged(  ){
        CEGUI::Window::notifyClippingChanged(  );
    }

    virtual void notifyScreenAreaChanged( bool recursive=true ) {
        if( bp::override func_notifyScreenAreaChanged = this->get_override( "notifyScreenAreaChanged" ) )
            func_notifyScreenAreaChanged( recursive );
        else{
            this->CEGUI::Window::notifyScreenAreaChanged( recursive );
        }
    }
    
    void default_notifyScreenAreaChanged( bool recursive=true ) {
        CEGUI::Window::notifyScreenAreaChanged( recursive );
    }

    virtual void onActivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onActivated = this->get_override( "onActivated" ) )
            func_onActivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onActivated( boost::ref(e) );
        }
    }
    
    virtual void default_onActivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onActivated( boost::ref(e) );
    }

    virtual void onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlphaChanged = this->get_override( "onAlphaChanged" ) )
            func_onAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlphaChanged( boost::ref(e) );
    }

    virtual void onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlwaysOnTopChanged = this->get_override( "onAlwaysOnTopChanged" ) )
            func_onAlwaysOnTopChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
    }

    virtual void onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureGained = this->get_override( "onCaptureGained" ) )
            func_onCaptureGained( boost::ref(e) );
        else{
            this->CEGUI::Window::onCaptureGained( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onCaptureGained( boost::ref(e) );
    }

    virtual void onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureLost = this->get_override( "onCaptureLost" ) )
            func_onCaptureLost( boost::ref(e) );
        else{
            this->CEGUI::Window::onCaptureLost( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onCaptureLost( boost::ref(e) );
    }

    virtual void onCharacter( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onCharacter = this->get_override( "onCharacter" ) )
            func_onCharacter( boost::ref(e) );
        else{
            this->CEGUI::Window::onCharacter( boost::ref(e) );
        }
    }
    
    virtual void default_onCharacter( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onCharacter( boost::ref(e) );
    }

    virtual void onChildAdded( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildAdded = this->get_override( "onChildAdded" ) )
            func_onChildAdded( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildAdded( boost::ref(e) );
        }
    }
    
    virtual void default_onChildAdded( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildAdded( boost::ref(e) );
    }

    virtual void onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildRemoved = this->get_override( "onChildRemoved" ) )
            func_onChildRemoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildRemoved( boost::ref(e) );
        }
    }
    
    virtual void default_onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildRemoved( boost::ref(e) );
    }

    virtual void onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onClippingChanged = this->get_override( "onClippingChanged" ) )
            func_onClippingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onClippingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onClippingChanged( boost::ref(e) );
    }

    virtual void onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onDeactivated = this->get_override( "onDeactivated" ) )
            func_onDeactivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onDeactivated( boost::ref(e) );
        }
    }
    
    virtual void default_onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onDeactivated( boost::ref(e) );
    }

    virtual void onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDestructionStarted = this->get_override( "onDestructionStarted" ) )
            func_onDestructionStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onDestructionStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDestructionStarted( boost::ref(e) );
    }

    virtual void onDisabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDisabled = this->get_override( "onDisabled" ) )
            func_onDisabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onDisabled( boost::ref(e) );
        }
    }
    
    virtual void default_onDisabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDisabled( boost::ref(e) );
    }

    virtual void onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemDropped = this->get_override( "onDragDropItemDropped" ) )
            func_onDragDropItemDropped( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
    }

    virtual void onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemEnters = this->get_override( "onDragDropItemEnters" ) )
            func_onDragDropItemEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
    }

    virtual void onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemLeaves = this->get_override( "onDragDropItemLeaves" ) )
            func_onDragDropItemLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
    }

    virtual void onEnabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onEnabled = this->get_override( "onEnabled" ) )
            func_onEnabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onEnabled( boost::ref(e) );
        }
    }
    
    virtual void default_onEnabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onEnabled( boost::ref(e) );
    }

    virtual void onFontChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onFontChanged = this->get_override( "onFontChanged" ) )
            func_onFontChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onFontChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onFontChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onFontChanged( boost::ref(e) );
    }

    virtual void onHidden( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onHidden = this->get_override( "onHidden" ) )
            func_onHidden( boost::ref(e) );
        else{
            this->CEGUI::Window::onHidden( boost::ref(e) );
        }
    }
    
    virtual void default_onHidden( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onHidden( boost::ref(e) );
    }

    virtual void onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onHorizontalAlignmentChanged = this->get_override( "onHorizontalAlignmentChanged" ) )
            func_onHorizontalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
    }

    virtual void onIDChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onIDChanged = this->get_override( "onIDChanged" ) )
            func_onIDChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onIDChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onIDChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onIDChanged( boost::ref(e) );
    }

    virtual void onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInheritsAlphaChanged = this->get_override( "onInheritsAlphaChanged" ) )
            func_onInheritsAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
    }

    virtual void onInvalidated( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInvalidated = this->get_override( "onInvalidated" ) )
            func_onInvalidated( boost::ref(e) );
        else{
            this->CEGUI::Window::onInvalidated( boost::ref(e) );
        }
    }
    
    virtual void default_onInvalidated( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInvalidated( boost::ref(e) );
    }

    virtual void onKeyDown( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyDown = this->get_override( "onKeyDown" ) )
            func_onKeyDown( boost::ref(e) );
        else{
            this->CEGUI::Window::onKeyDown( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyDown( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onKeyDown( boost::ref(e) );
    }

    virtual void onKeyUp( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyUp = this->get_override( "onKeyUp" ) )
            func_onKeyUp( boost::ref(e) );
        else{
            this->CEGUI::Window::onKeyUp( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyUp( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onKeyUp( boost::ref(e) );
    }

    virtual void onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMarginChanged = this->get_override( "onMarginChanged" ) )
            func_onMarginChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onMarginChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onMarginChanged( boost::ref(e) );
    }

    virtual void onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonDown = this->get_override( "onMouseButtonDown" ) )
            func_onMouseButtonDown( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseButtonDown( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseButtonDown( boost::ref(e) );
    }

    virtual void onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonUp = this->get_override( "onMouseButtonUp" ) )
            func_onMouseButtonUp( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseButtonUp( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseButtonUp( boost::ref(e) );
    }

    virtual void onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseClicked = this->get_override( "onMouseClicked" ) )
            func_onMouseClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseClicked( boost::ref(e) );
    }

    virtual void onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseDoubleClicked = this->get_override( "onMouseDoubleClicked" ) )
            func_onMouseDoubleClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseDoubleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseDoubleClicked( boost::ref(e) );
    }

    virtual void onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEnters = this->get_override( "onMouseEnters" ) )
            func_onMouseEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEnters( boost::ref(e) );
    }

    virtual void onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEntersArea = this->get_override( "onMouseEntersArea" ) )
            func_onMouseEntersArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEntersArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEntersArea( boost::ref(e) );
    }

    virtual void onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeaves = this->get_override( "onMouseLeaves" ) )
            func_onMouseLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeaves( boost::ref(e) );
    }

    virtual void onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeavesArea = this->get_override( "onMouseLeavesArea" ) )
            func_onMouseLeavesArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
    }

    virtual void onMouseMove( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseMove = this->get_override( "onMouseMove" ) )
            func_onMouseMove( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseMove( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseMove( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseMove( boost::ref(e) );
    }

    virtual void onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseTripleClicked = this->get_override( "onMouseTripleClicked" ) )
            func_onMouseTripleClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseTripleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseTripleClicked( boost::ref(e) );
    }

    virtual void onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseWheel = this->get_override( "onMouseWheel" ) )
            func_onMouseWheel( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseWheel( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseWheel( boost::ref(e) );
    }

    virtual void onMoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onMoved = this->get_override( "onMoved" ) )
            func_onMoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onMoved( boost::ref(e) );
        }
    }
    
    virtual void default_onMoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onMoved( boost::ref(e) );
    }

    virtual void onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        if( bp::override func_onNameChanged = this->get_override( "onNameChanged" ) )
            func_onNameChanged( boost::ref(e) );
        else{
            this->CEGUI::NamedElement::onNameChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        CEGUI::NamedElement::onNameChanged( boost::ref(e) );
    }

    virtual void onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onNonClientChanged = this->get_override( "onNonClientChanged" ) )
            func_onNonClientChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onNonClientChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onNonClientChanged( boost::ref(e) );
    }

    virtual void onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onParentDestroyChanged = this->get_override( "onParentDestroyChanged" ) )
            func_onParentDestroyChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
    }

    virtual void onParentSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onParentSized = this->get_override( "onParentSized" ) )
            func_onParentSized( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentSized( boost::ref(e) );
        }
    }
    
    virtual void default_onParentSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onParentSized( boost::ref(e) );
    }

    virtual void onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingEnded = this->get_override( "onRenderingEnded" ) )
            func_onRenderingEnded( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingEnded( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingEnded( boost::ref(e) );
    }

    virtual void onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingStarted = this->get_override( "onRenderingStarted" ) )
            func_onRenderingStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingStarted( boost::ref(e) );
    }

    virtual void onRotated( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onRotated = this->get_override( "onRotated" ) )
            func_onRotated( boost::ref(e) );
        else{
            this->CEGUI::Window::onRotated( boost::ref(e) );
        }
    }
    
    virtual void default_onRotated( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onRotated( boost::ref(e) );
    }

    virtual void onShown( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onShown = this->get_override( "onShown" ) )
            func_onShown( boost::ref(e) );
        else{
            this->CEGUI::Window::onShown( boost::ref(e) );
        }
    }
    
    virtual void default_onShown( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onShown( boost::ref(e) );
    }

    virtual void onSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onSized = this->get_override( "onSized" ) )
            func_onSized( boost::ref(e) );
        else{
            this->CEGUI::Window::onSized( boost::ref(e) );
        }
    }
    
    virtual void default_onSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onSized( boost::ref(e) );
    }

    virtual void onTextChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextChanged = this->get_override( "onTextChanged" ) )
            func_onTextChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onTextChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onTextChanged( boost::ref(e) );
    }

    virtual void onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextParsingChanged = this->get_override( "onTextParsingChanged" ) )
            func_onTextParsingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onTextParsingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onTextParsingChanged( boost::ref(e) );
    }

    virtual void onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onVerticalAlignmentChanged = this->get_override( "onVerticalAlignmentChanged" ) )
            func_onVerticalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
    }

    virtual void onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererAttached = this->get_override( "onWindowRendererAttached" ) )
            func_onWindowRendererAttached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
    }

    virtual void onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererDetached = this->get_override( "onWindowRendererDetached" ) )
            func_onWindowRendererDetached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
    }

    virtual void onZChange_impl(  ){
        if( bp::override func_onZChange_impl = this->get_override( "onZChange_impl" ) )
            func_onZChange_impl(  );
        else{
            this->CEGUI::Window::onZChange_impl(  );
        }
    }
    
    virtual void default_onZChange_impl(  ){
        CEGUI::Window::onZChange_impl( );
    }

    virtual void onZChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onZChanged = this->get_override( "onZChanged" ) )
            func_onZChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onZChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onZChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onZChanged( boost::ref(e) );
    }

    virtual void performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        if( bp::override func_performChildWindowLayout = this->get_override( "performChildWindowLayout" ) )
            func_performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        else{
            this->CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        }
    }
    
    void default_performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
    }

    virtual bool performCopy( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCopy = this->get_override( "performCopy" ) )
            return func_performCopy( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performCopy( boost::ref(clipboard) );
        }
    }
    
    bool default_performCopy( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performCopy( boost::ref(clipboard) );
    }

    virtual bool performCut( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCut = this->get_override( "performCut" ) )
            return func_performCut( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performCut( boost::ref(clipboard) );
        }
    }
    
    bool default_performCut( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performCut( boost::ref(clipboard) );
    }

    virtual bool performPaste( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performPaste = this->get_override( "performPaste" ) )
            return func_performPaste( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performPaste( boost::ref(clipboard) );
        }
    }
    
    bool default_performPaste( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performPaste( boost::ref(clipboard) );
    }

    virtual void populateGeometryBuffer(  ){
        if( bp::override func_populateGeometryBuffer = this->get_override( "populateGeometryBuffer" ) )
            func_populateGeometryBuffer(  );
        else{
            this->CEGUI::Window::populateGeometryBuffer(  );
        }
    }
    
    virtual void default_populateGeometryBuffer(  ){
        CEGUI::Window::populateGeometryBuffer( );
    }

    void queueGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::queueGeometry( boost::ref(ctx) );
    }

    void releaseRenderingWindow(  ){
        CEGUI::Window::releaseRenderingWindow(  );
    }

    virtual void removeChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_removeChild_impl = this->get_override( "removeChild_impl" ) )
            func_removeChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_removeChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
    }

    void removeWindowFromDrawList( ::CEGUI::Window const & wnd ){
        CEGUI::Window::removeWindowFromDrawList( boost::ref(wnd) );
    }

    virtual void setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        if( bp::override func_setArea = this->get_override( "setArea" ) )
            func_setArea( boost::ref(pos), boost::ref(size) );
        else{
            this->CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
        }
    }
    
    void default_setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
    }

    virtual void setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        if( bp::override func_setArea_impl = this->get_override( "setArea_impl" ) )
            func_setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        else{
            this->CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        }
    }
    
    virtual void default_setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
    }

    virtual void setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        if( bp::override func_setHorizontalAlignment = this->get_override( "setHorizontalAlignment" ) )
            func_setHorizontalAlignment( alignment );
        else{
            this->CEGUI::Element::setHorizontalAlignment( alignment );
        }
    }
    
    void default_setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        CEGUI::Element::setHorizontalAlignment( alignment );
    }

    virtual void setLookNFeel( ::CEGUI::String const & look ) {
        if( bp::override func_setLookNFeel = this->get_override( "setLookNFeel" ) )
            func_setLookNFeel( boost::ref(look) );
        else{
            this->CEGUI::Window::setLookNFeel( boost::ref(look) );
        }
    }
    
    void default_setLookNFeel( ::CEGUI::String const & look ) {
        CEGUI::Window::setLookNFeel( boost::ref(look) );
    }

    virtual void setMargin( ::CEGUI::UBox const & margin ) {
        if( bp::override func_setMargin = this->get_override( "setMargin" ) )
            func_setMargin( boost::ref(margin) );
        else{
            this->CEGUI::Window::setMargin( boost::ref(margin) );
        }
    }
    
    void default_setMargin( ::CEGUI::UBox const & margin ) {
        CEGUI::Window::setMargin( boost::ref(margin) );
    }

    virtual void setName( ::CEGUI::String const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->CEGUI::NamedElement::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::CEGUI::String const & name ) {
        CEGUI::NamedElement::setName( boost::ref(name) );
    }

    virtual void setParent( ::CEGUI::Element * parent ){
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(parent) );
        else{
            this->CEGUI::Window::setParent( boost::python::ptr(parent) );
        }
    }
    
    virtual void default_setParent( ::CEGUI::Element * parent ){
        CEGUI::Window::setParent( boost::python::ptr(parent) );
    }

    virtual void setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        if( bp::override func_setVerticalAlignment = this->get_override( "setVerticalAlignment" ) )
            func_setVerticalAlignment( alignment );
        else{
            this->CEGUI::Element::setVerticalAlignment( alignment );
        }
    }
    
    void default_setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        CEGUI::Element::setVerticalAlignment( alignment );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
    }

    void transferChildSurfaces(  ){
        CEGUI::Window::transferChildSurfaces(  );
    }

    virtual void update( float elapsed ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( elapsed );
        else{
            this->CEGUI::Window::update( elapsed );
        }
    }
    
    void default_update( float elapsed ) {
        CEGUI::Window::update( elapsed );
    }

    void updateGeometryRenderSettings(  ){
        CEGUI::Window::updateGeometryRenderSettings(  );
    }

    virtual void updateSelf( float elapsed ){
        if( bp::override func_updateSelf = this->get_override( "updateSelf" ) )
            func_updateSelf( elapsed );
        else{
            this->CEGUI::Window::updateSelf( elapsed );
        }
    }
    
    virtual void default_updateSelf( float elapsed ){
        CEGUI::Window::updateSelf( elapsed );
    }

    virtual bool writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeAutoChildWindowXML = this->get_override( "writeAutoChildWindowXML" ) )
            return func_writeAutoChildWindowXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
        }
    }
    
    virtual bool default_writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
    }

    virtual int writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeChildWindowsXML = this->get_override( "writeChildWindowsXML" ) )
            return func_writeChildWindowsXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
    }

    virtual int writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writePropertiesXML = this->get_override( "writePropertiesXML" ) )
            return func_writePropertiesXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
    }

    virtual void writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        if( bp::override func_writeXMLToStream = this->get_override( "writeXMLToStream" ) )
            func_writeXMLToStream( boost::ref(xml_stream) );
        else{
            this->CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
        }
    }
    
    void default_writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
    }

};

void register_ListHeader_class(){

    { //::CEGUI::ListHeader
        typedef bp::class_< ListHeader_wrapper, bp::bases< CEGUI::Window >, boost::noncopyable > ListHeader_exposer_t;
        ListHeader_exposer_t ListHeader_exposer = ListHeader_exposer_t( "ListHeader", "*!\n\
        \n\
           Base class for the multi column list header widget.\n\
        *\n", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("type"), bp::arg("name") ), "*************************************************************************\n\
           Construction and Destruction\n\
        *************************************************************************\n\
        *!\n\
        \n\
           Constructor for the list header base class.\n\
        *\n") );
        bp::scope ListHeader_scope( ListHeader_exposer );
        { //::CEGUI::ListHeader::addColumn
        
            typedef void ( ::CEGUI::ListHeader::*addColumn_function_type )( ::CEGUI::String const &,::CEGUI::uint,::CEGUI::UDim const & ) ;
            
            ListHeader_exposer.def( 
                "addColumn"
                , addColumn_function_type( &::CEGUI::ListHeader::addColumn )
                , ( bp::arg("text"), bp::arg("id"), bp::arg("width") )
                , "*!\n\
               \n\
                  Add a new column segment to the end of the header.\n\
            \n\
               @param text\n\
                  String object holding the initial text for the new segment\n\
            \n\
               @param id\n\
                  Client specified ID code to be assigned to the new segment.\n\
            \n\
               @param width\n\
                  UDim describing the initial width of the new segment.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::createInitialisedSegment
        
            typedef ::CEGUI::ListHeaderSegment * ( ListHeader_wrapper::*createInitialisedSegment_function_type )( ::CEGUI::String const &,::CEGUI::uint,::CEGUI::UDim const & ) ;
            
            ListHeader_exposer.def( 
                "createInitialisedSegment"
                , createInitialisedSegment_function_type( &ListHeader_wrapper::createInitialisedSegment )
                , ( bp::arg("text"), bp::arg("id"), bp::arg("width") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*************************************************************************\n\
               Implementation Methods\n\
            *************************************************************************\n\
            *!\n\
            \n\
               Create initialise and return a ListHeaderSegment object, with all events subscribed and ready to\
               use.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::createNewSegment
        
            typedef ::CEGUI::ListHeaderSegment * ( ListHeader_wrapper::*createNewSegment_function_type )( ::CEGUI::String const & ) const;
            
            ListHeader_exposer.def( 
                "createNewSegment"
                , createNewSegment_function_type( &ListHeader_wrapper::createNewSegment )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Create and return a pointer to a new ListHeaderSegment based object.\n\
            \n\
                @param name\n\
                    String object holding the name that should be given to the new Window.\n\
            \n\
                @return\n\
                    Pointer to an ListHeaderSegment based object of whatever type is appropriate for\n\
                    this ListHeader.\n\
                *\n" );
        
        }
        { //::CEGUI::ListHeader::destroyListSegment
        
            typedef void ( ListHeader_wrapper::*destroyListSegment_function_type )( ::CEGUI::ListHeaderSegment * ) const;
            
            ListHeader_exposer.def( 
                "destroyListSegment"
                , destroyListSegment_function_type( &ListHeader_wrapper::destroyListSegment )
                , ( bp::arg("segment") )
                , "*!\n\
                \n\
                    Cleanup and destroy the given ListHeaderSegment that was created via the\n\
                    createNewSegment method.\n\
            \n\
                @param segment\n\
                    Pointer to a ListHeaderSegment based object to be destroyed.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::ListHeader::getColumnCount
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getColumnCount_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getColumnCount"
                , getColumnCount_function_type( &::CEGUI::ListHeader::getColumnCount )
                , "*************************************************************************\n\
                  Accessor Methods\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  Return the number of columns or segments attached to the header.\n\
            \n\
               @return\n\
                  uint value equal to the number of columns  segments currently in the header.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getColumnFromID
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getColumnFromID_function_type )( ::CEGUI::uint ) const;
            
            ListHeader_exposer.def( 
                "getColumnFromID"
                , getColumnFromID_function_type( &::CEGUI::ListHeader::getColumnFromID )
                , ( bp::arg("id") )
                , "*!\n\
               \n\
                  Return the zero based column index of the segment with the specified ID.\n\
            \n\
               @param id\n\
                  ID code of the segment whos column index is to be returned.\n\
            \n\
               @return\n\
                  Zero based column index of the first ListHeaderSegment whos ID matches  id.\n\
            \n\
               @exception  InvalidRequestException    thrown if no attached segment has the requested ID.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getColumnFromSegment
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getColumnFromSegment_function_type )( ::CEGUI::ListHeaderSegment const & ) const;
            
            ListHeader_exposer.def( 
                "getColumnFromSegment"
                , getColumnFromSegment_function_type( &::CEGUI::ListHeader::getColumnFromSegment )
                , ( bp::arg("segment") )
                , "*!\n\
               \n\
                  Return the zero based column index of the specified segment.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment whos zero based index is to be returned.\n\
            \n\
               @return\n\
                  Zero based column index of the ListHeaderSegment  segment.\n\
            \n\
               @exception  InvalidRequestException    thrown if  segment is not attached to this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getColumnWidth
        
            typedef ::CEGUI::UDim ( ::CEGUI::ListHeader::*getColumnWidth_function_type )( ::CEGUI::uint ) const;
            
            ListHeader_exposer.def( 
                "getColumnWidth"
                , getColumnWidth_function_type( &::CEGUI::ListHeader::getColumnWidth )
                , ( bp::arg("column") )
                , "*!\n\
               \n\
                  Return the width of the specified column.\n\
            \n\
               @param column\n\
                  Zero based column index of the segment whose width is to be returned.\n\
            \n\
               @return\n\
                  UDim describing the width of the ListHeaderSegment at the zero based\n\
                    column index specified by  column.\n\
            \n\
               @exception InvalidRequestException  thrown if  column is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getColumnWithText
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getColumnWithText_function_type )( ::CEGUI::String const & ) const;
            
            ListHeader_exposer.def( 
                "getColumnWithText"
                , getColumnWithText_function_type( &::CEGUI::ListHeader::getColumnWithText )
                , ( bp::arg("text") )
                , "*!\n\
               \n\
                  Return the zero based column index of the segment with the specified text.\n\
            \n\
               @param text\n\
                  String object containing the text to be searched for.\n\
            \n\
               @return\n\
                  Zero based column index of the segment with the specified text.\n\
            \n\
               @exception InvalidRequestException  thrown if no attached segments have the requested text.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getPixelOffsetToColumn
        
            typedef float ( ::CEGUI::ListHeader::*getPixelOffsetToColumn_function_type )( ::CEGUI::uint ) const;
            
            ListHeader_exposer.def( 
                "getPixelOffsetToColumn"
                , getPixelOffsetToColumn_function_type( &::CEGUI::ListHeader::getPixelOffsetToColumn )
                , ( bp::arg("column") )
                , "*!\n\
               \n\
                  Return the pixel offset to the ListHeaderSegment at the given zero based column index.\n\
            \n\
               @param column\n\
                  Zero based column index of the ListHeaderSegment whos pixel offset it to be returned.\n\
            \n\
               @return\n\
                  The number of pixels up-to the begining of the ListHeaderSegment located at zero based\
                  column\n\
                  index  column.\n\
            \n\
               @exception InvalidRequestException  thrown if  column is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getPixelOffsetToSegment
        
            typedef float ( ::CEGUI::ListHeader::*getPixelOffsetToSegment_function_type )( ::CEGUI::ListHeaderSegment const & ) const;
            
            ListHeader_exposer.def( 
                "getPixelOffsetToSegment"
                , getPixelOffsetToSegment_function_type( &::CEGUI::ListHeader::getPixelOffsetToSegment )
                , ( bp::arg("segment") )
                , "*!\n\
               \n\
                  Return the pixel offset to the given ListHeaderSegment.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment object that the offset to is to be returned.\n\
            \n\
               @return\n\
                  The number of pixels up-to the begining of the ListHeaderSegment described by  segment.\n\
            \n\
               @exception InvalidRequestException  thrown if  segment is not attached to the ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSegmentFromColumn
        
            typedef ::CEGUI::ListHeaderSegment & ( ::CEGUI::ListHeader::*getSegmentFromColumn_function_type )( ::CEGUI::uint ) const;
            
            ListHeader_exposer.def( 
                "getSegmentFromColumn"
                , getSegmentFromColumn_function_type( &::CEGUI::ListHeader::getSegmentFromColumn )
                , ( bp::arg("column") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Return the ListHeaderSegment object for the specified column\n\
            \n\
               @param column\n\
                  zero based column index of the ListHeaderSegment to be returned.\n\
            \n\
               @return\n\
                  ListHeaderSegment object at the requested index.\n\
            \n\
               @exception InvalidRequestException  thrown if column is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSegmentFromID
        
            typedef ::CEGUI::ListHeaderSegment & ( ::CEGUI::ListHeader::*getSegmentFromID_function_type )( ::CEGUI::uint ) const;
            
            ListHeader_exposer.def( 
                "getSegmentFromID"
                , getSegmentFromID_function_type( &::CEGUI::ListHeader::getSegmentFromID )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Return the ListHeaderSegment object with the specified ID.\n\
            \n\
               @param id\n\
                  id code of the ListHeaderSegment to be returned.\n\
            \n\
               @return\n\
                  ListHeaderSegment object with the ID  id.  If more than one segment has the same ID, only the\
                  first one will\n\
                  ever be returned.\n\
            \n\
               @exception  InvalidRequestException    thrown if no segment with the requested ID is attached.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSegmentOffset
        
            typedef float ( ::CEGUI::ListHeader::*getSegmentOffset_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getSegmentOffset"
                , getSegmentOffset_function_type( &::CEGUI::ListHeader::getSegmentOffset )
                , "*!\n\
               \n\
                  Return the current segment offset value.  This value is used to implement scrolling of the\
                  header segments within\n\
                  the ListHeader area.\n\
            \n\
               @return\n\
                  float value specifying the current segment offset value in whatever metrics system is active\
                  for the ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSortColumn
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getSortColumn_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getSortColumn"
                , getSortColumn_function_type( &::CEGUI::ListHeader::getSortColumn )
                , "*!\n\
               \n\
                  Return the zero based index of the current sort column.  There must be at least one\
                  segmentcolumn to successfully call this\n\
                  method.\n\
            \n\
               @return\n\
                  Zero based column index that is the current sort column.\n\
            \n\
               @exception  InvalidRequestException    thrown if there are no segments  columns in this\
               ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSortDirection
        
            typedef ::CEGUI::ListHeaderSegment::SortDirection ( ::CEGUI::ListHeader::*getSortDirection_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getSortDirection"
                , getSortDirection_function_type( &::CEGUI::ListHeader::getSortDirection )
                , "*!\n\
               \n\
                  Return the currently set sort direction.\n\
            \n\
               @return\n\
                  One of the ListHeaderSegment.SortDirection enumerated values specifying the current sort\
                  direction.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSortSegment
        
            typedef ::CEGUI::ListHeaderSegment & ( ::CEGUI::ListHeader::*getSortSegment_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getSortSegment"
                , getSortSegment_function_type( &::CEGUI::ListHeader::getSortSegment )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Return the ListHeaderSegment that is marked as being the 'sort key' segment.  There must be at\
                  least one segment\n\
                  to successfully call this method.\n\
            \n\
               @return\n\
                  ListHeaderSegment object which is the sort-key segment.\n\
            \n\
               @exception  InvalidRequestException    thrown if no segments are attached to the ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getSortSegmentID
        
            typedef ::CEGUI::uint ( ::CEGUI::ListHeader::*getSortSegmentID_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getSortSegmentID"
                , getSortSegmentID_function_type( &::CEGUI::ListHeader::getSortSegmentID )
                , "*!\n\
               \n\
                  Return the ListHeaderSegment that is marked as being the 'sort key' segment.  There must be at\
                  least one segment\n\
                  to successfully call this method.\n\
            \n\
               @return\n\
                  ListHeaderSegment object which is the sort-key segment.\n\
            \n\
               @exception  InvalidRequestException    thrown if no segments are attached to the ListHeader.\n\
               *\n\
               *!\n\
               \n\
                  Return the ListHeaderSegment ID that is marked as being the 'sort key' segment.  There must be\
                  at least one segment\n\
                  to successfully call this method.\n\
            \n\
               @return\n\
                  uint which is the sort-key segment ID.\n\
            \n\
               @exception  InvalidRequestException    thrown if no segments are attached to the ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::getTotalSegmentsPixelExtent
        
            typedef float ( ::CEGUI::ListHeader::*getTotalSegmentsPixelExtent_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getTotalSegmentsPixelExtent"
                , getTotalSegmentsPixelExtent_function_type( &::CEGUI::ListHeader::getTotalSegmentsPixelExtent )
                , "*!\n\
               \n\
                  Return the total pixel width of all attached segments.\n\
            \n\
               @return\n\
                  Sum of the pixel widths of all attached ListHeaderSegment objects.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::insertColumn
        
            typedef void ( ::CEGUI::ListHeader::*insertColumn_function_type )( ::CEGUI::String const &,::CEGUI::uint,::CEGUI::UDim const &,::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "insertColumn"
                , insertColumn_function_type( &::CEGUI::ListHeader::insertColumn )
                , ( bp::arg("text"), bp::arg("id"), bp::arg("width"), bp::arg("position") )
                , "*!\n\
               \n\
                  Insert a new column segment at the specified position.\n\
            \n\
               @param text\n\
                  String object holding the initial text for the new segment\n\
            \n\
               @param id\n\
                  Client specified ID code to be assigned to the new segment.\n\
            \n\
                @param width\n\
                    UDim describing the initial width of the new segment.\n\
            \n\
               @param position\n\
                  Zero based column index indicating the desired position for the new column.  If this is\
                  greater than\n\
                  the current number of columns, the new segment is added to the end if the header.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::insertColumn
        
            typedef void ( ::CEGUI::ListHeader::*insertColumn_function_type )( ::CEGUI::String const &,::CEGUI::uint,::CEGUI::UDim const &,::CEGUI::ListHeaderSegment const & ) ;
            
            ListHeader_exposer.def( 
                "insertColumn"
                , insertColumn_function_type( &::CEGUI::ListHeader::insertColumn )
                , ( bp::arg("text"), bp::arg("id"), bp::arg("width"), bp::arg("position") )
                , "*!\n\
               \n\
                  Insert a new column segment at the specified position.\n\
            \n\
               @param text\n\
                  String object holding the initial text for the new segment\n\
            \n\
               @param id\n\
                  Client specified ID code to be assigned to the new segment.\n\
            \n\
                @param width\n\
                    UDim describing the initial width of the new segment.\n\
            \n\
               @param position\n\
                  ListHeaderSegment object indicating the insert position for the new segment.  The new segment\
                  will be\n\
                  inserted before the segment indicated by  position.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if ListHeaderSegment  position is not attached to the\
               ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::isColumnDraggingEnabled
        
            typedef bool ( ::CEGUI::ListHeader::*isColumnDraggingEnabled_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "isColumnDraggingEnabled"
                , isColumnDraggingEnabled_function_type( &::CEGUI::ListHeader::isColumnDraggingEnabled )
                , "*!\n\
               \n\
                  Return whether the user may modify the order of the segments.\n\
            \n\
               @return\n\
                  true if the user may interactively modify the order of the column segments, false if they may\
                  not.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::isColumnSizingEnabled
        
            typedef bool ( ::CEGUI::ListHeader::*isColumnSizingEnabled_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "isColumnSizingEnabled"
                , isColumnSizingEnabled_function_type( &::CEGUI::ListHeader::isColumnSizingEnabled )
                , "*!\n\
               \n\
                  Return whether the user may size column segments.\n\
            \n\
               @return\n\
                  true if the user may interactively modify the width of column segments, false if they may\
                  not.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::isSortingEnabled
        
            typedef bool ( ::CEGUI::ListHeader::*isSortingEnabled_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "isSortingEnabled"
                , isSortingEnabled_function_type( &::CEGUI::ListHeader::isSortingEnabled )
                , "*!\n\
               \n\
                  Return whether user manipulation of the sort column & direction are enabled.\n\
            \n\
               @return\n\
                  true if the user may interactively modify the sort column and direction.  false if the user\
                  may not\n\
                  modify the sort column and direction (these can still be set programmatically).\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::layoutSegments
        
            typedef void ( ListHeader_wrapper::*layoutSegments_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "layoutSegments"
                , layoutSegments_function_type( &ListHeader_wrapper::layoutSegments )
                , "*!\n\
            \n\
               Layout the attached segments\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::moveColumn
        
            typedef void ( ::CEGUI::ListHeader::*moveColumn_function_type )( ::CEGUI::uint,::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "moveColumn"
                , moveColumn_function_type( &::CEGUI::ListHeader::moveColumn )
                , ( bp::arg("column"), bp::arg("position") )
                , "*!\n\
               \n\
                  Moves a column segment into a new position.\n\
            \n\
               @param column\n\
                  Zero based column index indicating the column segment to be moved.\n\
            \n\
               @param position\n\
                  Zero based column index indicating the new position for the segment.  If this is greater than\
                  the current number of segments,\n\
                  the segment is moved to the end of the header.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException thrown if  column is out of range for this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::moveColumn
        
            typedef void ( ::CEGUI::ListHeader::*moveColumn_function_type )( ::CEGUI::uint,::CEGUI::ListHeaderSegment const & ) ;
            
            ListHeader_exposer.def( 
                "moveColumn"
                , moveColumn_function_type( &::CEGUI::ListHeader::moveColumn )
                , ( bp::arg("column"), bp::arg("position") )
                , "*!\n\
               \n\
                  Move a column segment to a new position.\n\
            \n\
               @param column\n\
                  Zero based column index indicating the column segment to be moved.\n\
            \n\
               @param position\n\
                  ListHeaderSegment object indicating the new position for the segment.  The segment at\
                  column\n\
                  will be moved behind segment  position (that is, segment  column will appear to the right of\n\
                  segment  position).\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException thrown if  column is out of range for this ListHeader, or if\
               position\n\
                  is not attached to this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::moveSegment
        
            typedef void ( ::CEGUI::ListHeader::*moveSegment_function_type )( ::CEGUI::ListHeaderSegment const &,::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "moveSegment"
                , moveSegment_function_type( &::CEGUI::ListHeader::moveSegment )
                , ( bp::arg("segment"), bp::arg("position") )
                , "*!\n\
               \n\
                  Moves a segment into a new position.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment object that is to be moved.\n\
            \n\
               @param position\n\
                  Zero based column index indicating the new position for the segment.  If this is greater than\
                  the current number of segments,\n\
                  the segment is moved to the end of the header.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException thrown if  segment is not attached to this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::moveSegment
        
            typedef void ( ::CEGUI::ListHeader::*moveSegment_function_type )( ::CEGUI::ListHeaderSegment const &,::CEGUI::ListHeaderSegment const & ) ;
            
            ListHeader_exposer.def( 
                "moveSegment"
                , moveSegment_function_type( &::CEGUI::ListHeader::moveSegment )
                , ( bp::arg("segment"), bp::arg("position") )
                , "*!\n\
               \n\
                  Move a segment to a new position.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment object that is to be moved.\n\
            \n\
               @param position\n\
                  ListHeaderSegment object indicating the new position for the segment.  The segment  segment\n\
                  will be moved behind segment  position (that is, segment  segment will appear to the right\
                  of\n\
                  segment  position).\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException thrown if either  segment or  position are not attached to\
               this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::onDragMoveSettingChanged
        
            typedef void ( ListHeader_wrapper::*onDragMoveSettingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDragMoveSettingChanged"
                , onDragMoveSettingChanged_function_type( &ListHeader_wrapper::default_onDragMoveSettingChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when the setting that controls the users ability to drag and drop segments\
               changes.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onDragSizeSettingChanged
        
            typedef void ( ListHeader_wrapper::*onDragSizeSettingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDragSizeSettingChanged"
                , onDragSizeSettingChanged_function_type( &ListHeader_wrapper::default_onDragSizeSettingChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when the setting that controls the users ability to size segments changes.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentAdded
        
            typedef void ( ListHeader_wrapper::*onSegmentAdded_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentAdded"
                , onSegmentAdded_function_type( &ListHeader_wrapper::default_onSegmentAdded )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when a new segment is added to the header.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentClicked
        
            typedef void ( ListHeader_wrapper::*onSegmentClicked_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentClicked"
                , onSegmentClicked_function_type( &ListHeader_wrapper::default_onSegmentClicked )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when a segment is clicked by the user.  e.window points to the segment.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentOffsetChanged
        
            typedef void ( ListHeader_wrapper::*onSegmentOffsetChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentOffsetChanged"
                , onSegmentOffsetChanged_function_type( &ListHeader_wrapper::default_onSegmentOffsetChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when the base rendering offset for the segments (scroll position) changes.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentRemoved
        
            typedef void ( ListHeader_wrapper::*onSegmentRemoved_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentRemoved"
                , onSegmentRemoved_function_type( &ListHeader_wrapper::default_onSegmentRemoved )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when a segment is removed from the header.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentSequenceChanged
        
            typedef void ( ListHeader_wrapper::*onSegmentSequenceChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentSequenceChanged"
                , onSegmentSequenceChanged_function_type( &ListHeader_wrapper::default_onSegmentSequenceChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when the segment  column order changes.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSegmentSized
        
            typedef void ( ListHeader_wrapper::*onSegmentSized_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSegmentSized"
                , onSegmentSized_function_type( &ListHeader_wrapper::default_onSegmentSized )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when a segment is sized by the user.  e.window points to the segment.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSortColumnChanged
        
            typedef void ( ListHeader_wrapper::*onSortColumnChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSortColumnChanged"
                , onSortColumnChanged_function_type( &ListHeader_wrapper::default_onSortColumnChanged )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
               New List header event handlers\n\
            *************************************************************************\n\
            *!\n\
            \n\
               Handler called when the sort column is changed.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSortDirectionChanged
        
            typedef void ( ListHeader_wrapper::*onSortDirectionChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSortDirectionChanged"
                , onSortDirectionChanged_function_type( &ListHeader_wrapper::default_onSortDirectionChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when the sort direction is changed.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSortSettingChanged
        
            typedef void ( ListHeader_wrapper::*onSortSettingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSortSettingChanged"
                , onSortSettingChanged_function_type( &ListHeader_wrapper::default_onSortSettingChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called then setting that controls the users ability to modify the search column &\
               direction changes.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::onSplitterDoubleClicked
        
            typedef void ( ListHeader_wrapper::*onSplitterDoubleClicked_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSplitterDoubleClicked"
                , onSplitterDoubleClicked_function_type( &ListHeader_wrapper::default_onSplitterDoubleClicked )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
               Handler called when a segment splitter  sizer is double-clicked.  e.window points to the\
               segment.\n\
            *\n" );
        
        }
        { //::CEGUI::ListHeader::removeColumn
        
            typedef void ( ::CEGUI::ListHeader::*removeColumn_function_type )( ::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "removeColumn"
                , removeColumn_function_type( &::CEGUI::ListHeader::removeColumn )
                , ( bp::arg("column") )
                , "*!\n\
               \n\
                  Removes a column segment from the ListHeader.\n\
            \n\
               @param column\n\
                  Zero based column index indicating the segment to be removed.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if  column is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::removeSegment
        
            typedef void ( ::CEGUI::ListHeader::*removeSegment_function_type )( ::CEGUI::ListHeaderSegment const & ) ;
            
            ListHeader_exposer.def( 
                "removeSegment"
                , removeSegment_function_type( &::CEGUI::ListHeader::removeSegment )
                , ( bp::arg("segment") )
                , "*!\n\
               \n\
                  Remove the specified segment from the ListHeader.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment object that is to be removed from the ListHeader.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if  segment is not attached to this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::segmentClickedHandler
        
            typedef bool ( ListHeader_wrapper::*segmentClickedHandler_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "segmentClickedHandler"
                , segmentClickedHandler_function_type( &ListHeader_wrapper::segmentClickedHandler )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::ListHeader::segmentDoubleClickHandler
        
            typedef bool ( ListHeader_wrapper::*segmentDoubleClickHandler_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "segmentDoubleClickHandler"
                , segmentDoubleClickHandler_function_type( &ListHeader_wrapper::segmentDoubleClickHandler )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::ListHeader::segmentDragHandler
        
            typedef bool ( ListHeader_wrapper::*segmentDragHandler_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "segmentDragHandler"
                , segmentDragHandler_function_type( &ListHeader_wrapper::segmentDragHandler )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::ListHeader::segmentMovedHandler
        
            typedef bool ( ListHeader_wrapper::*segmentMovedHandler_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "segmentMovedHandler"
                , segmentMovedHandler_function_type( &ListHeader_wrapper::segmentMovedHandler )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
               handlers for events we subscribe to from segments\n\
            *************************************************************************\n" );
        
        }
        { //::CEGUI::ListHeader::segmentSizedHandler
        
            typedef bool ( ListHeader_wrapper::*segmentSizedHandler_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "segmentSizedHandler"
                , segmentSizedHandler_function_type( &ListHeader_wrapper::segmentSizedHandler )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
               handlers for events we subscribe to from segments\n\
            *************************************************************************\n" );
        
        }
        { //::CEGUI::ListHeader::setColumnDraggingEnabled
        
            typedef void ( ::CEGUI::ListHeader::*setColumnDraggingEnabled_function_type )( bool ) ;
            
            ListHeader_exposer.def( 
                "setColumnDraggingEnabled"
                , setColumnDraggingEnabled_function_type( &::CEGUI::ListHeader::setColumnDraggingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether columns may be reordered by the user via drag and drop.\n\
            \n\
               @param setting\n\
                  - true to indicate the user may change the order of the column segments via drag and drop.\n\
                  - false to indicate the user may not change the column segment order.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setColumnSizingEnabled
        
            typedef void ( ::CEGUI::ListHeader::*setColumnSizingEnabled_function_type )( bool ) ;
            
            ListHeader_exposer.def( 
                "setColumnSizingEnabled"
                , setColumnSizingEnabled_function_type( &::CEGUI::ListHeader::setColumnSizingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether columns may be sized by the user.\n\
            \n\
               @param setting\n\
                  - true to indicate that the user may interactively size segments.\n\
                  - false to indicate that the user may not interactively size segments.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setColumnWidth
        
            typedef void ( ::CEGUI::ListHeader::*setColumnWidth_function_type )( ::CEGUI::uint,::CEGUI::UDim const & ) ;
            
            ListHeader_exposer.def( 
                "setColumnWidth"
                , setColumnWidth_function_type( &::CEGUI::ListHeader::setColumnWidth )
                , ( bp::arg("column"), bp::arg("width") )
                , "*!\n\
               \n\
                  Set the width of the specified column.\n\
            \n\
               @param column\n\
                  Zero based column index of the segment whose width is to be set.\n\
            \n\
               @param width\n\
                  UDim value specifying the new width to set for the ListHeaderSegment at the zero based\
                  column\n\
                  index specified by  column.\n\
            \n\
               @return\n\
                  Nothing\n\
            \n\
               @exception InvalidRequestException  thrown if  column is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSegmentOffset
        
            typedef void ( ::CEGUI::ListHeader::*setSegmentOffset_function_type )( float ) ;
            
            ListHeader_exposer.def( 
                "setSegmentOffset"
                , setSegmentOffset_function_type( &::CEGUI::ListHeader::setSegmentOffset )
                , ( bp::arg("offset") )
                , "*!\n\
               \n\
                  Set the current base segment offset.  (This implements scrolling of the header segments\
                  within\n\
                  the header area).\n\
            \n\
               @param offset\n\
                  New base offset for the first segment.  The segments will of offset to the left by the amount\
                  specified.\n\
                   offset should be specified using the active metrics system for the ListHeader.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSortColumn
        
            typedef void ( ::CEGUI::ListHeader::*setSortColumn_function_type )( ::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "setSortColumn"
                , setSortColumn_function_type( &::CEGUI::ListHeader::setSortColumn )
                , ( bp::arg("column") )
                , "*!\n\
               \n\
                  Set the column to be used as the sort column.\n\
            \n\
               @param column\n\
                  Zero based column index indicating the column to be sorted.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if  column is out of range for this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSortColumnFromID
        
            typedef void ( ::CEGUI::ListHeader::*setSortColumnFromID_function_type )( ::CEGUI::uint ) ;
            
            ListHeader_exposer.def( 
                "setSortColumnFromID"
                , setSortColumnFromID_function_type( &::CEGUI::ListHeader::setSortColumnFromID )
                , ( bp::arg("id") )
                , "*!\n\
               \n\
                  Set the column to to be used for sorting via its ID code.\n\
            \n\
               @param id\n\
                  ID code of the column segment that is to be used as the sort column.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if no segment with ID  id is attached to the\
               ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSortDirection
        
            typedef void ( ::CEGUI::ListHeader::*setSortDirection_function_type )( ::CEGUI::ListHeaderSegment::SortDirection ) ;
            
            ListHeader_exposer.def( 
                "setSortDirection"
                , setSortDirection_function_type( &::CEGUI::ListHeader::setSortDirection )
                , ( bp::arg("direction") )
                , "*!\n\
               \n\
                  Set the current sort direction.\n\
            \n\
               @param direction\n\
                  One of the ListHeaderSegment.SortDirection enumerated values indicating the sort direction to\
                  be used.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSortSegment
        
            typedef void ( ::CEGUI::ListHeader::*setSortSegment_function_type )( ::CEGUI::ListHeaderSegment const & ) ;
            
            ListHeader_exposer.def( 
                "setSortSegment"
                , setSortSegment_function_type( &::CEGUI::ListHeader::setSortSegment )
                , ( bp::arg("segment") )
                , "*!\n\
               \n\
                  Set the column segment to be used as the sort column.\n\
            \n\
               @param segment\n\
                  ListHeaderSegment object indicating the column to be sorted.\n\
            \n\
               @return\n\
                  Nothing.\n\
            \n\
               @exception InvalidRequestException  thrown if  segment is not attached to this ListHeader.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::setSortingEnabled
        
            typedef void ( ::CEGUI::ListHeader::*setSortingEnabled_function_type )( bool ) ;
            
            ListHeader_exposer.def( 
                "setSortingEnabled"
                , setSortingEnabled_function_type( &::CEGUI::ListHeader::setSortingEnabled )
                , ( bp::arg("setting") )
                , "*************************************************************************\n\
                  Manipulator Methods\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  Set whether user manipulation of the sort column and direction is enabled.\n\
            \n\
               @param setting\n\
                  - true to allow interactive user manipulation of the sort column and direction.\n\
                  - false to disallow interactive user manipulation of the sort column and direction.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::ListHeader::validateWindowRenderer
        
            typedef bool ( ListHeader_wrapper::*validateWindowRenderer_function_type )( ::CEGUI::WindowRenderer const * ) const;
            
            ListHeader_exposer.def( 
                "validateWindowRenderer"
                , validateWindowRenderer_function_type( &ListHeader_wrapper::default_validateWindowRenderer )
                , ( bp::arg("renderer") )
                , "validate window renderer\n" );
        
        }
        ListHeader_exposer.add_static_property( "EventDragMoveSettingChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventDragMoveSettingChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventDragSizeSettingChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventDragSizeSettingChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentAdded"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentAdded
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentClicked"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentClicked
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentRemoved"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentRemoved
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentRenderOffsetChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentRenderOffsetChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentSequenceChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentSequenceChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSegmentSized"
                        , bp::make_getter( &CEGUI::ListHeader::EventSegmentSized
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSortColumnChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventSortColumnChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSortDirectionChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventSortDirectionChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSortSettingChanged"
                        , bp::make_getter( &CEGUI::ListHeader::EventSortSettingChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.add_static_property( "EventSplitterDoubleClicked"
                        , bp::make_getter( &CEGUI::ListHeader::EventSplitterDoubleClicked
                                , bp::return_value_policy< bp::return_by_value >() ) );
        ListHeader_exposer.def_readonly( "MinimumSegmentPixelWidth", CEGUI::ListHeader::MinimumSegmentPixelWidth, "values\n" );
        ListHeader_exposer.def_readonly( "ScrollSpeed", CEGUI::ListHeader::ScrollSpeed, "values\n" );
        ListHeader_exposer.add_static_property( "SegmentNameSuffix"
                        , bp::make_getter( &CEGUI::ListHeader::SegmentNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        { //::CEGUI::Window::addChild_impl
        
            typedef void ( ListHeader_wrapper::*addChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            ListHeader_exposer.def( 
                "addChild_impl"
                , addChild_impl_function_type( &ListHeader_wrapper::default_addChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.addChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Element::addElementProperties
        
            typedef void ( ListHeader_wrapper::*addElementProperties_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "addElementProperties"
                , addElementProperties_function_type( &ListHeader_wrapper::addElementProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Element properties.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::addNamedElementProperties
        
            typedef void ( ListHeader_wrapper::*addNamedElementProperties_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "addNamedElementProperties"
                , addNamedElementProperties_function_type( &ListHeader_wrapper::addNamedElementProperties )
                , "*!\n\
             Add standard CEGUI.NamedElement properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowProperties
        
            typedef void ( ListHeader_wrapper::*addWindowProperties_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "addWindowProperties"
                , addWindowProperties_function_type( &ListHeader_wrapper::addWindowProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Window properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowToDrawList
        
            typedef void ( ListHeader_wrapper::*addWindowToDrawList_function_type )( ::CEGUI::Window &,bool ) ;
            
            ListHeader_exposer.def( 
                "addWindowToDrawList"
                , addWindowToDrawList_function_type( &ListHeader_wrapper::addWindowToDrawList )
                , ( bp::arg("wnd"), bp::arg("at_back")=(bool)(false) )
                , "*!\n\
                \n\
                    Add the given window to the drawing list at an appropriate position for\n\
                    it's settings and the required direction.  Basically, when  at_back\n\
                    is false, the window will appear in front of all other windows with the\n\
                    same 'always on top' setting.  When  at_back is true, the window will\n\
                    appear behind all other windows wih the same 'always on top' setting.\n\
            \n\
                @param wnd\n\
                    Window object to be added to the drawing list.\n\
            \n\
                @param at_back\n\
                    Indicates whether the window should be placed at the back of other\n\
                    windows in the same group. If this is false, the window is placed in\n\
                    front of other windows in the group.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::allocateRenderingWindow
        
            typedef void ( ListHeader_wrapper::*allocateRenderingWindow_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "allocateRenderingWindow"
                , allocateRenderingWindow_function_type( &ListHeader_wrapper::allocateRenderingWindow )
                , "! helper to create and setup the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::banPropertiesForAutoWindow
        
            typedef void ( ListHeader_wrapper::*banPropertiesForAutoWindow_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "banPropertiesForAutoWindow"
                , banPropertiesForAutoWindow_function_type( &ListHeader_wrapper::default_banPropertiesForAutoWindow ) );
        
        }
        { //::CEGUI::Window::beginInitialisation
        
            typedef void ( ::CEGUI::Window::*beginInitialisation_function_type )(  ) ;
            typedef void ( ListHeader_wrapper::*default_beginInitialisation_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "beginInitialisation"
                , beginInitialisation_function_type(&::CEGUI::Window::beginInitialisation)
                , default_beginInitialisation_function_type(&ListHeader_wrapper::default_beginInitialisation) );
        
        }
        { //::CEGUI::Window::bufferGeometry
        
            typedef void ( ListHeader_wrapper::*bufferGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            ListHeader_exposer.def( 
                "bufferGeometry"
                , bufferGeometry_function_type( &ListHeader_wrapper::bufferGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with generating and buffering\n\
                    window geometry.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf; it is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::cleanupChildren
        
            typedef void ( ListHeader_wrapper::*cleanupChildren_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "cleanupChildren"
                , cleanupChildren_function_type( &ListHeader_wrapper::default_cleanupChildren )
                , "*!\n\
            \n\
                Cleanup child windows\n\
            *\n" );
        
        }
        { //::CEGUI::Window::cloneChildWidgetsTo
        
            typedef void ( ::CEGUI::Window::*cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( ListHeader_wrapper::*default_cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            
            ListHeader_exposer.def( 
                "cloneChildWidgetsTo"
                , cloneChildWidgetsTo_function_type(&::CEGUI::Window::cloneChildWidgetsTo)
                , default_cloneChildWidgetsTo_function_type(&ListHeader_wrapper::default_cloneChildWidgetsTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::clonePropertiesTo
        
            typedef void ( ::CEGUI::Window::*clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( ListHeader_wrapper::*default_clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            
            ListHeader_exposer.def( 
                "clonePropertiesTo"
                , clonePropertiesTo_function_type(&::CEGUI::Window::clonePropertiesTo)
                , default_clonePropertiesTo_function_type(&ListHeader_wrapper::default_clonePropertiesTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::destroy
        
            typedef void ( ::CEGUI::Window::*destroy_function_type )(  ) ;
            typedef void ( ListHeader_wrapper::*default_destroy_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "destroy"
                , destroy_function_type(&::CEGUI::Window::destroy)
                , default_destroy_function_type(&ListHeader_wrapper::default_destroy) );
        
        }
        { //::CEGUI::Window::drawSelf
        
            typedef void ( ListHeader_wrapper::*drawSelf_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            ListHeader_exposer.def( 
                "drawSelf"
                , drawSelf_function_type( &ListHeader_wrapper::default_drawSelf )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform the actual rendering for this Window.\n\
            \n\
                @param ctx\n\
                    RenderingContext holding the details of the RenderingSurface to be\n\
                    used for the Window rendering operations.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Window::endInitialisation
        
            typedef void ( ::CEGUI::Window::*endInitialisation_function_type )(  ) ;
            typedef void ( ListHeader_wrapper::*default_endInitialisation_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "endInitialisation"
                , endInitialisation_function_type(&::CEGUI::Window::endInitialisation)
                , default_endInitialisation_function_type(&ListHeader_wrapper::default_endInitialisation) );
        
        }
        { //::CEGUI::Element::fireAreaChangeEvents
        
            typedef void ( ListHeader_wrapper::*fireAreaChangeEvents_function_type )( bool const,bool const ) ;
            
            ListHeader_exposer.def( 
                "fireAreaChangeEvents"
                , fireAreaChangeEvents_function_type( &ListHeader_wrapper::fireAreaChangeEvents )
                , ( bp::arg("moved"), bp::arg("sized") )
                , "! helper to fire events based on changes to area rect\n" );
        
        }
        { //::CEGUI::EventSet::fireEvent
        
            typedef void ( ::CEGUI::EventSet::*fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            typedef void ( ListHeader_wrapper::*default_fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            
            ListHeader_exposer.def( 
                "fireEvent"
                , fireEvent_function_type(&::CEGUI::EventSet::fireEvent)
                , default_fireEvent_function_type(&ListHeader_wrapper::default_fireEvent)
                , ( bp::arg("name"), bp::arg("args"), bp::arg("eventNamespace")="" ) );
        
        }
        { //::CEGUI::EventSet::fireEvent_impl
        
            typedef void ( ListHeader_wrapper::*fireEvent_impl_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs & ) ;
            
            ListHeader_exposer.def( 
                "fireEvent_impl"
                , fireEvent_impl_function_type( &ListHeader_wrapper::fireEvent_impl )
                , ( bp::arg("name"), bp::arg("args") )
                , "! Implementation event firing member\n" );
        
        }
        { //::CEGUI::Window::generateAutoRepeatEvent
        
            typedef void ( ListHeader_wrapper::*generateAutoRepeatEvent_function_type )( ::CEGUI::MouseButton ) ;
            
            ListHeader_exposer.def( 
                "generateAutoRepeatEvent"
                , generateAutoRepeatEvent_function_type( &ListHeader_wrapper::generateAutoRepeatEvent )
                , ( bp::arg("button") )
                , "*!\n\
            \n\
                Fires off a repeated mouse button down event for this window.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNamePath_impl
        
            typedef ::CEGUI::NamedElement * ( ListHeader_wrapper::*getChildByNamePath_impl_function_type )( ::CEGUI::String const & ) const;
            
            ListHeader_exposer.def( 
                "getChildByNamePath_impl"
                , getChildByNamePath_impl_function_type( &ListHeader_wrapper::default_getChildByNamePath_impl )
                , ( bp::arg("name_path") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Retrieves a child at  name_path or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNameRecursive_impl
        
            typedef ::CEGUI::NamedElement * ( ListHeader_wrapper::*getChildByNameRecursive_impl_function_type )( ::CEGUI::String const & ) const;
            
            ListHeader_exposer.def( 
                "getChildByNameRecursive_impl"
                , getChildByNameRecursive_impl_function_type( &ListHeader_wrapper::default_getChildByNameRecursive_impl )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Finds a child by  name or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::Element::getClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getClientChildContentArea_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getClientChildContentArea"
                , getClientChildContentArea_function_type(&::CEGUI::Element::getClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getHitTestRect_impl
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getHitTestRect_impl_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getHitTestRect_impl"
                , getHitTestRect_impl_function_type( &ListHeader_wrapper::default_getHitTestRect_impl )
                , "! Default implementation of function to return Window inner clipper area.\n\
            ! Default implementation of function to return Window hit-test area.\n" );
        
        }
        { //::CEGUI::Window::getInnerRectClipper_impl
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getInnerRectClipper_impl_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getInnerRectClipper_impl"
                , getInnerRectClipper_impl_function_type( &ListHeader_wrapper::default_getInnerRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n\
            ! Default implementation of function to return Window inner clipper area.\n" );
        
        }
        { //::CEGUI::Element::getNonClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getNonClientChildContentArea_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getNonClientChildContentArea"
                , getNonClientChildContentArea_function_type(&::CEGUI::Element::getNonClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getOuterRectClipper_impl
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getOuterRectClipper_impl_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getOuterRectClipper_impl"
                , getOuterRectClipper_impl_function_type( &ListHeader_wrapper::default_getOuterRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n" );
        
        }
        { //::CEGUI::Window::getParentElementClipIntersection
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getParentElementClipIntersection_function_type )( ::CEGUI::Rectf const & ) const;
            
            ListHeader_exposer.def( 
                "getParentElementClipIntersection"
                , getParentElementClipIntersection_function_type( &ListHeader_wrapper::getParentElementClipIntersection )
                , ( bp::arg("unclipped_area") )
                , "! helper function for calculating clipping rectangles.\n" );
        
        }
        { //::CEGUI::Window::getRenderedStringParser
        
            typedef ::CEGUI::RenderedStringParser & ( ::CEGUI::Window::*getRenderedStringParser_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getRenderedStringParser"
                , getRenderedStringParser_function_type(&::CEGUI::Window::getRenderedStringParser)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Window::getRenderingContext_impl
        
            typedef void ( ::CEGUI::Window::*getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            typedef void ( ListHeader_wrapper::*default_getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            
            ListHeader_exposer.def( 
                "getRenderingContext_impl"
                , getRenderingContext_impl_function_type(&::CEGUI::Window::getRenderingContext_impl)
                , default_getRenderingContext_impl_function_type(&ListHeader_wrapper::default_getRenderingContext_impl)
                , ( bp::arg("ctx") ) );
        
        }
        { //::CEGUI::Window::getRootContainerSize
        
            typedef ::CEGUI::Sizef const & ( ::CEGUI::Window::*getRootContainerSize_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getRootContainerSize"
                , getRootContainerSize_function_type(&::CEGUI::Window::getRootContainerSize)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::EventSet::getScriptModule
        
            typedef ::CEGUI::ScriptModule * ( ListHeader_wrapper::*getScriptModule_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "getScriptModule"
                , getScriptModule_function_type( &ListHeader_wrapper::getScriptModule )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "! Implementation event firing member\n\
            ! Helper to return the script module pointer or throw.\n" );
        
        }
        { //::CEGUI::Window::getUnclippedInnerRect_impl
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getUnclippedInnerRect_impl_function_type )( bool ) const;
            
            ListHeader_exposer.def( 
                "getUnclippedInnerRect_impl"
                , getUnclippedInnerRect_impl_function_type( &ListHeader_wrapper::default_getUnclippedInnerRect_impl )
                , ( bp::arg("skipAllPixelAlignment") ) );
        
        }
        { //::CEGUI::Element::getUnclippedOuterRect_impl
        
            typedef ::CEGUI::Rectf ( ListHeader_wrapper::*getUnclippedOuterRect_impl_function_type )( bool ) const;
            
            ListHeader_exposer.def( 
                "getUnclippedOuterRect_impl"
                , getUnclippedOuterRect_impl_function_type( &ListHeader_wrapper::default_getUnclippedOuterRect_impl )
                , ( bp::arg("skipAllPixelAlignment") )
                , "! Default implementation of function to return Element's outer rect area.\n" );
        
        }
        { //::CEGUI::Window::getWindowAttachedToCommonAncestor
        
            typedef ::CEGUI::Window const * ( ListHeader_wrapper::*getWindowAttachedToCommonAncestor_function_type )( ::CEGUI::Window const & ) const;
            
            ListHeader_exposer.def( 
                "getWindowAttachedToCommonAncestor"
                , getWindowAttachedToCommonAncestor_function_type( &ListHeader_wrapper::getWindowAttachedToCommonAncestor )
                , ( bp::arg("wnd") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
            \n\
                Helper function to return the ancestor Window of a wnd that is attached\n\
                as a child to a window that is also an ancestor of a this.  Returns 0\n\
                if a wnd and a this are not part of the same hierachy.\n\
             *\n" );
        
        }
        { //::CEGUI::Window::handleFontRenderSizeChange
        
            typedef bool ( ListHeader_wrapper::*handleFontRenderSizeChange_function_type )( ::CEGUI::EventArgs const & ) ;
            
            ListHeader_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type( &ListHeader_wrapper::default_handleFontRenderSizeChange )
                , ( bp::arg("args") )
                , "! handler function for when font render size changes.\n" );
        
        }
        { //::CEGUI::Window::initialiseClippers
        
            typedef void ( ListHeader_wrapper::*initialiseClippers_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            ListHeader_exposer.def( 
                "initialiseClippers"
                , initialiseClippers_function_type( &ListHeader_wrapper::initialiseClippers )
                , ( bp::arg("ctx") )
                , "! Helper to intialise the needed clipping for geometry and render surface.\n" );
        
        }
        { //::CEGUI::Window::initialiseComponents
        
            typedef void ( ::CEGUI::Window::*initialiseComponents_function_type )(  ) ;
            typedef void ( ListHeader_wrapper::*default_initialiseComponents_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "initialiseComponents"
                , initialiseComponents_function_type(&::CEGUI::Window::initialiseComponents)
                , default_initialiseComponents_function_type(&ListHeader_wrapper::default_initialiseComponents) );
        
        }
        { //::CEGUI::Window::invalidate_impl
        
            typedef void ( ListHeader_wrapper::*invalidate_impl_function_type )( bool const ) ;
            
            ListHeader_exposer.def( 
                "invalidate_impl"
                , invalidate_impl_function_type( &ListHeader_wrapper::invalidate_impl )
                , ( bp::arg("recursive") )
                , "! helper function to invalidate window and optionally child windows.\n" );
        
        }
        { //::CEGUI::Window::isHit
        
            typedef bool ( ::CEGUI::Window::*isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            typedef bool ( ListHeader_wrapper::*default_isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            
            ListHeader_exposer.def( 
                "isHit"
                , isHit_function_type(&::CEGUI::Window::isHit)
                , default_isHit_function_type(&ListHeader_wrapper::default_isHit)
                , ( bp::arg("position"), bp::arg("allow_disabled")=(bool const)(false) ) );
        
        }
        { //::CEGUI::Window::isHitTargetWindow
        
            typedef bool ( ListHeader_wrapper::*isHitTargetWindow_function_type )( ::CEGUI::Vector2f const &,bool ) const;
            
            ListHeader_exposer.def( 
                "isHitTargetWindow"
                , isHitTargetWindow_function_type( &ListHeader_wrapper::isHitTargetWindow )
                , ( bp::arg("position"), bp::arg("allow_disabled") ) );
        
        }
        { //::CEGUI::Element::isInnerRectSizeChanged
        
            typedef bool ( ListHeader_wrapper::*isInnerRectSizeChanged_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "isInnerRectSizeChanged"
                , isInnerRectSizeChanged_function_type( &ListHeader_wrapper::isInnerRectSizeChanged )
                , "! helper to return whether the inner rect size has changed\n" );
        
        }
        { //::CEGUI::Window::isPropertyAtDefault
        
            typedef bool ( ListHeader_wrapper::*isPropertyAtDefault_function_type )( ::CEGUI::Property const * ) const;
            
            ListHeader_exposer.def( 
                "isPropertyAtDefault"
                , isPropertyAtDefault_function_type( &ListHeader_wrapper::isPropertyAtDefault )
                , ( bp::arg("property") )
                , "*!\n\
            \n\
                Returns whether a property is at it's default value.\n\
                This function is different from Property.isDefatult as it takes the assigned look'n'feel\n\
                (if the is one) into account.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::isTopOfZOrder
        
            typedef bool ( ListHeader_wrapper::*isTopOfZOrder_function_type )(  ) const;
            
            ListHeader_exposer.def( 
                "isTopOfZOrder"
                , isTopOfZOrder_function_type( &ListHeader_wrapper::isTopOfZOrder )
                , "*!\n\
                \n\
                    Return whether the window is at the top of the Z-Order.  This will\n\
                    correctly take into account 'Always on top' windows as needed.\n\
            \n\
                @return\n\
                    - true if the Window is at the top of the z-order in relation to sibling\n\
                      windows with the same 'always on top' setting.\n\
                    - false if the Window is not at the top of the z-order in relation to\n\
                      sibling windows with the same 'always on top' setting.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::layoutLookNFeelChildWidgets
        
            typedef void ( ListHeader_wrapper::*layoutLookNFeelChildWidgets_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "layoutLookNFeelChildWidgets"
                , layoutLookNFeelChildWidgets_function_type( &ListHeader_wrapper::layoutLookNFeelChildWidgets )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::markCachedWindowRectsInvalid
        
            typedef void ( ListHeader_wrapper::*markCachedWindowRectsInvalid_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "markCachedWindowRectsInvalid"
                , markCachedWindowRectsInvalid_function_type( &ListHeader_wrapper::markCachedWindowRectsInvalid )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::moveToFront_impl
        
            typedef bool ( ListHeader_wrapper::*moveToFront_impl_function_type )( bool ) ;
            
            ListHeader_exposer.def( 
                "moveToFront_impl"
                , moveToFront_impl_function_type( &ListHeader_wrapper::default_moveToFront_impl )
                , ( bp::arg("wasClicked") )
                , "*!\n\
                \n\
                    Implements move to front behavior.\n\
            \n\
                @return\n\
                    Should return true if some action was taken, or false if there was\n\
                    nothing to be done.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::notifyChildrenOfSizeChange
        
            typedef void ( ListHeader_wrapper::*notifyChildrenOfSizeChange_function_type )( bool const,bool const ) ;
            
            ListHeader_exposer.def( 
                "notifyChildrenOfSizeChange"
                , notifyChildrenOfSizeChange_function_type( &ListHeader_wrapper::notifyChildrenOfSizeChange )
                , ( bp::arg("non_client"), bp::arg("client") ) );
        
        }
        { //::CEGUI::Window::notifyClippingChanged
        
            typedef void ( ListHeader_wrapper::*notifyClippingChanged_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "notifyClippingChanged"
                , notifyClippingChanged_function_type( &ListHeader_wrapper::notifyClippingChanged )
                , "*!\n\
            \n\
                Recursively inform all children that the clipping has changed and screen rects\n\
                needs to be recached.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::notifyScreenAreaChanged
        
            typedef void ( ::CEGUI::Window::*notifyScreenAreaChanged_function_type )( bool ) ;
            typedef void ( ListHeader_wrapper::*default_notifyScreenAreaChanged_function_type )( bool ) ;
            
            ListHeader_exposer.def( 
                "notifyScreenAreaChanged"
                , notifyScreenAreaChanged_function_type(&::CEGUI::Window::notifyScreenAreaChanged)
                , default_notifyScreenAreaChanged_function_type(&ListHeader_wrapper::default_notifyScreenAreaChanged)
                , ( bp::arg("recursive")=(bool)(true) ) );
        
        }
        { //::CEGUI::Window::onActivated
        
            typedef void ( ListHeader_wrapper::*onActivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onActivated"
                , onActivated_function_type( &ListHeader_wrapper::default_onActivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has become the active window.\n\
            \n\
                @param e\n\
                    ActivationEventArgs class whose 'otherWindow' field is set to the window\n\
                    that previously was active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlphaChanged
        
            typedef void ( ListHeader_wrapper::*onAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onAlphaChanged"
                , onAlphaChanged_function_type( &ListHeader_wrapper::default_onAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's alpha blend value is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlwaysOnTopChanged
        
            typedef void ( ListHeader_wrapper::*onAlwaysOnTopChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onAlwaysOnTopChanged"
                , onAlwaysOnTopChanged_function_type( &ListHeader_wrapper::default_onAlwaysOnTopChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's always-on-top setting is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCaptureGained
        
            typedef void ( ListHeader_wrapper::*onCaptureGained_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onCaptureGained"
                , onCaptureGained_function_type( &ListHeader_wrapper::default_onCaptureGained )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gains capture of mouse inputs.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCaptureLost
        
            typedef void ( ListHeader_wrapper::*onCaptureLost_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onCaptureLost"
                , onCaptureLost_function_type( &ListHeader_wrapper::default_onCaptureLost )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window loses capture of mouse inputs.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCharacter
        
            typedef void ( ListHeader_wrapper::*onCharacter_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onCharacter"
                , onCharacter_function_type( &ListHeader_wrapper::default_onCharacter )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a character-key has been pressed while this window\n\
                    has input focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'codepoint' field is set to the Unicode code\n\
                    point (encoded as utf32) for the character typed, and whose 'sysKeys'\n\
                    field represents the combination of SystemKey that were active when the\n\
                    event was generated.  All other fields should be considered as 'junk'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildAdded
        
            typedef void ( ListHeader_wrapper::*onChildAdded_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onChildAdded"
                , onChildAdded_function_type( &ListHeader_wrapper::default_onChildAdded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is added to this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that has been added.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildRemoved
        
            typedef void ( ListHeader_wrapper::*onChildRemoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onChildRemoved"
                , onChildRemoved_function_type( &ListHeader_wrapper::default_onChildRemoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is removed from this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the window\n\
                    that has been removed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onClippingChanged
        
            typedef void ( ListHeader_wrapper::*onClippingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onClippingChanged"
                , onClippingChanged_function_type( &ListHeader_wrapper::default_onClippingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being clipped by it's\n\
                    parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDeactivated
        
            typedef void ( ListHeader_wrapper::*onDeactivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDeactivated"
                , onDeactivated_function_type( &ListHeader_wrapper::default_onDeactivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has lost input focus and has been\n\
                    deactivated.\n\
            \n\
                @param e\n\
                    ActivationEventArgs object whose 'otherWindow' field is set to the\n\
                    window that has now become active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDestructionStarted
        
            typedef void ( ListHeader_wrapper::*onDestructionStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDestructionStarted"
                , onDestructionStarted_function_type( &ListHeader_wrapper::default_onDestructionStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's destruction sequence has begun.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDisabled
        
            typedef void ( ListHeader_wrapper::*onDisabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDisabled"
                , onDisabled_function_type( &ListHeader_wrapper::default_onDisabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is disabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemDropped
        
            typedef void ( ListHeader_wrapper::*onDragDropItemDropped_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDragDropItemDropped"
                , onDragDropItemDropped_function_type( &ListHeader_wrapper::default_onDragDropItemDropped )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemEnters
        
            typedef void ( ListHeader_wrapper::*onDragDropItemEnters_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDragDropItemEnters"
                , onDragDropItemEnters_function_type( &ListHeader_wrapper::default_onDragDropItemEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemLeaves
        
            typedef void ( ListHeader_wrapper::*onDragDropItemLeaves_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onDragDropItemLeaves"
                , onDragDropItemLeaves_function_type( &ListHeader_wrapper::default_onDragDropItemLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onEnabled
        
            typedef void ( ListHeader_wrapper::*onEnabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onEnabled"
                , onEnabled_function_type( &ListHeader_wrapper::default_onEnabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is enabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onFontChanged
        
            typedef void ( ListHeader_wrapper::*onFontChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onFontChanged"
                , onFontChanged_function_type( &ListHeader_wrapper::default_onFontChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's font is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onHidden
        
            typedef void ( ListHeader_wrapper::*onHidden_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onHidden"
                , onHidden_function_type( &ListHeader_wrapper::default_onHidden )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is hidden.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onHorizontalAlignmentChanged
        
            typedef void ( ListHeader_wrapper::*onHorizontalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onHorizontalAlignmentChanged"
                , onHorizontalAlignmentChanged_function_type( &ListHeader_wrapper::default_onHorizontalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the horizontal alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onIDChanged
        
            typedef void ( ListHeader_wrapper::*onIDChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onIDChanged"
                , onIDChanged_function_type( &ListHeader_wrapper::default_onIDChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's client assigned ID is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInheritsAlphaChanged
        
            typedef void ( ListHeader_wrapper::*onInheritsAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onInheritsAlphaChanged"
                , onInheritsAlphaChanged_function_type( &ListHeader_wrapper::default_onInheritsAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for inheriting alpha-blending\n\
                    is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInvalidated
        
            typedef void ( ListHeader_wrapper::*onInvalidated_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onInvalidated"
                , onInvalidated_function_type( &ListHeader_wrapper::default_onInvalidated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gets invalidated.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onKeyDown
        
            typedef void ( ListHeader_wrapper::*onKeyDown_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onKeyDown"
                , onKeyDown_function_type( &ListHeader_wrapper::default_onKeyDown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a key as been depressed while this window has input\n\
                    focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'scancode' field is set to the Key.Scan value\n\
                    representing the key that was pressed, and whose 'sysKeys' field\n\
                    represents the combination of SystemKey that were active when the event\n\
                    was generated.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onKeyUp
        
            typedef void ( ListHeader_wrapper::*onKeyUp_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onKeyUp"
                , onKeyUp_function_type( &ListHeader_wrapper::default_onKeyUp )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a key as been released while this window has input\n\
                    focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'scancode' field is set to the Key.Scan value\n\
                    representing the key that was released, and whose 'sysKeys' field\n\
                    represents the combination of SystemKey that were active when the event\n\
                    was generated.  All other fields should be considered as 'junk'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMarginChanged
        
            typedef void ( ListHeader_wrapper::*onMarginChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMarginChanged"
                , onMarginChanged_function_type( &ListHeader_wrapper::default_onMarginChanged )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onMouseButtonDown
        
            typedef void ( ListHeader_wrapper::*onMouseButtonDown_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseButtonDown"
                , onMouseButtonDown_function_type( &ListHeader_wrapper::default_onMouseButtonDown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been depressed within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseButtonUp
        
            typedef void ( ListHeader_wrapper::*onMouseButtonUp_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseButtonUp"
                , onMouseButtonUp_function_type( &ListHeader_wrapper::default_onMouseButtonUp )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been released within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseClicked
        
            typedef void ( ListHeader_wrapper::*onMouseClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseClicked"
                , onMouseClicked_function_type( &ListHeader_wrapper::default_onMouseClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been clicked (that is depressed\n\
                    and then released, within a specified time) within this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseDoubleClicked
        
            typedef void ( ListHeader_wrapper::*onMouseDoubleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseDoubleClicked"
                , onMouseDoubleClicked_function_type( &ListHeader_wrapper::default_onMouseDoubleClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been double-clicked within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEnters
        
            typedef void ( ListHeader_wrapper::*onMouseEnters_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseEnters"
                , onMouseEnters_function_type( &ListHeader_wrapper::default_onMouseEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area and\n\
                    is actually over some part of this windows surface and not, for\n\
                    instance over a child window - even though technically in those cases\n\
                    the mouse is also within this Window's area, the handler will not be\n\
                    called.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseEntersArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEntersArea
        
            typedef void ( ListHeader_wrapper::*onMouseEntersArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseEntersArea"
                , onMouseEntersArea_function_type( &ListHeader_wrapper::default_onMouseEntersArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeaves
        
            typedef void ( ListHeader_wrapper::*onMouseLeaves_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseLeaves"
                , onMouseLeaves_function_type( &ListHeader_wrapper::default_onMouseLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor is no longer over this window's\n\
                    surface area.  This will be called when the mouse is not over a part\n\
                    of this Window's actual surface - even though technically the mouse is\n\
                    still within the Window's area, for example if the mouse moves over a\n\
                    child window.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseLeavesArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeavesArea
        
            typedef void ( ListHeader_wrapper::*onMouseLeavesArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseLeavesArea"
                , onMouseLeavesArea_function_type( &ListHeader_wrapper::default_onMouseLeavesArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has left this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseMove
        
            typedef void ( ListHeader_wrapper::*onMouseMove_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseMove"
                , onMouseMove_function_type( &ListHeader_wrapper::default_onMouseMove )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has been moved within this window's\n\
                    area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseTripleClicked
        
            typedef void ( ListHeader_wrapper::*onMouseTripleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseTripleClicked"
                , onMouseTripleClicked_function_type( &ListHeader_wrapper::default_onMouseTripleClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been triple-clicked within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseWheel
        
            typedef void ( ListHeader_wrapper::*onMouseWheel_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMouseWheel"
                , onMouseWheel_function_type( &ListHeader_wrapper::default_onMouseWheel )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse wheel (z-axis) position changes within\n\
                    this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMoved
        
            typedef void ( ListHeader_wrapper::*onMoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onMoved"
                , onMoved_function_type( &ListHeader_wrapper::default_onMoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's position changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::NamedElement::onNameChanged
        
            typedef void ( ListHeader_wrapper::*onNameChanged_function_type )( ::CEGUI::NamedElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onNameChanged"
                , onNameChanged_function_type( &ListHeader_wrapper::default_onNameChanged )
                , ( bp::arg("e") )
                , "*!\n\
                 Handler called when the element's name changes.\n\
            \n\
                @param e\n\
                    NamedElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onNonClientChanged
        
            typedef void ( ListHeader_wrapper::*onNonClientChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onNonClientChanged"
                , onNonClientChanged_function_type( &ListHeader_wrapper::default_onNonClientChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the element's non-client setting, affecting it's\n\
                    position and size relative to it's parent is changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentDestroyChanged
        
            typedef void ( ListHeader_wrapper::*onParentDestroyChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onParentDestroyChanged"
                , onParentDestroyChanged_function_type( &ListHeader_wrapper::default_onParentDestroyChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being destroyed\n\
                    automatically be it's parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentSized
        
            typedef void ( ListHeader_wrapper::*onParentSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onParentSized"
                , onParentSized_function_type( &ListHeader_wrapper::default_onParentSized )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's parent window has been resized.  If\n\
                    this window is the root  GUI Sheet window, this call will be made when\n\
                    the display size changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the the\n\
                    window that caused the event; this is typically either this window's\n\
                    parent window, or NULL to indicate the screen size has changed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingEnded
        
            typedef void ( ListHeader_wrapper::*onRenderingEnded_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onRenderingEnded"
                , onRenderingEnded_function_type( &ListHeader_wrapper::default_onRenderingEnded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has ended.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingStarted
        
            typedef void ( ListHeader_wrapper::*onRenderingStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onRenderingStarted"
                , onRenderingStarted_function_type( &ListHeader_wrapper::default_onRenderingStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has started.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRotated
        
            typedef void ( ListHeader_wrapper::*onRotated_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onRotated"
                , onRotated_function_type( &ListHeader_wrapper::default_onRotated )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onShown
        
            typedef void ( ListHeader_wrapper::*onShown_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onShown"
                , onShown_function_type( &ListHeader_wrapper::default_onShown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is shown (made visible).\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onSized
        
            typedef void ( ListHeader_wrapper::*onSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onSized"
                , onSized_function_type( &ListHeader_wrapper::default_onSized )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
                    Event trigger methods\n\
                *************************************************************************\n\
                *!\n\
                \n\
                    Handler called when the window's size changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onTextChanged
        
            typedef void ( ListHeader_wrapper::*onTextChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onTextChanged"
                , onTextChanged_function_type( &ListHeader_wrapper::default_onTextChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's text is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onTextParsingChanged
        
            typedef void ( ListHeader_wrapper::*onTextParsingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onTextParsingChanged"
                , onTextParsingChanged_function_type( &ListHeader_wrapper::default_onTextParsingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for whether text parsing is\n\
                    enabled is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onVerticalAlignmentChanged
        
            typedef void ( ListHeader_wrapper::*onVerticalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onVerticalAlignmentChanged"
                , onVerticalAlignmentChanged_function_type( &ListHeader_wrapper::default_onVerticalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the vertical alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererAttached
        
            typedef void ( ListHeader_wrapper::*onWindowRendererAttached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onWindowRendererAttached"
                , onWindowRendererAttached_function_type( &ListHeader_wrapper::default_onWindowRendererAttached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a new window renderer object is attached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got a new\n\
                      window renderer attached. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererDetached
        
            typedef void ( ListHeader_wrapper::*onWindowRendererDetached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onWindowRendererDetached"
                , onWindowRendererDetached_function_type( &ListHeader_wrapper::default_onWindowRendererDetached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the currently attached window renderer object is detached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got lost its\n\
                      window renderer. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onZChange_impl
        
            typedef void ( ListHeader_wrapper::*onZChange_impl_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "onZChange_impl"
                , onZChange_impl_function_type( &ListHeader_wrapper::default_onZChange_impl )
                , "*!\n\
            \n\
                Notify 'this' and all siblings of a ZOrder change event\n\
            *\n" );
        
        }
        { //::CEGUI::Window::onZChanged
        
            typedef void ( ListHeader_wrapper::*onZChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            ListHeader_exposer.def( 
                "onZChanged"
                , onZChanged_function_type( &ListHeader_wrapper::default_onZChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the z-order position of this window has changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::performChildWindowLayout
        
            typedef void ( ::CEGUI::Window::*performChildWindowLayout_function_type )( bool,bool ) ;
            typedef void ( ListHeader_wrapper::*default_performChildWindowLayout_function_type )( bool,bool ) ;
            
            ListHeader_exposer.def( 
                "performChildWindowLayout"
                , performChildWindowLayout_function_type(&::CEGUI::Window::performChildWindowLayout)
                , default_performChildWindowLayout_function_type(&ListHeader_wrapper::default_performChildWindowLayout)
                , ( bp::arg("nonclient_sized_hint")=(bool)(false), bp::arg("client_sized_hint")=(bool)(false) ) );
        
        }
        { //::CEGUI::Window::performCopy
        
            typedef bool ( ::CEGUI::Window::*performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( ListHeader_wrapper::*default_performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            
            ListHeader_exposer.def( 
                "performCopy"
                , performCopy_function_type(&::CEGUI::Window::performCopy)
                , default_performCopy_function_type(&ListHeader_wrapper::default_performCopy)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::performCut
        
            typedef bool ( ::CEGUI::Window::*performCut_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( ListHeader_wrapper::*default_performCut_function_type )( ::CEGUI::Clipboard & ) ;
            
            ListHeader_exposer.def( 
                "performCut"
                , performCut_function_type(&::CEGUI::Window::performCut)
                , default_performCut_function_type(&ListHeader_wrapper::default_performCut)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::performPaste
        
            typedef bool ( ::CEGUI::Window::*performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( ListHeader_wrapper::*default_performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            
            ListHeader_exposer.def( 
                "performPaste"
                , performPaste_function_type(&::CEGUI::Window::performPaste)
                , default_performPaste_function_type(&ListHeader_wrapper::default_performPaste)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::populateGeometryBuffer
        
            typedef void ( ListHeader_wrapper::*populateGeometryBuffer_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "populateGeometryBuffer"
                , populateGeometryBuffer_function_type( &ListHeader_wrapper::default_populateGeometryBuffer )
                , "*!\n\
                \n\
                    Update the rendering cache.\n\
            \n\
                    Populates the Window's GeometryBuffer ready for rendering.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::queueGeometry
        
            typedef void ( ListHeader_wrapper::*queueGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            ListHeader_exposer.def( 
                "queueGeometry"
                , queueGeometry_function_type( &ListHeader_wrapper::queueGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with positioning, clipping and\n\
                    queueing of window geometry to RenderingSurfaces.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf and is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::releaseRenderingWindow
        
            typedef void ( ListHeader_wrapper::*releaseRenderingWindow_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "releaseRenderingWindow"
                , releaseRenderingWindow_function_type( &ListHeader_wrapper::releaseRenderingWindow )
                , "! helper to clean up the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::removeChild_impl
        
            typedef void ( ListHeader_wrapper::*removeChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            ListHeader_exposer.def( 
                "removeChild_impl"
                , removeChild_impl_function_type( &ListHeader_wrapper::default_removeChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.removeChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Window::removeWindowFromDrawList
        
            typedef void ( ListHeader_wrapper::*removeWindowFromDrawList_function_type )( ::CEGUI::Window const & ) ;
            
            ListHeader_exposer.def( 
                "removeWindowFromDrawList"
                , removeWindowFromDrawList_function_type( &ListHeader_wrapper::removeWindowFromDrawList )
                , ( bp::arg("wnd") )
                , "*!\n\
                \n\
                    Removes the window from the drawing list.  If the window is not attached\n\
                    to the drawing list then nothing happens.\n\
            \n\
                @param wnd\n\
                    Window object to be removed from the drawing list.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            typedef void ( ListHeader_wrapper::*default_setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            
            ListHeader_exposer.def( 
                "setArea"
                , setArea_function_type(&::CEGUI::Element::setArea)
                , default_setArea_function_type(&ListHeader_wrapper::default_setArea)
                , ( bp::arg("pos"), bp::arg("size") ) );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const & ) ;
            
            ListHeader_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("xpos"), bp::arg("ypos"), bp::arg("width"), bp::arg("height") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::URect const & ) ;
            
            ListHeader_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("area") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Window::setArea_impl
        
            typedef void ( ListHeader_wrapper::*setArea_impl_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const &,bool,bool ) ;
            
            ListHeader_exposer.def( 
                "setArea_impl"
                , setArea_impl_function_type( &ListHeader_wrapper::default_setArea_impl )
                , ( bp::arg("pos"), bp::arg("size"), bp::arg("topLeftSizing")=(bool)(false), bp::arg("fireEvents")=(bool)(true) )
                , "! opydoc Element.setArea_impl\n" );
        
        }
        { //::CEGUI::Element::setHorizontalAlignment
        
            typedef void ( ::CEGUI::Element::*setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            typedef void ( ListHeader_wrapper::*default_setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            
            ListHeader_exposer.def( 
                "setHorizontalAlignment"
                , setHorizontalAlignment_function_type(&::CEGUI::Element::setHorizontalAlignment)
                , default_setHorizontalAlignment_function_type(&ListHeader_wrapper::default_setHorizontalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::Window::setLookNFeel
        
            typedef void ( ::CEGUI::Window::*setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            typedef void ( ListHeader_wrapper::*default_setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            
            ListHeader_exposer.def( 
                "setLookNFeel"
                , setLookNFeel_function_type(&::CEGUI::Window::setLookNFeel)
                , default_setLookNFeel_function_type(&ListHeader_wrapper::default_setLookNFeel)
                , ( bp::arg("look") ) );
        
        }
        { //::CEGUI::Window::setMargin
        
            typedef void ( ::CEGUI::Window::*setMargin_function_type )( ::CEGUI::UBox const & ) ;
            typedef void ( ListHeader_wrapper::*default_setMargin_function_type )( ::CEGUI::UBox const & ) ;
            
            ListHeader_exposer.def( 
                "setMargin"
                , setMargin_function_type(&::CEGUI::Window::setMargin)
                , default_setMargin_function_type(&ListHeader_wrapper::default_setMargin)
                , ( bp::arg("margin") ) );
        
        }
        { //::CEGUI::NamedElement::setName
        
            typedef void ( ::CEGUI::NamedElement::*setName_function_type )( ::CEGUI::String const & ) ;
            typedef void ( ListHeader_wrapper::*default_setName_function_type )( ::CEGUI::String const & ) ;
            
            ListHeader_exposer.def( 
                "setName"
                , setName_function_type(&::CEGUI::NamedElement::setName)
                , default_setName_function_type(&ListHeader_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::CEGUI::Window::setParent
        
            typedef void ( ListHeader_wrapper::*setParent_function_type )( ::CEGUI::Element * ) ;
            
            ListHeader_exposer.def( 
                "setParent"
                , setParent_function_type( &ListHeader_wrapper::default_setParent )
                , ( bp::arg("parent") )
                , "*!\n\
                \n\
                    Set the parent window for this window object.\n\
            \n\
                @param parent\n\
                    Pointer to a Window object that is to be assigned as the parent to this\n\
                    Window.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setVerticalAlignment
        
            typedef void ( ::CEGUI::Element::*setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            typedef void ( ListHeader_wrapper::*default_setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            
            ListHeader_exposer.def( 
                "setVerticalAlignment"
                , setVerticalAlignment_function_type(&::CEGUI::Element::setVerticalAlignment)
                , default_setVerticalAlignment_function_type(&ListHeader_wrapper::default_setVerticalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ListHeader_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            ListHeader_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&ListHeader_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ListHeader_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            
            ListHeader_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&ListHeader_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("group"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::Window::transferChildSurfaces
        
            typedef void ( ListHeader_wrapper::*transferChildSurfaces_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "transferChildSurfaces"
                , transferChildSurfaces_function_type( &ListHeader_wrapper::transferChildSurfaces )
                , "! transfer RenderingSurfaces to be owned by our target RenderingSurface.\n" );
        
        }
        { //::CEGUI::Window::update
        
            typedef void ( ::CEGUI::Window::*update_function_type )( float ) ;
            typedef void ( ListHeader_wrapper::*default_update_function_type )( float ) ;
            
            ListHeader_exposer.def( 
                "update"
                , update_function_type(&::CEGUI::Window::update)
                , default_update_function_type(&ListHeader_wrapper::default_update)
                , ( bp::arg("elapsed") ) );
        
        }
        { //::CEGUI::Window::updateGeometryRenderSettings
        
            typedef void ( ListHeader_wrapper::*updateGeometryRenderSettings_function_type )(  ) ;
            
            ListHeader_exposer.def( 
                "updateGeometryRenderSettings"
                , updateGeometryRenderSettings_function_type( &ListHeader_wrapper::updateGeometryRenderSettings )
                , "*!\n\
            \n\
                Update position and clip region on this Windows geometry  rendering\n\
                surface.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::updateSelf
        
            typedef void ( ListHeader_wrapper::*updateSelf_function_type )( float ) ;
            
            ListHeader_exposer.def( 
                "updateSelf"
                , updateSelf_function_type( &ListHeader_wrapper::default_updateSelf )
                , ( bp::arg("elapsed") )
                , "*************************************************************************\n\
                    Implementation Functions\n\
                *************************************************************************\n\
                *!\n\
                \n\
                    Perform actual update processing for this Window.\n\
            \n\
                @param elapsed\n\
                    float value indicating the number of seconds elapsed since the last\n\
                    update call.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::writeAutoChildWindowXML
        
            typedef bool ( ListHeader_wrapper::*writeAutoChildWindowXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ListHeader_exposer.def( 
                "writeAutoChildWindowXML"
                , writeAutoChildWindowXML_function_type( &ListHeader_wrapper::default_writeAutoChildWindowXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeChildWindowsXML
        
            typedef int ( ListHeader_wrapper::*writeChildWindowsXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ListHeader_exposer.def( 
                "writeChildWindowsXML"
                , writeChildWindowsXML_function_type( &ListHeader_wrapper::default_writeChildWindowsXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writePropertiesXML
        
            typedef int ( ListHeader_wrapper::*writePropertiesXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ListHeader_exposer.def( 
                "writePropertiesXML"
                , writePropertiesXML_function_type( &ListHeader_wrapper::default_writePropertiesXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeXMLToStream
        
            typedef void ( ::CEGUI::Window::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            typedef void ( ListHeader_wrapper::*default_writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ListHeader_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type(&::CEGUI::Window::writeXMLToStream)
                , default_writeXMLToStream_function_type(&ListHeader_wrapper::default_writeXMLToStream)
                , ( bp::arg("xml_stream") ) );
        
        }
    }

}
