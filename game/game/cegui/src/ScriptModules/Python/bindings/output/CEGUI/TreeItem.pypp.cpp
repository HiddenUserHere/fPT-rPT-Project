// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "TreeItem.pypp.hpp"

namespace bp = boost::python;

struct TreeItem_wrapper : CEGUI::TreeItem, bp::wrapper< CEGUI::TreeItem > {

    TreeItem_wrapper(CEGUI::TreeItem const & arg )
    : CEGUI::TreeItem( arg )
      , bp::wrapper< CEGUI::TreeItem >(){
        // copy constructor
        
    }

    TreeItem_wrapper(::CEGUI::String const & text, ::CEGUI::uint item_id=0, void * item_data=0, bool disabled=false, bool auto_delete=true )
    : CEGUI::TreeItem( boost::ref(text), item_id, item_data, disabled, auto_delete )
      , bp::wrapper< CEGUI::TreeItem >(){
        // constructor
    
    }

    ::CEGUI::Colour calculateModulatedAlphaColour( ::CEGUI::Colour col, float alpha ) const {
        return CEGUI::TreeItem::calculateModulatedAlphaColour( col, alpha );
    }

    virtual void draw( ::CEGUI::GeometryBuffer & buffer, ::CEGUI::Rectf const & targetRect, float alpha, ::CEGUI::Rectf const * clipper ) const  {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw( boost::ref(buffer), boost::ref(targetRect), alpha, boost::python::ptr(clipper) );
        else{
            this->CEGUI::TreeItem::draw( boost::ref(buffer), boost::ref(targetRect), alpha, boost::python::ptr(clipper) );
        }
    }
    
    void default_draw( ::CEGUI::GeometryBuffer & buffer, ::CEGUI::Rectf const & targetRect, float alpha, ::CEGUI::Rectf const * clipper ) const  {
        CEGUI::TreeItem::draw( boost::ref(buffer), boost::ref(targetRect), alpha, boost::python::ptr(clipper) );
    }

    ::CEGUI::ColourRect getModulateAlphaColourRect( ::CEGUI::ColourRect const & cols, float alpha ) const {
        return CEGUI::TreeItem::getModulateAlphaColourRect( boost::ref(cols), alpha );
    }

    virtual ::CEGUI::Sizef getPixelSize(  ) const  {
        if( bp::override func_getPixelSize = this->get_override( "getPixelSize" ) )
            return func_getPixelSize(  );
        else{
            return this->CEGUI::TreeItem::getPixelSize(  );
        }
    }
    
    ::CEGUI::Sizef default_getPixelSize(  ) const  {
        return CEGUI::TreeItem::getPixelSize( );
    }

    virtual bool handleFontRenderSizeChange( ::CEGUI::Font const * const font ) {
        if( bp::override func_handleFontRenderSizeChange = this->get_override( "handleFontRenderSizeChange" ) )
            return func_handleFontRenderSizeChange( font );
        else{
            return this->CEGUI::TreeItem::handleFontRenderSizeChange( font );
        }
    }
    
    bool default_handleFontRenderSizeChange( ::CEGUI::Font const * const font ) {
        return CEGUI::TreeItem::handleFontRenderSizeChange( font );
    }

    void parseTextString(  ) const {
        CEGUI::TreeItem::parseTextString(  );
    }

};

void register_TreeItem_class(){

    { //::CEGUI::TreeItem
        typedef bp::class_< TreeItem_wrapper > TreeItem_exposer_t;
        TreeItem_exposer_t TreeItem_exposer = TreeItem_exposer_t( "TreeItem", bp::init< CEGUI::String const &, bp::optional< CEGUI::uint, void *, bool, bool > >(( bp::arg("text"), bp::arg("item_id")=(::CEGUI::uint)(0), bp::arg("item_data")=bp::object(), bp::arg("disabled")=(bool)(false), bp::arg("auto_delete")=(bool)(true) ), "*************************************************************************\n\
            Construction and Destruction\n\
         *************************************************************************\n\
        *!\n\
         \n\
            base class constructor\n\
         *\n") );
        bp::scope TreeItem_scope( TreeItem_exposer );
        bp::implicitly_convertible< CEGUI::String const &, CEGUI::TreeItem >();
        { //::CEGUI::TreeItem::addItem
        
            typedef void ( ::CEGUI::TreeItem::*addItem_function_type )( ::CEGUI::TreeItem * ) ;
            
            TreeItem_exposer.def( 
                "addItem"
                , addItem_function_type( &::CEGUI::TreeItem::addItem )
                , ( bp::arg("item") ) );
        
        }
        { //::CEGUI::TreeItem::calculateModulatedAlphaColour
        
            typedef ::CEGUI::Colour ( TreeItem_wrapper::*calculateModulatedAlphaColour_function_type )( ::CEGUI::Colour,float ) const;
            
            TreeItem_exposer.def( 
                "calculateModulatedAlphaColour"
                , calculateModulatedAlphaColour_function_type( &TreeItem_wrapper::calculateModulatedAlphaColour )
                , ( bp::arg("col"), bp::arg("alpha") )
                , "*!\n\
             \n\
                 Return a colour value describing the colour specified by  col after\n\
                 having its alpha component modulated by the value  alpha.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::draw
        
            typedef void ( ::CEGUI::TreeItem::*draw_function_type )( ::CEGUI::GeometryBuffer &,::CEGUI::Rectf const &,float,::CEGUI::Rectf const * ) const;
            typedef void ( TreeItem_wrapper::*default_draw_function_type )( ::CEGUI::GeometryBuffer &,::CEGUI::Rectf const &,float,::CEGUI::Rectf const * ) const;
            
            TreeItem_exposer.def( 
                "draw"
                , draw_function_type(&::CEGUI::TreeItem::draw)
                , default_draw_function_type(&TreeItem_wrapper::default_draw)
                , ( bp::arg("buffer"), bp::arg("targetRect"), bp::arg("alpha"), bp::arg("clipper") ) );
        
        }
        { //::CEGUI::TreeItem::getButtonLocation
        
            typedef ::CEGUI::Rectf & ( ::CEGUI::TreeItem::*getButtonLocation_function_type )(  ) ;
            
            TreeItem_exposer.def( 
                "getButtonLocation"
                , getButtonLocation_function_type( &::CEGUI::TreeItem::getButtonLocation )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::TreeItem::getFont
        
            typedef ::CEGUI::Font const * ( ::CEGUI::TreeItem::*getFont_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getFont"
                , getFont_function_type( &::CEGUI::TreeItem::getFont )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*************************************************************************\n\
                Accessors\n\
             *************************************************************************\n\
            *!\n\
             \n\
                 Return a pointer to the font being used by this TreeItem\n\
                \n\
                 This method will try a number of places to find a font to be used.  If\n\
                 no font can be found, NULL is returned.\n\
             \n\
             @return\n\
                Font to be used for rendering this item\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getID
        
            typedef ::CEGUI::uint ( ::CEGUI::TreeItem::*getID_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getID"
                , getID_function_type( &::CEGUI::TreeItem::getID )
                , "*!\n\
             \n\
                Return the current ID assigned to this tree item.\n\
             \n\
                Note that the system does not make use of this value, client code can\n\
                assign any meaning it wishes to the ID.\n\
             \n\
             @return\n\
                ID code currently assigned to this tree item\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getIsOpen
        
            typedef bool ( ::CEGUI::TreeItem::*getIsOpen_function_type )(  ) ;
            
            TreeItem_exposer.def( 
                "getIsOpen"
                , getIsOpen_function_type( &::CEGUI::TreeItem::getIsOpen ) );
        
        }
        { //::CEGUI::TreeItem::getItemCount
        
            typedef ::size_t ( ::CEGUI::TreeItem::*getItemCount_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getItemCount"
                , getItemCount_function_type( &::CEGUI::TreeItem::getItemCount ) );
        
        }
        { //::CEGUI::TreeItem::getItemList
        
            typedef ::std::vector< CEGUI::TreeItem* > & ( ::CEGUI::TreeItem::*getItemList_function_type )(  ) ;
            
            TreeItem_exposer.def( 
                "getItemList"
                , getItemList_function_type( &::CEGUI::TreeItem::getItemList )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::TreeItem::getModulateAlphaColourRect
        
            typedef ::CEGUI::ColourRect ( TreeItem_wrapper::*getModulateAlphaColourRect_function_type )( ::CEGUI::ColourRect const &,float ) const;
            
            TreeItem_exposer.def( 
                "getModulateAlphaColourRect"
                , getModulateAlphaColourRect_function_type( &TreeItem_wrapper::getModulateAlphaColourRect )
                , ( bp::arg("cols"), bp::arg("alpha") )
                , "*************************************************************************\n\
                Implementation methods\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Return a ColourRect object describing the colours in  cols after\n\
                having their alpha component modulated by the value  alpha.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getOwnerWindow
        
            typedef ::CEGUI::Window const * ( ::CEGUI::TreeItem::*getOwnerWindow_function_type )(  ) ;
            
            TreeItem_exposer.def( 
                "getOwnerWindow"
                , getOwnerWindow_function_type( &::CEGUI::TreeItem::getOwnerWindow )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Get the owner window for this TreeItem.\n\
             \n\
                The owner of a TreeItem is typically set by the tree widget when an\n\
                item is added or inserted.\n\
             \n\
             @return\n\
                Ponter to the window that is considered the owner of this TreeItem.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getPixelSize
        
            typedef ::CEGUI::Sizef ( ::CEGUI::TreeItem::*getPixelSize_function_type )(  ) const;
            typedef ::CEGUI::Sizef ( TreeItem_wrapper::*default_getPixelSize_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getPixelSize"
                , getPixelSize_function_type(&::CEGUI::TreeItem::getPixelSize)
                , default_getPixelSize_function_type(&TreeItem_wrapper::default_getPixelSize) );
        
        }
        { //::CEGUI::TreeItem::getSelectionBrushImage
        
            typedef ::CEGUI::Image const * ( ::CEGUI::TreeItem::*getSelectionBrushImage_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getSelectionBrushImage"
                , getSelectionBrushImage_function_type( &::CEGUI::TreeItem::getSelectionBrushImage )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Return the current selection highlighting brush.\n\
             \n\
             @return\n\
                Pointer to the Image object currently used for selection highlighting.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getSelectionColours
        
            typedef ::CEGUI::ColourRect ( ::CEGUI::TreeItem::*getSelectionColours_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getSelectionColours"
                , getSelectionColours_function_type( &::CEGUI::TreeItem::getSelectionColours )
                , "*!\n\
             \n\
                Return the current colours used for selection highlighting.\n\
             \n\
             @return\n\
                ColourRect object describing the currently set colours.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getText
        
            typedef ::CEGUI::String const & ( ::CEGUI::TreeItem::*getText_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getText"
                , getText_function_type( &::CEGUI::TreeItem::getText )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
             \n\
                return the text string set for this tree item.\n\
             \n\
                Note that even if the item does not render text, the text string can\n\
                still be useful, since it is used for sorting tree items.\n\
             \n\
             @return\n\
                String object containing the current text for the tree item.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getTextColours
        
            typedef ::CEGUI::ColourRect ( ::CEGUI::TreeItem::*getTextColours_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getTextColours"
                , getTextColours_function_type( &::CEGUI::TreeItem::getTextColours )
                , "*!\n\
             \n\
                Return the current colours used for text rendering.\n\
             \n\
             @return\n\
                ColourRect object describing the currently set colours\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::getTextVisual
        
            typedef ::CEGUI::String const & ( ::CEGUI::TreeItem::*getTextVisual_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getTextVisual"
                , getTextVisual_function_type( &::CEGUI::TreeItem::getTextVisual )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "! return text string with  e visual ordering of glyphs.\n" );
        
        }
        { //::CEGUI::TreeItem::getTooltipText
        
            typedef ::CEGUI::String const & ( ::CEGUI::TreeItem::*getTooltipText_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getTooltipText"
                , getTooltipText_function_type( &::CEGUI::TreeItem::getTooltipText )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Return the text string currently set to be used as the tooltip text for\n\
                    this item.\n\
            \n\
                @return\n\
                    String object containing the current tooltip text as sued by this item.\n\
                *\n" );
        
        }
        { //::CEGUI::TreeItem::getTreeItemFromIndex
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::TreeItem::*getTreeItemFromIndex_function_type )( ::size_t ) ;
            
            TreeItem_exposer.def( 
                "getTreeItemFromIndex"
                , getTreeItemFromIndex_function_type( &::CEGUI::TreeItem::getTreeItemFromIndex )
                , ( bp::arg("itemIndex") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::TreeItem::getUserData
        
            typedef void * ( ::CEGUI::TreeItem::*getUserData_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "getUserData"
                , getUserData_function_type( &::CEGUI::TreeItem::getUserData )
                , bp::return_value_policy< bp::return_opaque_pointer >()
                , "*!\n\
             \n\
                Return the pointer to any client assigned user data attached to this\n\
                tree item.\n\
             \n\
                Note that the system does not make use of this data, client code can\n\
                assign any meaning it wishes to the attached data.\n\
             \n\
             @return\n\
                Pointer to the currently assigned user data.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::handleFontRenderSizeChange
        
            typedef bool ( ::CEGUI::TreeItem::*handleFontRenderSizeChange_function_type )( ::CEGUI::Font const * const ) ;
            typedef bool ( TreeItem_wrapper::*default_handleFontRenderSizeChange_function_type )( ::CEGUI::Font const * const ) ;
            
            TreeItem_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type(&::CEGUI::TreeItem::handleFontRenderSizeChange)
                , default_handleFontRenderSizeChange_function_type(&TreeItem_wrapper::default_handleFontRenderSizeChange)
                , ( bp::arg("font") ) );
        
        }
        { //::CEGUI::TreeItem::isAutoDeleted
        
            typedef bool ( ::CEGUI::TreeItem::*isAutoDeleted_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "isAutoDeleted"
                , isAutoDeleted_function_type( &::CEGUI::TreeItem::isAutoDeleted )
                , "*!\n\
             \n\
                return whether this item will be automatically deleted when it is\n\
                removed from the tree or when the the tree it is attached to is\n\
                destroyed.\n\
             \n\
             @return\n\
                 - true if the item object will be deleted by the system when it is\n\
                   removed from the tree, or when the tree it is attached to is\n\
                   destroyed.\n\
                - false if client code must destroy the item after it is removed from\n\
                  the tree.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::isDisabled
        
            typedef bool ( ::CEGUI::TreeItem::*isDisabled_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "isDisabled"
                , isDisabled_function_type( &::CEGUI::TreeItem::isDisabled )
                , "*!\n\
             \n\
                return whether this item is disabled.\n\
             \n\
             @return\n\
                - true if the item is disabled.\n\
                - false if the item is enabled.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::isSelected
        
            typedef bool ( ::CEGUI::TreeItem::*isSelected_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "isSelected"
                , isSelected_function_type( &::CEGUI::TreeItem::isSelected )
                , "*!\n\
             \n\
                return whether this item is selected.\n\
             \n\
             @return\n\
                - true if the item is selected.\n\
                - false if the item is not selected.\n\
             *\n" );
        
        }
        TreeItem_exposer.def( bp::self < bp::self );
        TreeItem_exposer.def( bp::self > bp::self );
        { //::CEGUI::TreeItem::parseTextString
        
            typedef void ( TreeItem_wrapper::*parseTextString_function_type )(  ) const;
            
            TreeItem_exposer.def( 
                "parseTextString"
                , parseTextString_function_type( &TreeItem_wrapper::parseTextString )
                , "! parse the text visual string into a RenderString representation.\n" );
        
        }
        { //::CEGUI::TreeItem::removeItem
        
            typedef void ( ::CEGUI::TreeItem::*removeItem_function_type )( ::CEGUI::TreeItem const * ) ;
            
            TreeItem_exposer.def( 
                "removeItem"
                , removeItem_function_type( &::CEGUI::TreeItem::removeItem )
                , ( bp::arg("item") ) );
        
        }
        { //::CEGUI::TreeItem::setAutoDeleted
        
            typedef void ( ::CEGUI::TreeItem::*setAutoDeleted_function_type )( bool ) ;
            
            TreeItem_exposer.def( 
                "setAutoDeleted"
                , setAutoDeleted_function_type( &::CEGUI::TreeItem::setAutoDeleted )
                , ( bp::arg("setting") )
                , "*!\n\
             \n\
                 Set whether this item will be automatically deleted when it is removed\n\
                 from the tree, or when the tree it is attached to is destroyed.\n\
             \n\
             @param setting\n\
                 - true if the item object should be deleted by the system when the it\n\
                   is removed from the tree, or when the tree it is attached to is\n\
                   destroyed.\n\
                - false if client code will destroy the item after it is removed from\n\
                  the tree.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setButtonLocation
        
            typedef void ( ::CEGUI::TreeItem::*setButtonLocation_function_type )( ::CEGUI::Rectf & ) ;
            
            TreeItem_exposer.def( 
                "setButtonLocation"
                , setButtonLocation_function_type( &::CEGUI::TreeItem::setButtonLocation )
                , ( bp::arg("buttonOffset") )
                , "*!\n\
             \n\
                Tell the treeItem where its button is located.\n\
                Calculated and set in Tree.cpp.\n\
             \n\
             @param buttonOffset\n\
                Location of the button in screenspace.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setDisabled
        
            typedef void ( ::CEGUI::TreeItem::*setDisabled_function_type )( bool ) ;
            
            TreeItem_exposer.def( 
                "setDisabled"
                , setDisabled_function_type( &::CEGUI::TreeItem::setDisabled )
                , ( bp::arg("setting") )
                , "*!\n\
             \n\
                Set the disabled state for the item.\n\
             \n\
             @param setting\n\
                - true if the item should be disabled.\n\
                - false if the item should be enabled.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setFont
        
            typedef void ( ::CEGUI::TreeItem::*setFont_function_type )( ::CEGUI::Font const * ) ;
            
            TreeItem_exposer.def( 
                "setFont"
                , setFont_function_type( &::CEGUI::TreeItem::setFont )
                , ( bp::arg("font") )
                , "*************************************************************************\n\
                Manipulator methods\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Set the font to be used by this TreeItem\n\
             \n\
             @param font\n\
                Font to be used for rendering this item\n\
             \n\
             @return\n\
                Nothing\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setFont
        
            typedef void ( ::CEGUI::TreeItem::*setFont_function_type )( ::CEGUI::String const & ) ;
            
            TreeItem_exposer.def( 
                "setFont"
                , setFont_function_type( &::CEGUI::TreeItem::setFont )
                , ( bp::arg("font_name") )
                , "*!\n\
             \n\
                Set the font to be used by this TreeItem\n\
             \n\
             @param font_name\n\
                String object containing the name of the Font to be used for rendering\n\
                this item\n\
             \n\
             @return\n\
                Nothing\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setID
        
            typedef void ( ::CEGUI::TreeItem::*setID_function_type )( ::CEGUI::uint ) ;
            
            TreeItem_exposer.def( 
                "setID"
                , setID_function_type( &::CEGUI::TreeItem::setID )
                , ( bp::arg("item_id") )
                , "*!\n\
             \n\
                Set the ID assigned to this tree item.\n\
             \n\
                Note that the system does not make use of this value, client code can\n\
                assign any meaning it wishes to the ID.\n\
             \n\
             @param item_id\n\
                ID code to be assigned to this tree item\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setIcon
        
            typedef void ( ::CEGUI::TreeItem::*setIcon_function_type )( ::CEGUI::Image const & ) ;
            
            TreeItem_exposer.def( 
                "setIcon"
                , setIcon_function_type( &::CEGUI::TreeItem::setIcon )
                , ( bp::arg("theIcon") ) );
        
        }
        { //::CEGUI::TreeItem::setOwnerWindow
        
            typedef void ( ::CEGUI::TreeItem::*setOwnerWindow_function_type )( ::CEGUI::Window const * ) ;
            
            TreeItem_exposer.def( 
                "setOwnerWindow"
                , setOwnerWindow_function_type( &::CEGUI::TreeItem::setOwnerWindow )
                , ( bp::arg("owner") )
                , "*!\n\
             \n\
                 Set the owner window for this TreeItem.  This is called by the tree\n\
                 widget when an item is added or inserted.\n\
             \n\
             @param owner\n\
                Ponter to the window that should be considered the owner of this\n\
                TreeItem.\n\
             \n\
             @return\n\
                Nothing\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setSelected
        
            typedef void ( ::CEGUI::TreeItem::*setSelected_function_type )( bool ) ;
            
            TreeItem_exposer.def( 
                "setSelected"
                , setSelected_function_type( &::CEGUI::TreeItem::setSelected )
                , ( bp::arg("setting") )
                , "*!\n\
                 \n\
                    Set the selected state for the item.\n\
                 \n\
                 @param setting\n\
                    - true if the item is selected.\n\
                    - false if the item is not selected.\n\
            \n\
                 @return\n\
                    Nothing.\n\
                 *\n" );
        
        }
        { //::CEGUI::TreeItem::setSelectionBrushImage
        
            typedef void ( ::CEGUI::TreeItem::*setSelectionBrushImage_function_type )( ::CEGUI::Image const * ) ;
            
            TreeItem_exposer.def( 
                "setSelectionBrushImage"
                , setSelectionBrushImage_function_type( &::CEGUI::TreeItem::setSelectionBrushImage )
                , ( bp::arg("image") )
                , "*!\n\
             \n\
                Set the selection highlighting brush image.\n\
             \n\
             @param image\n\
                Pointer to the Image object to be used for selection highlighting.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setSelectionBrushImage
        
            typedef void ( ::CEGUI::TreeItem::*setSelectionBrushImage_function_type )( ::CEGUI::String const & ) ;
            
            TreeItem_exposer.def( 
                "setSelectionBrushImage"
                , setSelectionBrushImage_function_type( &::CEGUI::TreeItem::setSelectionBrushImage )
                , ( bp::arg("name") )
                , "*!\n\
             \n\
                Set the selection highlighting brush image.\n\
             \n\
             @param name\n\
                Name of the image to be used.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setSelectionColours
        
            typedef void ( ::CEGUI::TreeItem::*setSelectionColours_function_type )( ::CEGUI::ColourRect const & ) ;
            
            TreeItem_exposer.def( 
                "setSelectionColours"
                , setSelectionColours_function_type( &::CEGUI::TreeItem::setSelectionColours )
                , ( bp::arg("cols") )
                , "*!\n\
             \n\
                Set the colours used for selection highlighting.\n\
             \n\
             @param cols\n\
                ColourRect object describing the colours to be used.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setSelectionColours
        
            typedef void ( ::CEGUI::TreeItem::*setSelectionColours_function_type )( ::CEGUI::Colour,::CEGUI::Colour,::CEGUI::Colour,::CEGUI::Colour ) ;
            
            TreeItem_exposer.def( 
                "setSelectionColours"
                , setSelectionColours_function_type( &::CEGUI::TreeItem::setSelectionColours )
                , ( bp::arg("top_left_colour"), bp::arg("top_right_colour"), bp::arg("bottom_left_colour"), bp::arg("bottom_right_colour") ) );
        
        }
        { //::CEGUI::TreeItem::setSelectionColours
        
            typedef void ( ::CEGUI::TreeItem::*setSelectionColours_function_type )( ::CEGUI::Colour ) ;
            
            TreeItem_exposer.def( 
                "setSelectionColours"
                , setSelectionColours_function_type( &::CEGUI::TreeItem::setSelectionColours )
                , ( bp::arg("col") )
                , "*!\n\
             \n\
                Set the colours used for selection highlighting.\n\
             \n\
             @param col\n\
                colour value to be used when rendering.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setText
        
            typedef void ( ::CEGUI::TreeItem::*setText_function_type )( ::CEGUI::String const & ) ;
            
            TreeItem_exposer.def( 
                "setText"
                , setText_function_type( &::CEGUI::TreeItem::setText )
                , ( bp::arg("text") )
                , "*************************************************************************\n\
                Manipulators\n\
             *************************************************************************\n\
            *!\n\
             \n\
                set the text string for this tree item.\n\
             \n\
                Note that even if the item does not render text, the text string can\n\
                still be useful, since it is used for sorting tree items.\n\
             \n\
             @param text\n\
                String object containing the text to set for the tree item.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setTextColours
        
            typedef void ( ::CEGUI::TreeItem::*setTextColours_function_type )( ::CEGUI::ColourRect const & ) ;
            
            TreeItem_exposer.def( 
                "setTextColours"
                , setTextColours_function_type( &::CEGUI::TreeItem::setTextColours )
                , ( bp::arg("cols") )
                , "*!\n\
             \n\
                Set the colours used for text rendering.\n\
             \n\
             @param cols\n\
                ColourRect object describing the colours to be used.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setTextColours
        
            typedef void ( ::CEGUI::TreeItem::*setTextColours_function_type )( ::CEGUI::Colour,::CEGUI::Colour,::CEGUI::Colour,::CEGUI::Colour ) ;
            
            TreeItem_exposer.def( 
                "setTextColours"
                , setTextColours_function_type( &::CEGUI::TreeItem::setTextColours )
                , ( bp::arg("top_left_colour"), bp::arg("top_right_colour"), bp::arg("bottom_left_colour"), bp::arg("bottom_right_colour") )
                , "*!\n\
             \n\
                Set the colours used for text rendering.\n\
             \n\
             @param top_left_colour\n\
                Colour (as ARGB value) to be applied to the top-left corner of each text\n\
                glyph rendered.\n\
             \n\
             @param top_right_colour\n\
                Colour (as ARGB value) to be applied to the top-right corner of each\n\
                text glyph rendered.\n\
             \n\
             @param bottom_left_colour\n\
                Colour (as ARGB value) to be applied to the bottom-left corner of each\n\
                text glyph rendered.\n\
             \n\
             @param bottom_right_colour\n\
                Colour (as ARGB value) to be applied to the bottom-right corner of each\n\
                text glyph rendered.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setTextColours
        
            typedef void ( ::CEGUI::TreeItem::*setTextColours_function_type )( ::CEGUI::Colour ) ;
            
            TreeItem_exposer.def( 
                "setTextColours"
                , setTextColours_function_type( &::CEGUI::TreeItem::setTextColours )
                , ( bp::arg("col") )
                , "*!\n\
             \n\
                Set the colours used for text rendering.\n\
             \n\
             @param col\n\
                colour value to be used when rendering.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::setTooltipText
        
            typedef void ( ::CEGUI::TreeItem::*setTooltipText_function_type )( ::CEGUI::String const & ) ;
            
            TreeItem_exposer.def( 
                "setTooltipText"
                , setTooltipText_function_type( &::CEGUI::TreeItem::setTooltipText )
                , ( bp::arg("text") )
                , "*!\n\
                \n\
                    Set the tooltip text to be used for this item.\n\
            \n\
                @param text\n\
                    String object holding the text to be used in the tooltip displayed for\n\
                    this item.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::TreeItem::setUserData
        
            typedef void ( ::CEGUI::TreeItem::*setUserData_function_type )( void * ) ;
            
            TreeItem_exposer.def( 
                "setUserData"
                , setUserData_function_type( &::CEGUI::TreeItem::setUserData )
                , ( bp::arg("item_data") )
                , "*!\n\
             \n\
                 Set the client assigned user data attached to this lis box item.\n\
                \n\
                 Note that the system does not make use of this data, client code can\n\
                 assign any meaning it wishes to the attached data.\n\
             \n\
             @param item_data\n\
                Pointer to the user data to attach to this tree item.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::TreeItem::toggleIsOpen
        
            typedef void ( ::CEGUI::TreeItem::*toggleIsOpen_function_type )(  ) ;
            
            TreeItem_exposer.def( 
                "toggleIsOpen"
                , toggleIsOpen_function_type( &::CEGUI::TreeItem::toggleIsOpen ) );
        
        }
        TreeItem_exposer.def_readonly( "DefaultSelectionColour", CEGUI::TreeItem::DefaultSelectionColour, "*************************************************************************\n\
            Constants\n\
         *************************************************************************\n\
        ! Default text colour.\n\
        ! Default selection brush colour.\n" );
        TreeItem_exposer.def_readonly( "DefaultTextColour", CEGUI::TreeItem::DefaultTextColour, "*************************************************************************\n\
            Constants\n\
         *************************************************************************\n\
        ! Default text colour.\n" );
    }

}
