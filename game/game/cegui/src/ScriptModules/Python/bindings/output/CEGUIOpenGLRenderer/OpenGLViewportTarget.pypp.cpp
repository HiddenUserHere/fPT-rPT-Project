// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUIOpenGLRenderer.h"
#include "OpenGLViewportTarget.pypp.hpp"

namespace bp = boost::python;

struct OpenGLViewportTarget_wrapper : CEGUI::OpenGLViewportTarget, bp::wrapper< CEGUI::OpenGLViewportTarget > {

    OpenGLViewportTarget_wrapper(::CEGUI::OpenGLRendererBase & owner )
    : CEGUI::OpenGLViewportTarget( boost::ref(owner) )
      , bp::wrapper< CEGUI::OpenGLViewportTarget >(){
        // constructor
    
    }

    OpenGLViewportTarget_wrapper(::CEGUI::OpenGLRendererBase & owner, ::CEGUI::Rectf const & area )
    : CEGUI::OpenGLViewportTarget( boost::ref(owner), boost::ref(area) )
      , bp::wrapper< CEGUI::OpenGLViewportTarget >(){
        // constructor
    
    }

    virtual bool isImageryCache(  ) const  {
        if( bp::override func_isImageryCache = this->get_override( "isImageryCache" ) )
            return func_isImageryCache(  );
        else{
            return this->CEGUI::OpenGLViewportTarget::isImageryCache(  );
        }
    }
    
    bool default_isImageryCache(  ) const  {
        return CEGUI::OpenGLViewportTarget::isImageryCache( );
    }

};

void register_OpenGLViewportTarget_class(){

    { //::CEGUI::OpenGLViewportTarget
        typedef bp::class_< OpenGLViewportTarget_wrapper, boost::noncopyable > OpenGLViewportTarget_exposer_t;
        OpenGLViewportTarget_exposer_t OpenGLViewportTarget_exposer = OpenGLViewportTarget_exposer_t( "OpenGLViewportTarget", "*!\n\
        \n\
            OpenGL implementation of a RenderTarget that represents am on-scren\n\
            viewport.\n\
        *\n", bp::init< CEGUI::OpenGLRendererBase & >(( bp::arg("owner") ), "*!\n\
        \n\
            Construct a default OpenGLViewportTarget that uses the currently\n\
            defined OpenGL viewport as it's initial area.\n\
        *\n") );
        bp::scope OpenGLViewportTarget_scope( OpenGLViewportTarget_exposer );
        bp::implicitly_convertible< CEGUI::OpenGLRendererBase &, CEGUI::OpenGLViewportTarget >();
        OpenGLViewportTarget_exposer.def( bp::init< CEGUI::OpenGLRendererBase &, CEGUI::Rectf const & >(( bp::arg("owner"), bp::arg("area") ), "*!\n\
            \n\
                Construct a OpenGLViewportTarget that uses the specified Rect as it's\n\
                initial area.\n\
        \n\
            @param area\n\
                Rect object describing the initial viewport area that should be used for\n\
                the RenderTarget.\n\
            *\n") );
        { //::CEGUI::OpenGLViewportTarget::isImageryCache
        
            typedef bool ( ::CEGUI::OpenGLViewportTarget::*isImageryCache_function_type )(  ) const;
            typedef bool ( OpenGLViewportTarget_wrapper::*default_isImageryCache_function_type )(  ) const;
            
            OpenGLViewportTarget_exposer.def( 
                "isImageryCache"
                , isImageryCache_function_type(&::CEGUI::OpenGLViewportTarget::isImageryCache)
                , default_isImageryCache_function_type(&OpenGLViewportTarget_wrapper::default_isImageryCache) );
        
        }
    }

}
