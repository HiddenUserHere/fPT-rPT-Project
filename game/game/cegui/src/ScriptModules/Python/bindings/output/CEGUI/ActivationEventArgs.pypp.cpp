// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "ActivationEventArgs.pypp.hpp"

namespace bp = boost::python;

struct ActivationEventArgs_wrapper : CEGUI::ActivationEventArgs, bp::wrapper< CEGUI::ActivationEventArgs > {

    ActivationEventArgs_wrapper(CEGUI::ActivationEventArgs const & arg )
    : CEGUI::ActivationEventArgs( arg )
      , bp::wrapper< CEGUI::ActivationEventArgs >(){
        // copy constructor
        
    }

    ActivationEventArgs_wrapper(::CEGUI::Window * wnd )
    : CEGUI::ActivationEventArgs( boost::python::ptr(wnd) )
      , bp::wrapper< CEGUI::ActivationEventArgs >(){
        // constructor
    
    }

    static ::CEGUI::Window * get_otherWindow(CEGUI::ActivationEventArgs const & inst ){
        return inst.otherWindow;
    }
    
    static void set_otherWindow( CEGUI::ActivationEventArgs & inst, ::CEGUI::Window * new_value ){ 
        inst.otherWindow = new_value;
    }

};

void register_ActivationEventArgs_class(){

    { //::CEGUI::ActivationEventArgs
        typedef bp::class_< ActivationEventArgs_wrapper, bp::bases< CEGUI::WindowEventArgs > > ActivationEventArgs_exposer_t;
        ActivationEventArgs_exposer_t ActivationEventArgs_exposer = ActivationEventArgs_exposer_t( "ActivationEventArgs", "*!\n\
        \n\
           EventArgs based class that is used for Activated and Deactivated window events\n\
        *\n", bp::init< CEGUI::Window * >(( bp::arg("wnd") )) );
        bp::scope ActivationEventArgs_scope( ActivationEventArgs_exposer );
        bp::implicitly_convertible< CEGUI::Window *, CEGUI::ActivationEventArgs >();
        ActivationEventArgs_exposer.add_property( "otherWindow"
                    , bp::make_function( (::CEGUI::Window * (*)( ::CEGUI::ActivationEventArgs const & ))(&ActivationEventArgs_wrapper::get_otherWindow), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CEGUI::ActivationEventArgs &,::CEGUI::Window * ))(&ActivationEventArgs_wrapper::set_otherWindow), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
    }

}
