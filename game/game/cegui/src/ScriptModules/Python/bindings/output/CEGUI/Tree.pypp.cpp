// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "Tree.pypp.hpp"

namespace bp = boost::python;

struct Tree_wrapper : CEGUI::Tree, bp::wrapper< CEGUI::Tree > {

    Tree_wrapper(::CEGUI::String const & type, ::CEGUI::String const & name )
    : CEGUI::Tree( boost::ref(type), boost::ref(name) )
      , bp::wrapper< CEGUI::Tree >(){
        // constructor
    
    }

    void addTreeEvents(  ){
        CEGUI::Tree::addTreeEvents(  );
    }

    virtual void cacheTreeBaseImagery(  ){
        if( bp::override func_cacheTreeBaseImagery = this->get_override( "cacheTreeBaseImagery" ) )
            func_cacheTreeBaseImagery(  );
        else{
            this->CEGUI::Tree::cacheTreeBaseImagery(  );
        }
    }
    
    virtual void default_cacheTreeBaseImagery(  ){
        CEGUI::Tree::cacheTreeBaseImagery( );
    }

    bool clearAllSelections_impl(  ){
        return CEGUI::Tree::clearAllSelections_impl(  );
    }

    void configureScrollbars(  ){
        CEGUI::Tree::configureScrollbars(  );
    }

    bool containsOpenItemRecursive( ::std::vector< CEGUI::TreeItem* > const & itemList, ::CEGUI::TreeItem * item ){
        return CEGUI::Tree::containsOpenItemRecursive( boost::ref(itemList), boost::python::ptr(item) );
    }

    virtual ::CEGUI::Scrollbar * createHorzScrollbar( ::CEGUI::String const & name ) const {
        if( bp::override func_createHorzScrollbar = this->get_override( "createHorzScrollbar" ) )
            return func_createHorzScrollbar( boost::ref(name) );
        else{
            return this->CEGUI::Tree::createHorzScrollbar( boost::ref(name) );
        }
    }
    
    virtual ::CEGUI::Scrollbar * default_createHorzScrollbar( ::CEGUI::String const & name ) const {
        return CEGUI::Tree::createHorzScrollbar( boost::ref(name) );
    }

    virtual ::CEGUI::Scrollbar * createVertScrollbar( ::CEGUI::String const & name ) const {
        if( bp::override func_createVertScrollbar = this->get_override( "createVertScrollbar" ) )
            return func_createVertScrollbar( boost::ref(name) );
        else{
            return this->CEGUI::Tree::createVertScrollbar( boost::ref(name) );
        }
    }
    
    virtual ::CEGUI::Scrollbar * default_createVertScrollbar( ::CEGUI::String const & name ) const {
        return CEGUI::Tree::createVertScrollbar( boost::ref(name) );
    }

    void drawItemList( ::std::vector< CEGUI::TreeItem* > & itemList, ::CEGUI::Rectf & itemsArea, float widest, ::CEGUI::Vector2f & itemPos, ::CEGUI::GeometryBuffer & geometry, float alpha ){
        CEGUI::Tree::drawItemList( boost::ref(itemList), boost::ref(itemsArea), widest, boost::ref(itemPos), boost::ref(geometry), alpha );
    }

    bool getHeightToItemInList( ::std::vector< CEGUI::TreeItem* > const & itemList, ::CEGUI::TreeItem const * treeItem, int itemDepth, float * height ) const {
        return CEGUI::Tree::getHeightToItemInList( boost::ref(itemList), boost::python::ptr(treeItem), itemDepth, height );
    }

    ::CEGUI::TreeItem * getItemAtPoint( ::CEGUI::Vector2f const & pt ) const {
        return CEGUI::Tree::getItemAtPoint( boost::ref(pt) );
    }

    ::CEGUI::TreeItem * getItemFromListAtPoint( ::std::vector< CEGUI::TreeItem* > const & itemList, float * bottomY, ::CEGUI::Vector2f const & pt ) const {
        return CEGUI::Tree::getItemFromListAtPoint( boost::ref(itemList), bottomY, boost::ref(pt) );
    }

    float getTotalItemsHeight(  ) const {
        return CEGUI::Tree::getTotalItemsHeight(  );
    }

    void getTotalItemsInListHeight( ::std::vector< CEGUI::TreeItem* > const & itemList, float * heightSum ) const {
        CEGUI::Tree::getTotalItemsInListHeight( boost::ref(itemList), heightSum );
    }

    virtual ::CEGUI::Rectf getTreeRenderArea(  ) const {
        if( bp::override func_getTreeRenderArea = this->get_override( "getTreeRenderArea" ) )
            return func_getTreeRenderArea(  );
        else{
            return this->CEGUI::Tree::getTreeRenderArea(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getTreeRenderArea(  ) const {
        return CEGUI::Tree::getTreeRenderArea( );
    }

    float getWidestItemWidth(  ) const {
        return CEGUI::Tree::getWidestItemWidth(  );
    }

    void getWidestItemWidthInList( ::std::vector< CEGUI::TreeItem* > const & itemList, int itemDepth, float * widest ) const {
        CEGUI::Tree::getWidestItemWidthInList( boost::ref(itemList), itemDepth, widest );
    }

    virtual bool handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        if( bp::override func_handleFontRenderSizeChange = this->get_override( "handleFontRenderSizeChange" ) )
            return func_handleFontRenderSizeChange( boost::ref(args) );
        else{
            return this->CEGUI::Tree::handleFontRenderSizeChange( boost::ref(args) );
        }
    }
    
    virtual bool default_handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        return CEGUI::Tree::handleFontRenderSizeChange( boost::ref(args) );
    }

    bool handle_scrollChange( ::CEGUI::EventArgs const & args ){
        return CEGUI::Tree::handle_scrollChange( boost::ref(args) );
    }

    virtual void initialise(  ) {
        if( bp::override func_initialise = this->get_override( "initialise" ) )
            func_initialise(  );
        else{
            this->CEGUI::Tree::initialise(  );
        }
    }
    
    void default_initialise(  ) {
        CEGUI::Tree::initialise( );
    }

    virtual void onBranchClosed( ::CEGUI::TreeEventArgs & e ){
        if( bp::override func_onBranchClosed = this->get_override( "onBranchClosed" ) )
            func_onBranchClosed( boost::ref(e) );
        else{
            this->CEGUI::Tree::onBranchClosed( boost::ref(e) );
        }
    }
    
    virtual void default_onBranchClosed( ::CEGUI::TreeEventArgs & e ){
        CEGUI::Tree::onBranchClosed( boost::ref(e) );
    }

    virtual void onBranchOpened( ::CEGUI::TreeEventArgs & e ){
        if( bp::override func_onBranchOpened = this->get_override( "onBranchOpened" ) )
            func_onBranchOpened( boost::ref(e) );
        else{
            this->CEGUI::Tree::onBranchOpened( boost::ref(e) );
        }
    }
    
    virtual void default_onBranchOpened( ::CEGUI::TreeEventArgs & e ){
        CEGUI::Tree::onBranchOpened( boost::ref(e) );
    }

    virtual void onHorzScrollbarModeChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onHorzScrollbarModeChanged = this->get_override( "onHorzScrollbarModeChanged" ) )
            func_onHorzScrollbarModeChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onHorzScrollbarModeChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onHorzScrollbarModeChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Tree::onHorzScrollbarModeChanged( boost::ref(e) );
    }

    virtual void onListContentsChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onListContentsChanged = this->get_override( "onListContentsChanged" ) )
            func_onListContentsChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onListContentsChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onListContentsChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Tree::onListContentsChanged( boost::ref(e) );
    }

    virtual void onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonDown = this->get_override( "onMouseButtonDown" ) )
            func_onMouseButtonDown( boost::ref(e) );
        else{
            this->CEGUI::Tree::onMouseButtonDown( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Tree::onMouseButtonDown( boost::ref(e) );
    }

    virtual void onMouseMove( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseMove = this->get_override( "onMouseMove" ) )
            func_onMouseMove( boost::ref(e) );
        else{
            this->CEGUI::Tree::onMouseMove( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseMove( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Tree::onMouseMove( boost::ref(e) );
    }

    virtual void onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseWheel = this->get_override( "onMouseWheel" ) )
            func_onMouseWheel( boost::ref(e) );
        else{
            this->CEGUI::Tree::onMouseWheel( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Tree::onMouseWheel( boost::ref(e) );
    }

    virtual void onMultiselectModeChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMultiselectModeChanged = this->get_override( "onMultiselectModeChanged" ) )
            func_onMultiselectModeChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onMultiselectModeChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMultiselectModeChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Tree::onMultiselectModeChanged( boost::ref(e) );
    }

    virtual void onSelectionChanged( ::CEGUI::TreeEventArgs & e ){
        if( bp::override func_onSelectionChanged = this->get_override( "onSelectionChanged" ) )
            func_onSelectionChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onSelectionChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSelectionChanged( ::CEGUI::TreeEventArgs & e ){
        CEGUI::Tree::onSelectionChanged( boost::ref(e) );
    }

    virtual void onSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onSized = this->get_override( "onSized" ) )
            func_onSized( boost::ref(e) );
        else{
            this->CEGUI::Tree::onSized( boost::ref(e) );
        }
    }
    
    virtual void default_onSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Tree::onSized( boost::ref(e) );
    }

    virtual void onSortModeChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onSortModeChanged = this->get_override( "onSortModeChanged" ) )
            func_onSortModeChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onSortModeChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onSortModeChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Tree::onSortModeChanged( boost::ref(e) );
    }

    virtual void onVertScrollbarModeChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onVertScrollbarModeChanged = this->get_override( "onVertScrollbarModeChanged" ) )
            func_onVertScrollbarModeChanged( boost::ref(e) );
        else{
            this->CEGUI::Tree::onVertScrollbarModeChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onVertScrollbarModeChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Tree::onVertScrollbarModeChanged( boost::ref(e) );
    }

    virtual void populateGeometryBuffer(  ){
        if( bp::override func_populateGeometryBuffer = this->get_override( "populateGeometryBuffer" ) )
            func_populateGeometryBuffer(  );
        else{
            this->CEGUI::Tree::populateGeometryBuffer(  );
        }
    }
    
    virtual void default_populateGeometryBuffer(  ){
        CEGUI::Tree::populateGeometryBuffer( );
    }

    bool resetList_impl(  ){
        return CEGUI::Tree::resetList_impl(  );
    }

    void selectRange( ::size_t start, ::size_t end ){
        CEGUI::Tree::selectRange( start, end );
    }

    virtual void setLookNFeel( ::CEGUI::String const & look ) {
        if( bp::override func_setLookNFeel = this->get_override( "setLookNFeel" ) )
            func_setLookNFeel( boost::ref(look) );
        else{
            this->CEGUI::Tree::setLookNFeel( boost::ref(look) );
        }
    }
    
    void default_setLookNFeel( ::CEGUI::String const & look ) {
        CEGUI::Tree::setLookNFeel( boost::ref(look) );
    }

    virtual void addChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_addChild_impl = this->get_override( "addChild_impl" ) )
            func_addChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::addChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_addChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::addChild_impl( boost::python::ptr(element) );
    }

    void addElementProperties(  ){
        CEGUI::Element::addElementProperties(  );
    }

    void addNamedElementProperties(  ){
        CEGUI::NamedElement::addNamedElementProperties(  );
    }

    void addWindowProperties(  ){
        CEGUI::Window::addWindowProperties(  );
    }

    void addWindowToDrawList( ::CEGUI::Window & wnd, bool at_back=false ){
        CEGUI::Window::addWindowToDrawList( boost::ref(wnd), at_back );
    }

    void allocateRenderingWindow(  ){
        CEGUI::Window::allocateRenderingWindow(  );
    }

    virtual void banPropertiesForAutoWindow(  ){
        if( bp::override func_banPropertiesForAutoWindow = this->get_override( "banPropertiesForAutoWindow" ) )
            func_banPropertiesForAutoWindow(  );
        else{
            this->CEGUI::Window::banPropertiesForAutoWindow(  );
        }
    }
    
    virtual void default_banPropertiesForAutoWindow(  ){
        CEGUI::Window::banPropertiesForAutoWindow( );
    }

    virtual void beginInitialisation(  ) {
        if( bp::override func_beginInitialisation = this->get_override( "beginInitialisation" ) )
            func_beginInitialisation(  );
        else{
            this->CEGUI::Window::beginInitialisation(  );
        }
    }
    
    void default_beginInitialisation(  ) {
        CEGUI::Window::beginInitialisation( );
    }

    void bufferGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::bufferGeometry( boost::ref(ctx) );
    }

    virtual void cleanupChildren(  ){
        if( bp::override func_cleanupChildren = this->get_override( "cleanupChildren" ) )
            func_cleanupChildren(  );
        else{
            this->CEGUI::Window::cleanupChildren(  );
        }
    }
    
    virtual void default_cleanupChildren(  ){
        CEGUI::Window::cleanupChildren( );
    }

    virtual void cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_cloneChildWidgetsTo = this->get_override( "cloneChildWidgetsTo" ) )
            func_cloneChildWidgetsTo( boost::ref(target) );
        else{
            this->CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
        }
    }
    
    void default_cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
    }

    virtual void clonePropertiesTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_clonePropertiesTo = this->get_override( "clonePropertiesTo" ) )
            func_clonePropertiesTo( boost::ref(target) );
        else{
            this->CEGUI::Window::clonePropertiesTo( boost::ref(target) );
        }
    }
    
    void default_clonePropertiesTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::clonePropertiesTo( boost::ref(target) );
    }

    virtual void destroy(  ) {
        if( bp::override func_destroy = this->get_override( "destroy" ) )
            func_destroy(  );
        else{
            this->CEGUI::Window::destroy(  );
        }
    }
    
    void default_destroy(  ) {
        CEGUI::Window::destroy( );
    }

    virtual void drawSelf( ::CEGUI::RenderingContext const & ctx ){
        if( bp::override func_drawSelf = this->get_override( "drawSelf" ) )
            func_drawSelf( boost::ref(ctx) );
        else{
            this->CEGUI::Window::drawSelf( boost::ref(ctx) );
        }
    }
    
    virtual void default_drawSelf( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::drawSelf( boost::ref(ctx) );
    }

    virtual void endInitialisation(  ) {
        if( bp::override func_endInitialisation = this->get_override( "endInitialisation" ) )
            func_endInitialisation(  );
        else{
            this->CEGUI::Window::endInitialisation(  );
        }
    }
    
    void default_endInitialisation(  ) {
        CEGUI::Window::endInitialisation( );
    }

    void fireAreaChangeEvents( bool const moved, bool const sized ){
        CEGUI::Element::fireAreaChangeEvents( moved, sized );
    }

    virtual void fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        if( bp::override func_fireEvent = this->get_override( "fireEvent" ) )
            func_fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        else{
            this->CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        }
    }
    
    void default_fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
    }

    void fireEvent_impl( ::CEGUI::String const & name, ::CEGUI::EventArgs & args ){
        CEGUI::EventSet::fireEvent_impl( boost::ref(name), boost::ref(args) );
    }

    void generateAutoRepeatEvent( ::CEGUI::MouseButton button ){
        CEGUI::Window::generateAutoRepeatEvent( button );
    }

    virtual ::CEGUI::NamedElement * getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        if( bp::override func_getChildByNamePath_impl = this->get_override( "getChildByNamePath_impl" ) )
            return func_getChildByNamePath_impl( boost::ref(name_path) );
        else{
            return this->CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        return CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
    }

    virtual ::CEGUI::NamedElement * getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        if( bp::override func_getChildByNameRecursive_impl = this->get_override( "getChildByNameRecursive_impl" ) )
            return func_getChildByNameRecursive_impl( boost::ref(name) );
        else{
            return this->CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        return CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
    }

    virtual ::CEGUI::Rectf getHitTestRect_impl(  ) const {
        if( bp::override func_getHitTestRect_impl = this->get_override( "getHitTestRect_impl" ) )
            return func_getHitTestRect_impl(  );
        else{
            return this->CEGUI::Window::getHitTestRect_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getHitTestRect_impl(  ) const {
        return CEGUI::Window::getHitTestRect_impl( );
    }

    virtual ::CEGUI::Rectf getInnerRectClipper_impl(  ) const {
        if( bp::override func_getInnerRectClipper_impl = this->get_override( "getInnerRectClipper_impl" ) )
            return func_getInnerRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getInnerRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getInnerRectClipper_impl(  ) const {
        return CEGUI::Window::getInnerRectClipper_impl( );
    }

    virtual ::CEGUI::Rectf getOuterRectClipper_impl(  ) const {
        if( bp::override func_getOuterRectClipper_impl = this->get_override( "getOuterRectClipper_impl" ) )
            return func_getOuterRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getOuterRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getOuterRectClipper_impl(  ) const {
        return CEGUI::Window::getOuterRectClipper_impl( );
    }

    ::CEGUI::Rectf getParentElementClipIntersection( ::CEGUI::Rectf const & unclipped_area ) const {
        return CEGUI::Window::getParentElementClipIntersection( boost::ref(unclipped_area) );
    }

    virtual void getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        if( bp::override func_getRenderingContext_impl = this->get_override( "getRenderingContext_impl" ) )
            func_getRenderingContext_impl( boost::ref(ctx) );
        else{
            this->CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
        }
    }
    
    void default_getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
    }

    ::CEGUI::ScriptModule * getScriptModule(  ) const {
        return CEGUI::EventSet::getScriptModule(  );
    }

    virtual ::CEGUI::Rectf getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedInnerRect_impl = this->get_override( "getUnclippedInnerRect_impl" ) )
            return func_getUnclippedInnerRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
    }

    virtual ::CEGUI::Rectf getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedOuterRect_impl = this->get_override( "getUnclippedOuterRect_impl" ) )
            return func_getUnclippedOuterRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
    }

    ::CEGUI::Window const * getWindowAttachedToCommonAncestor( ::CEGUI::Window const & wnd ) const {
        return CEGUI::Window::getWindowAttachedToCommonAncestor( boost::ref(wnd) );
    }

    void initialiseClippers( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::initialiseClippers( boost::ref(ctx) );
    }

    virtual void initialiseComponents(  ) {
        if( bp::override func_initialiseComponents = this->get_override( "initialiseComponents" ) )
            func_initialiseComponents(  );
        else{
            this->CEGUI::Window::initialiseComponents(  );
        }
    }
    
    void default_initialiseComponents(  ) {
        CEGUI::Window::initialiseComponents( );
    }

    void invalidate_impl( bool const recursive ){
        CEGUI::Window::invalidate_impl( recursive );
    }

    virtual bool isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        if( bp::override func_isHit = this->get_override( "isHit" ) )
            return func_isHit( boost::ref(position), allow_disabled );
        else{
            return this->CEGUI::Window::isHit( boost::ref(position), allow_disabled );
        }
    }
    
    bool default_isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        return CEGUI::Window::isHit( boost::ref(position), allow_disabled );
    }

    bool isHitTargetWindow( ::CEGUI::Vector2f const & position, bool allow_disabled ) const {
        return CEGUI::Window::isHitTargetWindow( boost::ref(position), allow_disabled );
    }

    bool isInnerRectSizeChanged(  ) const {
        return CEGUI::Element::isInnerRectSizeChanged(  );
    }

    bool isPropertyAtDefault( ::CEGUI::Property const * property ) const {
        return CEGUI::Window::isPropertyAtDefault( boost::python::ptr(property) );
    }

    bool isTopOfZOrder(  ) const {
        return CEGUI::Window::isTopOfZOrder(  );
    }

    void layoutLookNFeelChildWidgets(  ){
        CEGUI::Window::layoutLookNFeelChildWidgets(  );
    }

    void markCachedWindowRectsInvalid(  ){
        CEGUI::Window::markCachedWindowRectsInvalid(  );
    }

    virtual bool moveToFront_impl( bool wasClicked ){
        if( bp::override func_moveToFront_impl = this->get_override( "moveToFront_impl" ) )
            return func_moveToFront_impl( wasClicked );
        else{
            return this->CEGUI::Window::moveToFront_impl( wasClicked );
        }
    }
    
    virtual bool default_moveToFront_impl( bool wasClicked ){
        return CEGUI::Window::moveToFront_impl( wasClicked );
    }

    void notifyChildrenOfSizeChange( bool const non_client, bool const client ){
        CEGUI::Element::notifyChildrenOfSizeChange( non_client, client );
    }

    void notifyClippingChanged(  ){
        CEGUI::Window::notifyClippingChanged(  );
    }

    virtual void notifyScreenAreaChanged( bool recursive=true ) {
        if( bp::override func_notifyScreenAreaChanged = this->get_override( "notifyScreenAreaChanged" ) )
            func_notifyScreenAreaChanged( recursive );
        else{
            this->CEGUI::Window::notifyScreenAreaChanged( recursive );
        }
    }
    
    void default_notifyScreenAreaChanged( bool recursive=true ) {
        CEGUI::Window::notifyScreenAreaChanged( recursive );
    }

    virtual void onActivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onActivated = this->get_override( "onActivated" ) )
            func_onActivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onActivated( boost::ref(e) );
        }
    }
    
    virtual void default_onActivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onActivated( boost::ref(e) );
    }

    virtual void onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlphaChanged = this->get_override( "onAlphaChanged" ) )
            func_onAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlphaChanged( boost::ref(e) );
    }

    virtual void onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlwaysOnTopChanged = this->get_override( "onAlwaysOnTopChanged" ) )
            func_onAlwaysOnTopChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
    }

    virtual void onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureGained = this->get_override( "onCaptureGained" ) )
            func_onCaptureGained( boost::ref(e) );
        else{
            this->CEGUI::Window::onCaptureGained( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onCaptureGained( boost::ref(e) );
    }

    virtual void onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureLost = this->get_override( "onCaptureLost" ) )
            func_onCaptureLost( boost::ref(e) );
        else{
            this->CEGUI::Window::onCaptureLost( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onCaptureLost( boost::ref(e) );
    }

    virtual void onCharacter( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onCharacter = this->get_override( "onCharacter" ) )
            func_onCharacter( boost::ref(e) );
        else{
            this->CEGUI::Window::onCharacter( boost::ref(e) );
        }
    }
    
    virtual void default_onCharacter( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onCharacter( boost::ref(e) );
    }

    virtual void onChildAdded( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildAdded = this->get_override( "onChildAdded" ) )
            func_onChildAdded( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildAdded( boost::ref(e) );
        }
    }
    
    virtual void default_onChildAdded( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildAdded( boost::ref(e) );
    }

    virtual void onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildRemoved = this->get_override( "onChildRemoved" ) )
            func_onChildRemoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildRemoved( boost::ref(e) );
        }
    }
    
    virtual void default_onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildRemoved( boost::ref(e) );
    }

    virtual void onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onClippingChanged = this->get_override( "onClippingChanged" ) )
            func_onClippingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onClippingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onClippingChanged( boost::ref(e) );
    }

    virtual void onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onDeactivated = this->get_override( "onDeactivated" ) )
            func_onDeactivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onDeactivated( boost::ref(e) );
        }
    }
    
    virtual void default_onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onDeactivated( boost::ref(e) );
    }

    virtual void onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDestructionStarted = this->get_override( "onDestructionStarted" ) )
            func_onDestructionStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onDestructionStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDestructionStarted( boost::ref(e) );
    }

    virtual void onDisabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDisabled = this->get_override( "onDisabled" ) )
            func_onDisabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onDisabled( boost::ref(e) );
        }
    }
    
    virtual void default_onDisabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDisabled( boost::ref(e) );
    }

    virtual void onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemDropped = this->get_override( "onDragDropItemDropped" ) )
            func_onDragDropItemDropped( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
    }

    virtual void onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemEnters = this->get_override( "onDragDropItemEnters" ) )
            func_onDragDropItemEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
    }

    virtual void onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemLeaves = this->get_override( "onDragDropItemLeaves" ) )
            func_onDragDropItemLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
    }

    virtual void onEnabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onEnabled = this->get_override( "onEnabled" ) )
            func_onEnabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onEnabled( boost::ref(e) );
        }
    }
    
    virtual void default_onEnabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onEnabled( boost::ref(e) );
    }

    virtual void onFontChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onFontChanged = this->get_override( "onFontChanged" ) )
            func_onFontChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onFontChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onFontChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onFontChanged( boost::ref(e) );
    }

    virtual void onHidden( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onHidden = this->get_override( "onHidden" ) )
            func_onHidden( boost::ref(e) );
        else{
            this->CEGUI::Window::onHidden( boost::ref(e) );
        }
    }
    
    virtual void default_onHidden( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onHidden( boost::ref(e) );
    }

    virtual void onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onHorizontalAlignmentChanged = this->get_override( "onHorizontalAlignmentChanged" ) )
            func_onHorizontalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
    }

    virtual void onIDChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onIDChanged = this->get_override( "onIDChanged" ) )
            func_onIDChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onIDChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onIDChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onIDChanged( boost::ref(e) );
    }

    virtual void onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInheritsAlphaChanged = this->get_override( "onInheritsAlphaChanged" ) )
            func_onInheritsAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
    }

    virtual void onInvalidated( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInvalidated = this->get_override( "onInvalidated" ) )
            func_onInvalidated( boost::ref(e) );
        else{
            this->CEGUI::Window::onInvalidated( boost::ref(e) );
        }
    }
    
    virtual void default_onInvalidated( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInvalidated( boost::ref(e) );
    }

    virtual void onKeyDown( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyDown = this->get_override( "onKeyDown" ) )
            func_onKeyDown( boost::ref(e) );
        else{
            this->CEGUI::Window::onKeyDown( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyDown( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onKeyDown( boost::ref(e) );
    }

    virtual void onKeyUp( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyUp = this->get_override( "onKeyUp" ) )
            func_onKeyUp( boost::ref(e) );
        else{
            this->CEGUI::Window::onKeyUp( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyUp( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onKeyUp( boost::ref(e) );
    }

    virtual void onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMarginChanged = this->get_override( "onMarginChanged" ) )
            func_onMarginChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onMarginChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onMarginChanged( boost::ref(e) );
    }

    virtual void onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonUp = this->get_override( "onMouseButtonUp" ) )
            func_onMouseButtonUp( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseButtonUp( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseButtonUp( boost::ref(e) );
    }

    virtual void onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseClicked = this->get_override( "onMouseClicked" ) )
            func_onMouseClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseClicked( boost::ref(e) );
    }

    virtual void onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseDoubleClicked = this->get_override( "onMouseDoubleClicked" ) )
            func_onMouseDoubleClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseDoubleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseDoubleClicked( boost::ref(e) );
    }

    virtual void onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEnters = this->get_override( "onMouseEnters" ) )
            func_onMouseEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEnters( boost::ref(e) );
    }

    virtual void onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEntersArea = this->get_override( "onMouseEntersArea" ) )
            func_onMouseEntersArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEntersArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEntersArea( boost::ref(e) );
    }

    virtual void onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeaves = this->get_override( "onMouseLeaves" ) )
            func_onMouseLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeaves( boost::ref(e) );
    }

    virtual void onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeavesArea = this->get_override( "onMouseLeavesArea" ) )
            func_onMouseLeavesArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
    }

    virtual void onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseTripleClicked = this->get_override( "onMouseTripleClicked" ) )
            func_onMouseTripleClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseTripleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseTripleClicked( boost::ref(e) );
    }

    virtual void onMoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onMoved = this->get_override( "onMoved" ) )
            func_onMoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onMoved( boost::ref(e) );
        }
    }
    
    virtual void default_onMoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onMoved( boost::ref(e) );
    }

    virtual void onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        if( bp::override func_onNameChanged = this->get_override( "onNameChanged" ) )
            func_onNameChanged( boost::ref(e) );
        else{
            this->CEGUI::NamedElement::onNameChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        CEGUI::NamedElement::onNameChanged( boost::ref(e) );
    }

    virtual void onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onNonClientChanged = this->get_override( "onNonClientChanged" ) )
            func_onNonClientChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onNonClientChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onNonClientChanged( boost::ref(e) );
    }

    virtual void onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onParentDestroyChanged = this->get_override( "onParentDestroyChanged" ) )
            func_onParentDestroyChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
    }

    virtual void onParentSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onParentSized = this->get_override( "onParentSized" ) )
            func_onParentSized( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentSized( boost::ref(e) );
        }
    }
    
    virtual void default_onParentSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onParentSized( boost::ref(e) );
    }

    virtual void onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingEnded = this->get_override( "onRenderingEnded" ) )
            func_onRenderingEnded( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingEnded( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingEnded( boost::ref(e) );
    }

    virtual void onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingStarted = this->get_override( "onRenderingStarted" ) )
            func_onRenderingStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingStarted( boost::ref(e) );
    }

    virtual void onRotated( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onRotated = this->get_override( "onRotated" ) )
            func_onRotated( boost::ref(e) );
        else{
            this->CEGUI::Window::onRotated( boost::ref(e) );
        }
    }
    
    virtual void default_onRotated( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onRotated( boost::ref(e) );
    }

    virtual void onShown( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onShown = this->get_override( "onShown" ) )
            func_onShown( boost::ref(e) );
        else{
            this->CEGUI::Window::onShown( boost::ref(e) );
        }
    }
    
    virtual void default_onShown( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onShown( boost::ref(e) );
    }

    virtual void onTextChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextChanged = this->get_override( "onTextChanged" ) )
            func_onTextChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onTextChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onTextChanged( boost::ref(e) );
    }

    virtual void onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextParsingChanged = this->get_override( "onTextParsingChanged" ) )
            func_onTextParsingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onTextParsingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onTextParsingChanged( boost::ref(e) );
    }

    virtual void onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onVerticalAlignmentChanged = this->get_override( "onVerticalAlignmentChanged" ) )
            func_onVerticalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
    }

    virtual void onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererAttached = this->get_override( "onWindowRendererAttached" ) )
            func_onWindowRendererAttached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
    }

    virtual void onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererDetached = this->get_override( "onWindowRendererDetached" ) )
            func_onWindowRendererDetached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
    }

    virtual void onZChange_impl(  ){
        if( bp::override func_onZChange_impl = this->get_override( "onZChange_impl" ) )
            func_onZChange_impl(  );
        else{
            this->CEGUI::Window::onZChange_impl(  );
        }
    }
    
    virtual void default_onZChange_impl(  ){
        CEGUI::Window::onZChange_impl( );
    }

    virtual void onZChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onZChanged = this->get_override( "onZChanged" ) )
            func_onZChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onZChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onZChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onZChanged( boost::ref(e) );
    }

    virtual void performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        if( bp::override func_performChildWindowLayout = this->get_override( "performChildWindowLayout" ) )
            func_performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        else{
            this->CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        }
    }
    
    void default_performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
    }

    virtual bool performCopy( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCopy = this->get_override( "performCopy" ) )
            return func_performCopy( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performCopy( boost::ref(clipboard) );
        }
    }
    
    bool default_performCopy( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performCopy( boost::ref(clipboard) );
    }

    virtual bool performCut( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCut = this->get_override( "performCut" ) )
            return func_performCut( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performCut( boost::ref(clipboard) );
        }
    }
    
    bool default_performCut( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performCut( boost::ref(clipboard) );
    }

    virtual bool performPaste( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performPaste = this->get_override( "performPaste" ) )
            return func_performPaste( boost::ref(clipboard) );
        else{
            return this->CEGUI::Window::performPaste( boost::ref(clipboard) );
        }
    }
    
    bool default_performPaste( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Window::performPaste( boost::ref(clipboard) );
    }

    void queueGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::queueGeometry( boost::ref(ctx) );
    }

    void releaseRenderingWindow(  ){
        CEGUI::Window::releaseRenderingWindow(  );
    }

    virtual void removeChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_removeChild_impl = this->get_override( "removeChild_impl" ) )
            func_removeChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_removeChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
    }

    void removeWindowFromDrawList( ::CEGUI::Window const & wnd ){
        CEGUI::Window::removeWindowFromDrawList( boost::ref(wnd) );
    }

    virtual void setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        if( bp::override func_setArea = this->get_override( "setArea" ) )
            func_setArea( boost::ref(pos), boost::ref(size) );
        else{
            this->CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
        }
    }
    
    void default_setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
    }

    virtual void setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        if( bp::override func_setArea_impl = this->get_override( "setArea_impl" ) )
            func_setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        else{
            this->CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        }
    }
    
    virtual void default_setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
    }

    virtual void setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        if( bp::override func_setHorizontalAlignment = this->get_override( "setHorizontalAlignment" ) )
            func_setHorizontalAlignment( alignment );
        else{
            this->CEGUI::Element::setHorizontalAlignment( alignment );
        }
    }
    
    void default_setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        CEGUI::Element::setHorizontalAlignment( alignment );
    }

    virtual void setMargin( ::CEGUI::UBox const & margin ) {
        if( bp::override func_setMargin = this->get_override( "setMargin" ) )
            func_setMargin( boost::ref(margin) );
        else{
            this->CEGUI::Window::setMargin( boost::ref(margin) );
        }
    }
    
    void default_setMargin( ::CEGUI::UBox const & margin ) {
        CEGUI::Window::setMargin( boost::ref(margin) );
    }

    virtual void setName( ::CEGUI::String const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->CEGUI::NamedElement::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::CEGUI::String const & name ) {
        CEGUI::NamedElement::setName( boost::ref(name) );
    }

    virtual void setParent( ::CEGUI::Element * parent ){
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(parent) );
        else{
            this->CEGUI::Window::setParent( boost::python::ptr(parent) );
        }
    }
    
    virtual void default_setParent( ::CEGUI::Element * parent ){
        CEGUI::Window::setParent( boost::python::ptr(parent) );
    }

    virtual void setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        if( bp::override func_setVerticalAlignment = this->get_override( "setVerticalAlignment" ) )
            func_setVerticalAlignment( alignment );
        else{
            this->CEGUI::Element::setVerticalAlignment( alignment );
        }
    }
    
    void default_setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        CEGUI::Element::setVerticalAlignment( alignment );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
    }

    void transferChildSurfaces(  ){
        CEGUI::Window::transferChildSurfaces(  );
    }

    virtual void update( float elapsed ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( elapsed );
        else{
            this->CEGUI::Window::update( elapsed );
        }
    }
    
    void default_update( float elapsed ) {
        CEGUI::Window::update( elapsed );
    }

    void updateGeometryRenderSettings(  ){
        CEGUI::Window::updateGeometryRenderSettings(  );
    }

    virtual void updateSelf( float elapsed ){
        if( bp::override func_updateSelf = this->get_override( "updateSelf" ) )
            func_updateSelf( elapsed );
        else{
            this->CEGUI::Window::updateSelf( elapsed );
        }
    }
    
    virtual void default_updateSelf( float elapsed ){
        CEGUI::Window::updateSelf( elapsed );
    }

    virtual bool validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        if( bp::override func_validateWindowRenderer = this->get_override( "validateWindowRenderer" ) )
            return func_validateWindowRenderer( boost::python::ptr(renderer) );
        else{
            return this->CEGUI::Window::validateWindowRenderer( boost::python::ptr(renderer) );
        }
    }
    
    virtual bool default_validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        return CEGUI::Window::validateWindowRenderer( boost::python::ptr(renderer) );
    }

    virtual bool writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeAutoChildWindowXML = this->get_override( "writeAutoChildWindowXML" ) )
            return func_writeAutoChildWindowXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
        }
    }
    
    virtual bool default_writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
    }

    virtual int writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeChildWindowsXML = this->get_override( "writeChildWindowsXML" ) )
            return func_writeChildWindowsXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
    }

    virtual int writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writePropertiesXML = this->get_override( "writePropertiesXML" ) )
            return func_writePropertiesXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
    }

    virtual void writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        if( bp::override func_writeXMLToStream = this->get_override( "writeXMLToStream" ) )
            func_writeXMLToStream( boost::ref(xml_stream) );
        else{
            this->CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
        }
    }
    
    void default_writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
    }

};

void register_Tree_class(){

    { //::CEGUI::Tree
        typedef bp::class_< Tree_wrapper, bp::bases< CEGUI::Window >, boost::noncopyable > Tree_exposer_t;
        Tree_exposer_t Tree_exposer = Tree_exposer_t( "Tree", "*!\n\
         \n\
            Base class for standard Tree widget.\n\
        \n\
          deprecated\n\
            The CEGUI.Tree, CEGUI.TreeItem and any other associated classes are\n\
            deprecated and thier use should be minimised - preferably eliminated -\n\
            where possible.  It is extremely unfortunate that this widget was ever added\n\
            to CEGUI since its design and implementation are poor and do not meet \n\
            established standards for the CEGUI project.\n\
            \n\
            While no alternative currently exists, a superior, replacement tree widget\n\
            will be provided prior to the final removal of the current implementation.\n\
         *\n", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("type"), bp::arg("name") ), "*************************************************************************\n\
         Construction and Destruction\n\
         *************************************************************************\n\
        *!\n\
         \n\
            Constructor for Tree base class.\n\
         *\n") );
        bp::scope Tree_scope( Tree_exposer );
        { //::CEGUI::Tree::addItem
        
            typedef void ( ::CEGUI::Tree::*addItem_function_type )( ::CEGUI::TreeItem * ) ;
            
            Tree_exposer.def( 
                "addItem"
                , addItem_function_type( &::CEGUI::Tree::addItem )
                , ( bp::arg("item") )
                , "*!\n\
             \n\
                Add the given TreeItem to the tree.\n\
             \n\
             @param item\n\
                 Pointer to the TreeItem to be added to the tree.  Note that it is the\n\
                 passed object that is added to the tree, a copy is not made.  If this\n\
                 parameter is NULL, nothing happens.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::addTreeEvents
        
            typedef void ( Tree_wrapper::*addTreeEvents_function_type )(  ) ;
            
            Tree_exposer.def( 
                "addTreeEvents"
                , addTreeEvents_function_type( &Tree_wrapper::addTreeEvents )
                , "*!\n\
             \n\
                Add tree specific events\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::cacheTreeBaseImagery
        
            typedef void ( Tree_wrapper::*cacheTreeBaseImagery_function_type )(  ) ;
            
            Tree_exposer.def( 
                "cacheTreeBaseImagery"
                , cacheTreeBaseImagery_function_type( &Tree_wrapper::default_cacheTreeBaseImagery )
                , "*!\n\
             \n\
                 Perform caching of the widget control frame and other 'static' areas.\n\
                 This method should not render the actual items.  Note that the items\n\
                 are typically rendered to layer 3, other layers can be used for\n\
                 rendering imagery behind and infront of the items.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::clearAllSelections
        
            typedef void ( ::CEGUI::Tree::*clearAllSelections_function_type )(  ) ;
            
            Tree_exposer.def( 
                "clearAllSelections"
                , clearAllSelections_function_type( &::CEGUI::Tree::clearAllSelections )
                , "*!\n\
             \n\
                Clear the selected state for all items.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::clearAllSelectionsFromList
        
            typedef bool ( ::CEGUI::Tree::*clearAllSelectionsFromList_function_type )( ::std::vector< CEGUI::TreeItem* > const & ) ;
            
            Tree_exposer.def( 
                "clearAllSelectionsFromList"
                , clearAllSelectionsFromList_function_type( &::CEGUI::Tree::clearAllSelectionsFromList )
                , ( bp::arg("itemList") )
                , "*!\n\
             \n\
                Clear the selected state for all items.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::clearAllSelections_impl
        
            typedef bool ( Tree_wrapper::*clearAllSelections_impl_function_type )(  ) ;
            
            Tree_exposer.def( 
                "clearAllSelections_impl"
                , clearAllSelections_impl_function_type( &Tree_wrapper::clearAllSelections_impl )
                , "*!\n\
             \n\
                Clear the selected state for all items (implementation)\n\
             \n\
             @return\n\
                - true if some selections were cleared\n\
                - false nothing was changed.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::configureScrollbars
        
            typedef void ( Tree_wrapper::*configureScrollbars_function_type )(  ) ;
            
            Tree_exposer.def( 
                "configureScrollbars"
                , configureScrollbars_function_type( &Tree_wrapper::configureScrollbars )
                , "*!\n\
             \n\
                display required integrated scroll bars according to current state of\n\
                the tree and update their values.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::containsOpenItemRecursive
        
            typedef bool ( Tree_wrapper::*containsOpenItemRecursive_function_type )( ::std::vector< CEGUI::TreeItem* > const &,::CEGUI::TreeItem * ) ;
            
            Tree_exposer.def( 
                "containsOpenItemRecursive"
                , containsOpenItemRecursive_function_type( &Tree_wrapper::containsOpenItemRecursive )
                , ( bp::arg("itemList"), bp::arg("item") )
                , "*************************************************************************\n\
                Implementation Functions\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Checks if a tree item is visible (searches sub-items)\n\
            *\n" );
        
        }
        { //::CEGUI::Tree::createHorzScrollbar
        
            typedef ::CEGUI::Scrollbar * ( Tree_wrapper::*createHorzScrollbar_function_type )( ::CEGUI::String const & ) const;
            
            Tree_exposer.def( 
                "createHorzScrollbar"
                , createHorzScrollbar_function_type( &Tree_wrapper::default_createHorzScrollbar )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                create and return a pointer to a Scrollbar widget for use as horizontal\n\
                scroll bar.\n\
             \n\
             @param name\n\
                String holding the name to be given to the created widget component.\n\
             \n\
             @return\n\
                Pointer to a Scrollbar to be used for scrolling the tree horizontally.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::createVertScrollbar
        
            typedef ::CEGUI::Scrollbar * ( Tree_wrapper::*createVertScrollbar_function_type )( ::CEGUI::String const & ) const;
            
            Tree_exposer.def( 
                "createVertScrollbar"
                , createVertScrollbar_function_type( &Tree_wrapper::default_createVertScrollbar )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                create and return a pointer to a Scrollbar widget for use as vertical\n\
                scroll bar.\n\
             \n\
             @param name\n\
                String holding the name to be given to the created widget component.\n\
             \n\
             @return\n\
                Pointer to a Scrollbar to be used for scrolling the tree vertically.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::doScrollbars
        
            typedef void ( ::CEGUI::Tree::*doScrollbars_function_type )(  ) ;
            
            Tree_exposer.def( 
                "doScrollbars"
                , doScrollbars_function_type( &::CEGUI::Tree::doScrollbars )
                , "UpdateScrollbars\n" );
        
        }
        { //::CEGUI::Tree::doTreeRender
        
            typedef void ( ::CEGUI::Tree::*doTreeRender_function_type )(  ) ;
            
            Tree_exposer.def( 
                "doTreeRender"
                , doTreeRender_function_type( &::CEGUI::Tree::doTreeRender )
                , "Render the actual tree\n" );
        
        }
        { //::CEGUI::Tree::drawItemList
        
            typedef void ( Tree_wrapper::*drawItemList_function_type )( ::std::vector< CEGUI::TreeItem* > &,::CEGUI::Rectf &,float,::CEGUI::Vector2f &,::CEGUI::GeometryBuffer &,float ) ;
            
            Tree_exposer.def( 
                "drawItemList"
                , drawItemList_function_type( &Tree_wrapper::drawItemList )
                , ( bp::arg("itemList"), bp::arg("itemsArea"), bp::arg("widest"), bp::arg("itemPos"), bp::arg("geometry"), bp::arg("alpha") ) );
        
        }
        { //::CEGUI::Tree::ensureItemIsVisible
        
            typedef void ( ::CEGUI::Tree::*ensureItemIsVisible_function_type )( ::CEGUI::TreeItem const * ) ;
            
            Tree_exposer.def( 
                "ensureItemIsVisible"
                , ensureItemIsVisible_function_type( &::CEGUI::Tree::ensureItemIsVisible )
                , ( bp::arg("item") )
                , "*!\n\
             \n\
                Ensure the item at the specified index is visible within the tree.\n\
             \n\
             @param item\n\
                Pointer to the TreeItem to be made visible in the tree.\n\
             \n\
             @return\n\
                Nothing.\n\
             \n\
             @exception   InvalidRequestException thrown if  item is not attached to\n\
                this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::findFirstItemWithID
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findFirstItemWithID_function_type )( ::CEGUI::uint ) ;
            
            Tree_exposer.def( 
                "findFirstItemWithID"
                , findFirstItemWithID_function_type( &::CEGUI::Tree::findFirstItemWithID )
                , ( bp::arg("searchID") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Search the tree for an item with the specified text\n\
             \n\
             @param text\n\
                String object containing the text to be searched for.\n\
             \n\
             @param start_item\n\
                TreeItem where the search is to begin, the search will not include\n\
                 item.  If  item is 0, the search will begin from the first item in\n\
                the tree.\n\
             \n\
             @return\n\
                Pointer to the first TreeItem in the tree after  item that has text\n\
                matching  text.  If no item matches the criteria 0 is returned.\n\
             \n\
             @exception   InvalidRequestException thrown if  item is not attached to\n\
                this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::findFirstItemWithText
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findFirstItemWithText_function_type )( ::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "findFirstItemWithText"
                , findFirstItemWithText_function_type( &::CEGUI::Tree::findFirstItemWithText )
                , ( bp::arg("text") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Search the tree for an item with the specified text\n\
             \n\
             @param text\n\
                String object containing the text to be searched for.\n\
             \n\
             @param start_item\n\
                TreeItem where the search is to begin, the search will not include \n\
                item.  If  item is 0, the search will begin from the first item in\n\
                the tree.\n\
             \n\
             @return\n\
                Pointer to the first TreeItem in the tree after  item that has text\n\
                matching  text.  If no item matches the criteria, 0 is returned.\n\
             \n\
             @exception   InvalidRequestException thrown if  item is not attached to\n\
                this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::findItemWithIDFromList
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findItemWithIDFromList_function_type )( ::std::vector< CEGUI::TreeItem* > const &,::CEGUI::uint,::CEGUI::TreeItem const *,bool ) ;
            
            Tree_exposer.def( 
                "findItemWithIDFromList"
                , findItemWithIDFromList_function_type( &::CEGUI::Tree::findItemWithIDFromList )
                , ( bp::arg("itemList"), bp::arg("searchID"), bp::arg("start_item"), bp::arg("foundStartItem") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::findItemWithTextFromList
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findItemWithTextFromList_function_type )( ::std::vector< CEGUI::TreeItem* > const &,::CEGUI::String const &,::CEGUI::TreeItem const *,bool ) ;
            
            Tree_exposer.def( 
                "findItemWithTextFromList"
                , findItemWithTextFromList_function_type( &::CEGUI::Tree::findItemWithTextFromList )
                , ( bp::arg("itemList"), bp::arg("text"), bp::arg("start_item"), bp::arg("foundStartItem") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::findNextItemWithID
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findNextItemWithID_function_type )( ::CEGUI::uint,::CEGUI::TreeItem const * ) ;
            
            Tree_exposer.def( 
                "findNextItemWithID"
                , findNextItemWithID_function_type( &::CEGUI::Tree::findNextItemWithID )
                , ( bp::arg("searchID"), bp::arg("start_item") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Search the tree for an item with the specified text\n\
             \n\
             @param text\n\
                String object containing the text to be searched for.\n\
             \n\
             @param start_item\n\
                TreeItem where the search is to begin, the search will not include\n\
                 item.  If  item is 0, the search will begin from the first item in\n\
                the tree.\n\
             \n\
             @return\n\
                Pointer to the first TreeItem in the tree after  item that has text\n\
                matching  text.  If no item matches the criteria 0 is returned.\n\
             \n\
             @exception   InvalidRequestException thrown if  item is not attached to\n\
                this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::findNextItemWithText
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*findNextItemWithText_function_type )( ::CEGUI::String const &,::CEGUI::TreeItem const * ) ;
            
            Tree_exposer.def( 
                "findNextItemWithText"
                , findNextItemWithText_function_type( &::CEGUI::Tree::findNextItemWithText )
                , ( bp::arg("text"), bp::arg("start_item") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::getFirstSelectedItem
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*getFirstSelectedItem_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getFirstSelectedItem"
                , getFirstSelectedItem_function_type( &::CEGUI::Tree::getFirstSelectedItem )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Return a pointer to the first selected item.\n\
             \n\
             @return\n\
                Pointer to a TreeItem based object that is the first selected item in\n\
                the tree.  will return 0 if no item is selected.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getHeightToItemInList
        
            typedef bool ( Tree_wrapper::*getHeightToItemInList_function_type )( ::std::vector< CEGUI::TreeItem* > const &,::CEGUI::TreeItem const *,int,float * ) const;
            
            Tree_exposer.def( 
                "getHeightToItemInList"
                , getHeightToItemInList_function_type( &Tree_wrapper::getHeightToItemInList )
                , ( bp::arg("itemList"), bp::arg("treeItem"), bp::arg("itemDepth"), bp::arg("height") ) );
        
        }
        { //::CEGUI::Tree::getHorzScrollbar
        
            typedef ::CEGUI::Scrollbar * ( ::CEGUI::Tree::*getHorzScrollbar_function_type )(  ) ;
            
            Tree_exposer.def( 
                "getHorzScrollbar"
                , getHorzScrollbar_function_type( &::CEGUI::Tree::getHorzScrollbar )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::getItemAtPoint
        
            typedef ::CEGUI::TreeItem * ( Tree_wrapper::*getItemAtPoint_function_type )( ::CEGUI::Vector2f const & ) const;
            
            Tree_exposer.def( 
                "getItemAtPoint"
                , getItemAtPoint_function_type( &Tree_wrapper::getItemAtPoint )
                , ( bp::arg("pt") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Return the TreeItem under the given window local pixel co-ordinate.\n\
             \n\
             @return\n\
                 TreeItem that is under window pixel co-ordinate  pt, or 0 if no\n\
                 item is under that position.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getItemCount
        
            typedef ::size_t ( ::CEGUI::Tree::*getItemCount_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getItemCount"
                , getItemCount_function_type( &::CEGUI::Tree::getItemCount )
                , "*************************************************************************\n\
                Accessor Methods\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Return number of items attached to the tree\n\
             \n\
             @return\n\
                the number of items currently attached to this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getItemFromListAtPoint
        
            typedef ::CEGUI::TreeItem * ( Tree_wrapper::*getItemFromListAtPoint_function_type )( ::std::vector< CEGUI::TreeItem* > const &,float *,::CEGUI::Vector2f const & ) const;
            
            Tree_exposer.def( 
                "getItemFromListAtPoint"
                , getItemFromListAtPoint_function_type( &Tree_wrapper::getItemFromListAtPoint )
                , ( bp::arg("itemList"), bp::arg("bottomY"), bp::arg("pt") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::getLastSelectedItem
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*getLastSelectedItem_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getLastSelectedItem"
                , getLastSelectedItem_function_type( &::CEGUI::Tree::getLastSelectedItem )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Return a pointer to the first selected item.\n\
             \n\
             @return\n\
                Pointer to a TreeItem based object that is the last item selected by the\n\
                user, not necessarily the last selected in the tree.  Will return 0 if\n\
                no item is selected.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getNextSelected
        
            typedef ::CEGUI::TreeItem * ( ::CEGUI::Tree::*getNextSelected_function_type )( ::CEGUI::TreeItem const * ) const;
            
            Tree_exposer.def( 
                "getNextSelected"
                , getNextSelected_function_type( &::CEGUI::Tree::getNextSelected )
                , ( bp::arg("start_item") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             \n\
                Return a pointer to the next selected item after item  start_item\n\
             \n\
             @param start_item\n\
                 Pointer to the TreeItem where the search for the next selected item is\n\
                 to begin.  If this parameter is 0, the search will begin with the first\n\
                 item in the tree.\n\
             \n\
             @return\n\
                 Pointer to a TreeItem based object that is the next selected item in\n\
                 the tree after the item specified by  start_item.  Will return 0 if\n\
                 no further items were selected.\n\
             \n\
             @exception   InvalidRequestException thrown if  start_item is not attached\n\
                to this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getSelectedCount
        
            typedef ::size_t ( ::CEGUI::Tree::*getSelectedCount_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getSelectedCount"
                , getSelectedCount_function_type( &::CEGUI::Tree::getSelectedCount )
                , "*!\n\
             \n\
                Return the number of selected items in the tree.\n\
             \n\
             @return\n\
                Total number of attached items that are in the selected state.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getTotalItemsHeight
        
            typedef float ( Tree_wrapper::*getTotalItemsHeight_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getTotalItemsHeight"
                , getTotalItemsHeight_function_type( &Tree_wrapper::getTotalItemsHeight )
                , "*!\n\
             \n\
                Return the sum of all item heights\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getTotalItemsInListHeight
        
            typedef void ( Tree_wrapper::*getTotalItemsInListHeight_function_type )( ::std::vector< CEGUI::TreeItem* > const &,float * ) const;
            
            Tree_exposer.def( 
                "getTotalItemsInListHeight"
                , getTotalItemsInListHeight_function_type( &Tree_wrapper::getTotalItemsInListHeight )
                , ( bp::arg("itemList"), bp::arg("heightSum") ) );
        
        }
        { //::CEGUI::Tree::getTreeRenderArea
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getTreeRenderArea_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getTreeRenderArea"
                , getTreeRenderArea_function_type( &Tree_wrapper::default_getTreeRenderArea )
                , "*************************************************************************\n\
                Abstract Implementation Functions (must be provided by derived class)\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Return a Rect object describing, in un-clipped pixels, the window\n\
                relative area that is to be used for rendering tree items.\n\
             \n\
             @return\n\
                Rect object describing the area of the Window to be used for rendering\n\
                tree items.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getVertScrollbar
        
            typedef ::CEGUI::Scrollbar * ( ::CEGUI::Tree::*getVertScrollbar_function_type )(  ) ;
            
            Tree_exposer.def( 
                "getVertScrollbar"
                , getVertScrollbar_function_type( &::CEGUI::Tree::getVertScrollbar )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Tree::getWidestItemWidth
        
            typedef float ( Tree_wrapper::*getWidestItemWidth_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getWidestItemWidth"
                , getWidestItemWidth_function_type( &Tree_wrapper::getWidestItemWidth )
                , "*!\n\
             \n\
                Return the width of the widest item\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::getWidestItemWidthInList
        
            typedef void ( Tree_wrapper::*getWidestItemWidthInList_function_type )( ::std::vector< CEGUI::TreeItem* > const &,int,float * ) const;
            
            Tree_exposer.def( 
                "getWidestItemWidthInList"
                , getWidestItemWidthInList_function_type( &Tree_wrapper::getWidestItemWidthInList )
                , ( bp::arg("itemList"), bp::arg("itemDepth"), bp::arg("widest") ) );
        
        }
        { //::CEGUI::Tree::handleFontRenderSizeChange
        
            typedef bool ( Tree_wrapper::*handleFontRenderSizeChange_function_type )( ::CEGUI::EventArgs const & ) ;
            
            Tree_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type( &Tree_wrapper::default_handleFontRenderSizeChange )
                , ( bp::arg("args") )
                , "overridden from Window base class.\n" );
        
        }
        { //::CEGUI::Tree::handleUpdatedItemData
        
            typedef void ( ::CEGUI::Tree::*handleUpdatedItemData_function_type )(  ) ;
            
            Tree_exposer.def( 
                "handleUpdatedItemData"
                , handleUpdatedItemData_function_type( &::CEGUI::Tree::handleUpdatedItemData )
                , "*!\n\
             \n\
                Causes the tree to update it's internal state after changes have\n\
                been made to one or more attached TreeItem objects.\n\
             \n\
                Client code must call this whenever it has made any changes to TreeItem\n\
                objects already attached to the tree.  If you are just adding items,\n\
                or removed items to update them prior to re-adding them, there is no\n\
                need to call this method.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::handle_scrollChange
        
            typedef bool ( Tree_wrapper::*handle_scrollChange_function_type )( ::CEGUI::EventArgs const & ) ;
            
            Tree_exposer.def( 
                "handle_scrollChange"
                , handle_scrollChange_function_type( &Tree_wrapper::handle_scrollChange )
                , ( bp::arg("args") )
                , "*!\n\
             \n\
                Internal handler that is triggered when the user interacts with the\n\
                scrollbars.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::initialise
        
            typedef void ( ::CEGUI::Tree::*initialise_function_type )(  ) ;
            typedef void ( Tree_wrapper::*default_initialise_function_type )(  ) ;
            
            Tree_exposer.def( 
                "initialise"
                , initialise_function_type(&::CEGUI::Tree::initialise)
                , default_initialise_function_type(&Tree_wrapper::default_initialise) );
        
        }
        { //::CEGUI::Tree::insertItem
        
            typedef void ( ::CEGUI::Tree::*insertItem_function_type )( ::CEGUI::TreeItem *,::CEGUI::TreeItem const * ) ;
            
            Tree_exposer.def( 
                "insertItem"
                , insertItem_function_type( &::CEGUI::Tree::insertItem )
                , ( bp::arg("item"), bp::arg("position") )
                , "*!\n\
             \n\
                Insert an item into the tree after a specified item already in the\n\
                tree.\n\
             \n\
                Note that if the tree is sorted, the item may not end up in the\n\
                requested position.\n\
             \n\
             @param item\n\
                 Pointer to the TreeItem to be inserted.  Note that it is the passed\n\
                 object that is added to the tree, a copy is not made.  If this\n\
                 parameter is 0, nothing happens.\n\
             \n\
             @param position\n\
                 Pointer to a TreeItem that  item is to be inserted after.  If this\n\
                 parameter is 0, the item is inserted at the start of the tree.\n\
             \n\
             @return\n\
                Nothing.\n\
             \n\
             @exception InvalidRequestException   thrown if no TreeItem  position is\n\
                attached to this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::isHorzScrollbarAlwaysShown
        
            typedef bool ( ::CEGUI::Tree::*isHorzScrollbarAlwaysShown_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isHorzScrollbarAlwaysShown"
                , isHorzScrollbarAlwaysShown_function_type( &::CEGUI::Tree::isHorzScrollbarAlwaysShown )
                , "*!\n\
             \n\
                Return whether the horizontal scroll bar is always shown.\n\
             \n\
             @return\n\
                 - true if the scroll bar will always be shown even if it is not required.\n\
                 - false if the scroll bar will only be shown when it is required.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::isItemTooltipsEnabled
        
            typedef bool ( ::CEGUI::Tree::*isItemTooltipsEnabled_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isItemTooltipsEnabled"
                , isItemTooltipsEnabled_function_type( &::CEGUI::Tree::isItemTooltipsEnabled ) );
        
        }
        { //::CEGUI::Tree::isMultiselectEnabled
        
            typedef bool ( ::CEGUI::Tree::*isMultiselectEnabled_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isMultiselectEnabled"
                , isMultiselectEnabled_function_type( &::CEGUI::Tree::isMultiselectEnabled )
                , "*!\n\
             \n\
                return whether multi-select is enabled\n\
             \n\
             @return\n\
                true if multi-select is enabled, false if multi-select is not enabled.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::isSortEnabled
        
            typedef bool ( ::CEGUI::Tree::*isSortEnabled_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isSortEnabled"
                , isSortEnabled_function_type( &::CEGUI::Tree::isSortEnabled )
                , "*!\n\
             \n\
                return whether tree sorting is enabled\n\
             \n\
             @return\n\
                - true if the tree is sorted\n\
                - false if the tree is not sorted\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::isTreeItemInList
        
            typedef bool ( ::CEGUI::Tree::*isTreeItemInList_function_type )( ::CEGUI::TreeItem const * ) const;
            
            Tree_exposer.def( 
                "isTreeItemInList"
                , isTreeItemInList_function_type( &::CEGUI::Tree::isTreeItemInList )
                , ( bp::arg("item") )
                , "*!\n\
             \n\
                Return whether the specified TreeItem is in the tree\n\
             \n\
             @return\n\
                - true if TreeItem  item is in the tree\n\
                - false if TreeItem  item is not in the tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::isVertScrollbarAlwaysShown
        
            typedef bool ( ::CEGUI::Tree::*isVertScrollbarAlwaysShown_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isVertScrollbarAlwaysShown"
                , isVertScrollbarAlwaysShown_function_type( &::CEGUI::Tree::isVertScrollbarAlwaysShown )
                , "*!\n\
             \n\
                Return whether the vertical scroll bar is always shown.\n\
             \n\
             @return\n\
                 - true if the scroll bar will always be shown even if it is not required.\n\
                 - false if the scroll bar will only be shown when it is required.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onBranchClosed
        
            typedef void ( Tree_wrapper::*onBranchClosed_function_type )( ::CEGUI::TreeEventArgs & ) ;
            
            Tree_exposer.def( 
                "onBranchClosed"
                , onBranchClosed_function_type( &Tree_wrapper::default_onBranchClosed )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the user closes a branch of the tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onBranchOpened
        
            typedef void ( Tree_wrapper::*onBranchOpened_function_type )( ::CEGUI::TreeEventArgs & ) ;
            
            Tree_exposer.def( 
                "onBranchOpened"
                , onBranchOpened_function_type( &Tree_wrapper::default_onBranchOpened )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the user opens a branch of the tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onHorzScrollbarModeChanged
        
            typedef void ( Tree_wrapper::*onHorzScrollbarModeChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onHorzScrollbarModeChanged"
                , onHorzScrollbarModeChanged_function_type( &Tree_wrapper::default_onHorzScrollbarModeChanged )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the forced display of the horizontal\n\
                scroll bar setting changes.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onListContentsChanged
        
            typedef void ( Tree_wrapper::*onListContentsChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onListContentsChanged"
                , onListContentsChanged_function_type( &Tree_wrapper::default_onListContentsChanged )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
                New event handlers\n\
             *************************************************************************\n\
            *!\n\
             \n\
                Handler called internally when the tree contents are changed\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onMouseButtonDown
        
            typedef void ( Tree_wrapper::*onMouseButtonDown_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseButtonDown"
                , onMouseButtonDown_function_type( &Tree_wrapper::default_onMouseButtonDown )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
                Overridden Event handlers\n\
             *************************************************************************\n" );
        
        }
        { //::CEGUI::Tree::onMouseMove
        
            typedef void ( Tree_wrapper::*onMouseMove_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseMove"
                , onMouseMove_function_type( &Tree_wrapper::default_onMouseMove )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Tree::onMouseWheel
        
            typedef void ( Tree_wrapper::*onMouseWheel_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseWheel"
                , onMouseWheel_function_type( &Tree_wrapper::default_onMouseWheel )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Tree::onMultiselectModeChanged
        
            typedef void ( Tree_wrapper::*onMultiselectModeChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMultiselectModeChanged"
                , onMultiselectModeChanged_function_type( &Tree_wrapper::default_onMultiselectModeChanged )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the multi-select mode setting changes.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onSelectionChanged
        
            typedef void ( Tree_wrapper::*onSelectionChanged_function_type )( ::CEGUI::TreeEventArgs & ) ;
            
            Tree_exposer.def( 
                "onSelectionChanged"
                , onSelectionChanged_function_type( &Tree_wrapper::default_onSelectionChanged )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the currently selected item or items\n\
                changes.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onSized
        
            typedef void ( Tree_wrapper::*onSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onSized"
                , onSized_function_type( &Tree_wrapper::default_onSized )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
                Overridden Event handlers\n\
             *************************************************************************\n" );
        
        }
        { //::CEGUI::Tree::onSortModeChanged
        
            typedef void ( Tree_wrapper::*onSortModeChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onSortModeChanged"
                , onSortModeChanged_function_type( &Tree_wrapper::default_onSortModeChanged )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the sort mode setting changes.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::onVertScrollbarModeChanged
        
            typedef void ( Tree_wrapper::*onVertScrollbarModeChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onVertScrollbarModeChanged"
                , onVertScrollbarModeChanged_function_type( &Tree_wrapper::default_onVertScrollbarModeChanged )
                , ( bp::arg("e") )
                , "*!\n\
             \n\
                Handler called internally when the forced display of the vertical scroll\n\
                bar setting changes.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::populateGeometryBuffer
        
            typedef void ( Tree_wrapper::*populateGeometryBuffer_function_type )(  ) ;
            
            Tree_exposer.def( 
                "populateGeometryBuffer"
                , populateGeometryBuffer_function_type( &Tree_wrapper::default_populateGeometryBuffer )
                , "overridden from Window base class.\n" );
        
        }
        { //::CEGUI::Tree::removeItem
        
            typedef void ( ::CEGUI::Tree::*removeItem_function_type )( ::CEGUI::TreeItem const * ) ;
            
            Tree_exposer.def( 
                "removeItem"
                , removeItem_function_type( &::CEGUI::Tree::removeItem )
                , ( bp::arg("item") )
                , "*!\n\
             \n\
                Removes the given item from the tree.  If the item is has the auto\n\
                delete state set, the item will be deleted.\n\
             \n\
             @param item\n\
                Pointer to the TreeItem that is to be removed.  If  item is not\n\
                attached to this tree then nothing will happen.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::resetList
        
            typedef void ( ::CEGUI::Tree::*resetList_function_type )(  ) ;
            
            Tree_exposer.def( 
                "resetList"
                , resetList_function_type( &::CEGUI::Tree::resetList )
                , "*!\n\
             \n\
                Remove all items from the tree.\n\
             \n\
                Note that this will cause 'AutoDelete' items to be deleted.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::resetList_impl
        
            typedef bool ( Tree_wrapper::*resetList_impl_function_type )(  ) ;
            
            Tree_exposer.def( 
                "resetList_impl"
                , resetList_impl_function_type( &Tree_wrapper::resetList_impl )
                , "*!\n\
             \n\
                Remove all items from the tree.\n\
             \n\
             \note\n\
                Note that this will cause 'AutoDelete' items to be deleted.\n\
             \n\
             @return\n\
                 - true if the tree contents were changed.\n\
                 - false if the tree contents were not changed (tree already empty).\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::selectRange
        
            typedef void ( Tree_wrapper::*selectRange_function_type )( ::size_t,::size_t ) ;
            
            Tree_exposer.def( 
                "selectRange"
                , selectRange_function_type( &Tree_wrapper::selectRange )
                , ( bp::arg("start"), bp::arg("end") )
                , "*!\n\
             \n\
                select all strings between positions  start and  end.  (inclusive)\n\
                including  end.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::setItemRenderArea
        
            typedef void ( ::CEGUI::Tree::*setItemRenderArea_function_type )( ::CEGUI::Rectf & ) ;
            
            Tree_exposer.def( 
                "setItemRenderArea"
                , setItemRenderArea_function_type( &::CEGUI::Tree::setItemRenderArea )
                , ( bp::arg("r") ) );
        
        }
        { //::CEGUI::Tree::setItemSelectState
        
            typedef void ( ::CEGUI::Tree::*setItemSelectState_function_type )( ::CEGUI::TreeItem *,bool ) ;
            
            Tree_exposer.def( 
                "setItemSelectState"
                , setItemSelectState_function_type( &::CEGUI::Tree::setItemSelectState )
                , ( bp::arg("item"), bp::arg("state") )
                , "*!\n\
             \n\
                Set the select state of an attached TreeItem.\n\
             \n\
                This is the recommended way of selecting and deselecting items attached\n\
                to a tree as it respects the multi-select mode setting.  It is\n\
                possible to modify the setting on TreeItems directly, but that approach\n\
                does not respect the settings of the tree.\n\
             \n\
             @param item\n\
                The TreeItem to be affected.\n\
                This item must be attached to the tree.\n\
             \n\
             @param state\n\
                - true to select the item.\n\
                - false to de-select the item.\n\
             \n\
             @return\n\
                Nothing.\n\
             \n\
             @exception   InvalidRequestException thrown if  item is not attached to\n\
                this tree.\n\
             *\n" );
        
        }
        { //::CEGUI::Tree::setItemSelectState
        
            typedef void ( ::CEGUI::Tree::*setItemSelectState_function_type )( ::size_t,bool ) ;
            
            Tree_exposer.def( 
                "setItemSelectState"
                , setItemSelectState_function_type( &::CEGUI::Tree::setItemSelectState )
                , ( bp::arg("item_index"), bp::arg("state") )
                , "*!\n\
                 \n\
                    Set the select state of an attached TreeItem.\n\
                 \n\
                    This is the recommended way of selecting and deselecting items attached\n\
                    to a tree as it respects the multi-select mode setting.  It is\n\
                    possible to modify the setting on TreeItems directly, but that approach\n\
                    does not respect the settings of the tree.\n\
                 \n\
                 @param item_index\n\
                    The zero based index of the TreeItem to be affected.\n\
                    This must be a valid index (0 <= index < getItemCount())\n\
            \n\
                 @param state\n\
                    - true to select the item.\n\
                    - false to de-select the item.\n\
                 \n\
                 @return\n\
                    Nothing.\n\
                 \n\
                 @exception   InvalidRequestException thrown if  item_index is out of range\n\
                    for the tree\n\
                 *\n" );
        
        }
        { //::CEGUI::Tree::setItemTooltipsEnabled
        
            typedef void ( ::CEGUI::Tree::*setItemTooltipsEnabled_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "setItemTooltipsEnabled"
                , setItemTooltipsEnabled_function_type( &::CEGUI::Tree::setItemTooltipsEnabled )
                , ( bp::arg("setting") ) );
        
        }
        { //::CEGUI::Tree::setLookNFeel
        
            typedef void ( ::CEGUI::Tree::*setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            typedef void ( Tree_wrapper::*default_setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "setLookNFeel"
                , setLookNFeel_function_type(&::CEGUI::Tree::setLookNFeel)
                , default_setLookNFeel_function_type(&Tree_wrapper::default_setLookNFeel)
                , ( bp::arg("look") ) );
        
        }
        { //::CEGUI::Tree::setMultiselectEnabled
        
            typedef void ( ::CEGUI::Tree::*setMultiselectEnabled_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "setMultiselectEnabled"
                , setMultiselectEnabled_function_type( &::CEGUI::Tree::setMultiselectEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
                 \n\
                    Set whether the tree should allow multiple selections or just a single\n\
                    selection.\n\
                 \n\
                 @param  setting\n\
                     - true if the widget should allow multiple items to be selected\n\
                     - false if the widget should only allow a single selection.\n\
            \n\
                 @return\n\
                    Nothing.\n\
                 *\n" );
        
        }
        { //::CEGUI::Tree::setShowHorzScrollbar
        
            typedef void ( ::CEGUI::Tree::*setShowHorzScrollbar_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "setShowHorzScrollbar"
                , setShowHorzScrollbar_function_type( &::CEGUI::Tree::setShowHorzScrollbar )
                , ( bp::arg("setting") )
                , "*!\n\
                 \n\
                    Set whether the horizontal scroll bar should always be shown.\n\
                 \n\
                 @param setting\n\
                     - true if the horizontal scroll bar should be shown even when it is not\n\
                       required.\n\
                     - false if the horizontal scroll bar should only be shown when it is\n\
                       required.\n\
            \n\
                 @return\n\
                    Nothing.\n\
                 *\n" );
        
        }
        { //::CEGUI::Tree::setShowVertScrollbar
        
            typedef void ( ::CEGUI::Tree::*setShowVertScrollbar_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "setShowVertScrollbar"
                , setShowVertScrollbar_function_type( &::CEGUI::Tree::setShowVertScrollbar )
                , ( bp::arg("setting") )
                , "*!\n\
                 \n\
                    Set whether the vertical scroll bar should always be shown.\n\
                 \n\
                 @param setting\n\
                     - true if the vertical scroll bar should be shown even when it is not\n\
                       required.\n\
                     - false if the vertical scroll bar should only be shown when it is\n\
                       required.\n\
            \n\
                 @return\n\
                    Nothing.\n\
                 *\n" );
        
        }
        { //::CEGUI::Tree::setSortingEnabled
        
            typedef void ( ::CEGUI::Tree::*setSortingEnabled_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "setSortingEnabled"
                , setSortingEnabled_function_type( &::CEGUI::Tree::setSortingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
             \n\
                Set whether the tree should be sorted.\n\
             \n\
             @param setting\n\
                - true if the tree should be sorted\n\
                - false if the tree should not be sorted.\n\
             \n\
             @return\n\
                Nothing.\n\
             *\n" );
        
        }
        Tree_exposer.add_static_property( "EventBranchClosed"
                        , bp::make_getter( &CEGUI::Tree::EventBranchClosed
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventBranchOpened"
                        , bp::make_getter( &CEGUI::Tree::EventBranchOpened
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventHorzScrollbarModeChanged"
                        , bp::make_getter( &CEGUI::Tree::EventHorzScrollbarModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventListContentsChanged"
                        , bp::make_getter( &CEGUI::Tree::EventListContentsChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventMultiselectModeChanged"
                        , bp::make_getter( &CEGUI::Tree::EventMultiselectModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventSelectionChanged"
                        , bp::make_getter( &CEGUI::Tree::EventSelectionChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventSortModeChanged"
                        , bp::make_getter( &CEGUI::Tree::EventSortModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Tree_exposer.add_static_property( "EventVertScrollbarModeChanged"
                        , bp::make_getter( &CEGUI::Tree::EventVertScrollbarModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        { //::CEGUI::Window::addChild_impl
        
            typedef void ( Tree_wrapper::*addChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            Tree_exposer.def( 
                "addChild_impl"
                , addChild_impl_function_type( &Tree_wrapper::default_addChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.addChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Element::addElementProperties
        
            typedef void ( Tree_wrapper::*addElementProperties_function_type )(  ) ;
            
            Tree_exposer.def( 
                "addElementProperties"
                , addElementProperties_function_type( &Tree_wrapper::addElementProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Element properties.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::addNamedElementProperties
        
            typedef void ( Tree_wrapper::*addNamedElementProperties_function_type )(  ) ;
            
            Tree_exposer.def( 
                "addNamedElementProperties"
                , addNamedElementProperties_function_type( &Tree_wrapper::addNamedElementProperties )
                , "*!\n\
             Add standard CEGUI.NamedElement properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowProperties
        
            typedef void ( Tree_wrapper::*addWindowProperties_function_type )(  ) ;
            
            Tree_exposer.def( 
                "addWindowProperties"
                , addWindowProperties_function_type( &Tree_wrapper::addWindowProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Window properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowToDrawList
        
            typedef void ( Tree_wrapper::*addWindowToDrawList_function_type )( ::CEGUI::Window &,bool ) ;
            
            Tree_exposer.def( 
                "addWindowToDrawList"
                , addWindowToDrawList_function_type( &Tree_wrapper::addWindowToDrawList )
                , ( bp::arg("wnd"), bp::arg("at_back")=(bool)(false) )
                , "*!\n\
                \n\
                    Add the given window to the drawing list at an appropriate position for\n\
                    it's settings and the required direction.  Basically, when  at_back\n\
                    is false, the window will appear in front of all other windows with the\n\
                    same 'always on top' setting.  When  at_back is true, the window will\n\
                    appear behind all other windows wih the same 'always on top' setting.\n\
            \n\
                @param wnd\n\
                    Window object to be added to the drawing list.\n\
            \n\
                @param at_back\n\
                    Indicates whether the window should be placed at the back of other\n\
                    windows in the same group. If this is false, the window is placed in\n\
                    front of other windows in the group.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::allocateRenderingWindow
        
            typedef void ( Tree_wrapper::*allocateRenderingWindow_function_type )(  ) ;
            
            Tree_exposer.def( 
                "allocateRenderingWindow"
                , allocateRenderingWindow_function_type( &Tree_wrapper::allocateRenderingWindow )
                , "! helper to create and setup the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::banPropertiesForAutoWindow
        
            typedef void ( Tree_wrapper::*banPropertiesForAutoWindow_function_type )(  ) ;
            
            Tree_exposer.def( 
                "banPropertiesForAutoWindow"
                , banPropertiesForAutoWindow_function_type( &Tree_wrapper::default_banPropertiesForAutoWindow ) );
        
        }
        { //::CEGUI::Window::beginInitialisation
        
            typedef void ( ::CEGUI::Window::*beginInitialisation_function_type )(  ) ;
            typedef void ( Tree_wrapper::*default_beginInitialisation_function_type )(  ) ;
            
            Tree_exposer.def( 
                "beginInitialisation"
                , beginInitialisation_function_type(&::CEGUI::Window::beginInitialisation)
                , default_beginInitialisation_function_type(&Tree_wrapper::default_beginInitialisation) );
        
        }
        { //::CEGUI::Window::bufferGeometry
        
            typedef void ( Tree_wrapper::*bufferGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Tree_exposer.def( 
                "bufferGeometry"
                , bufferGeometry_function_type( &Tree_wrapper::bufferGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with generating and buffering\n\
                    window geometry.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf; it is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::cleanupChildren
        
            typedef void ( Tree_wrapper::*cleanupChildren_function_type )(  ) ;
            
            Tree_exposer.def( 
                "cleanupChildren"
                , cleanupChildren_function_type( &Tree_wrapper::default_cleanupChildren )
                , "*!\n\
            \n\
                Cleanup child windows\n\
            *\n" );
        
        }
        { //::CEGUI::Window::cloneChildWidgetsTo
        
            typedef void ( ::CEGUI::Window::*cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Tree_wrapper::*default_cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            
            Tree_exposer.def( 
                "cloneChildWidgetsTo"
                , cloneChildWidgetsTo_function_type(&::CEGUI::Window::cloneChildWidgetsTo)
                , default_cloneChildWidgetsTo_function_type(&Tree_wrapper::default_cloneChildWidgetsTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::clonePropertiesTo
        
            typedef void ( ::CEGUI::Window::*clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Tree_wrapper::*default_clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            
            Tree_exposer.def( 
                "clonePropertiesTo"
                , clonePropertiesTo_function_type(&::CEGUI::Window::clonePropertiesTo)
                , default_clonePropertiesTo_function_type(&Tree_wrapper::default_clonePropertiesTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::destroy
        
            typedef void ( ::CEGUI::Window::*destroy_function_type )(  ) ;
            typedef void ( Tree_wrapper::*default_destroy_function_type )(  ) ;
            
            Tree_exposer.def( 
                "destroy"
                , destroy_function_type(&::CEGUI::Window::destroy)
                , default_destroy_function_type(&Tree_wrapper::default_destroy) );
        
        }
        { //::CEGUI::Window::drawSelf
        
            typedef void ( Tree_wrapper::*drawSelf_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Tree_exposer.def( 
                "drawSelf"
                , drawSelf_function_type( &Tree_wrapper::default_drawSelf )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform the actual rendering for this Window.\n\
            \n\
                @param ctx\n\
                    RenderingContext holding the details of the RenderingSurface to be\n\
                    used for the Window rendering operations.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Window::endInitialisation
        
            typedef void ( ::CEGUI::Window::*endInitialisation_function_type )(  ) ;
            typedef void ( Tree_wrapper::*default_endInitialisation_function_type )(  ) ;
            
            Tree_exposer.def( 
                "endInitialisation"
                , endInitialisation_function_type(&::CEGUI::Window::endInitialisation)
                , default_endInitialisation_function_type(&Tree_wrapper::default_endInitialisation) );
        
        }
        { //::CEGUI::Element::fireAreaChangeEvents
        
            typedef void ( Tree_wrapper::*fireAreaChangeEvents_function_type )( bool const,bool const ) ;
            
            Tree_exposer.def( 
                "fireAreaChangeEvents"
                , fireAreaChangeEvents_function_type( &Tree_wrapper::fireAreaChangeEvents )
                , ( bp::arg("moved"), bp::arg("sized") )
                , "! helper to fire events based on changes to area rect\n" );
        
        }
        { //::CEGUI::EventSet::fireEvent
        
            typedef void ( ::CEGUI::EventSet::*fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            typedef void ( Tree_wrapper::*default_fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "fireEvent"
                , fireEvent_function_type(&::CEGUI::EventSet::fireEvent)
                , default_fireEvent_function_type(&Tree_wrapper::default_fireEvent)
                , ( bp::arg("name"), bp::arg("args"), bp::arg("eventNamespace")="" ) );
        
        }
        { //::CEGUI::EventSet::fireEvent_impl
        
            typedef void ( Tree_wrapper::*fireEvent_impl_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs & ) ;
            
            Tree_exposer.def( 
                "fireEvent_impl"
                , fireEvent_impl_function_type( &Tree_wrapper::fireEvent_impl )
                , ( bp::arg("name"), bp::arg("args") )
                , "! Implementation event firing member\n" );
        
        }
        { //::CEGUI::Window::generateAutoRepeatEvent
        
            typedef void ( Tree_wrapper::*generateAutoRepeatEvent_function_type )( ::CEGUI::MouseButton ) ;
            
            Tree_exposer.def( 
                "generateAutoRepeatEvent"
                , generateAutoRepeatEvent_function_type( &Tree_wrapper::generateAutoRepeatEvent )
                , ( bp::arg("button") )
                , "*!\n\
            \n\
                Fires off a repeated mouse button down event for this window.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNamePath_impl
        
            typedef ::CEGUI::NamedElement * ( Tree_wrapper::*getChildByNamePath_impl_function_type )( ::CEGUI::String const & ) const;
            
            Tree_exposer.def( 
                "getChildByNamePath_impl"
                , getChildByNamePath_impl_function_type( &Tree_wrapper::default_getChildByNamePath_impl )
                , ( bp::arg("name_path") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Retrieves a child at  name_path or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNameRecursive_impl
        
            typedef ::CEGUI::NamedElement * ( Tree_wrapper::*getChildByNameRecursive_impl_function_type )( ::CEGUI::String const & ) const;
            
            Tree_exposer.def( 
                "getChildByNameRecursive_impl"
                , getChildByNameRecursive_impl_function_type( &Tree_wrapper::default_getChildByNameRecursive_impl )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Finds a child by  name or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::Element::getClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getClientChildContentArea_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getClientChildContentArea"
                , getClientChildContentArea_function_type(&::CEGUI::Element::getClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getHitTestRect_impl
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getHitTestRect_impl_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getHitTestRect_impl"
                , getHitTestRect_impl_function_type( &Tree_wrapper::default_getHitTestRect_impl )
                , "! Default implementation of function to return Window inner clipper area.\n\
            ! Default implementation of function to return Window hit-test area.\n" );
        
        }
        { //::CEGUI::Window::getInnerRectClipper_impl
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getInnerRectClipper_impl_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getInnerRectClipper_impl"
                , getInnerRectClipper_impl_function_type( &Tree_wrapper::default_getInnerRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n\
            ! Default implementation of function to return Window inner clipper area.\n" );
        
        }
        { //::CEGUI::Element::getNonClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getNonClientChildContentArea_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNonClientChildContentArea"
                , getNonClientChildContentArea_function_type(&::CEGUI::Element::getNonClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getOuterRectClipper_impl
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getOuterRectClipper_impl_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getOuterRectClipper_impl"
                , getOuterRectClipper_impl_function_type( &Tree_wrapper::default_getOuterRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n" );
        
        }
        { //::CEGUI::Window::getParentElementClipIntersection
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getParentElementClipIntersection_function_type )( ::CEGUI::Rectf const & ) const;
            
            Tree_exposer.def( 
                "getParentElementClipIntersection"
                , getParentElementClipIntersection_function_type( &Tree_wrapper::getParentElementClipIntersection )
                , ( bp::arg("unclipped_area") )
                , "! helper function for calculating clipping rectangles.\n" );
        
        }
        { //::CEGUI::Window::getRenderedStringParser
        
            typedef ::CEGUI::RenderedStringParser & ( ::CEGUI::Window::*getRenderedStringParser_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getRenderedStringParser"
                , getRenderedStringParser_function_type(&::CEGUI::Window::getRenderedStringParser)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Window::getRenderingContext_impl
        
            typedef void ( ::CEGUI::Window::*getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            typedef void ( Tree_wrapper::*default_getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            
            Tree_exposer.def( 
                "getRenderingContext_impl"
                , getRenderingContext_impl_function_type(&::CEGUI::Window::getRenderingContext_impl)
                , default_getRenderingContext_impl_function_type(&Tree_wrapper::default_getRenderingContext_impl)
                , ( bp::arg("ctx") ) );
        
        }
        { //::CEGUI::Window::getRootContainerSize
        
            typedef ::CEGUI::Sizef const & ( ::CEGUI::Window::*getRootContainerSize_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getRootContainerSize"
                , getRootContainerSize_function_type(&::CEGUI::Window::getRootContainerSize)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::EventSet::getScriptModule
        
            typedef ::CEGUI::ScriptModule * ( Tree_wrapper::*getScriptModule_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getScriptModule"
                , getScriptModule_function_type( &Tree_wrapper::getScriptModule )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "! Implementation event firing member\n\
            ! Helper to return the script module pointer or throw.\n" );
        
        }
        { //::CEGUI::Window::getUnclippedInnerRect_impl
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getUnclippedInnerRect_impl_function_type )( bool ) const;
            
            Tree_exposer.def( 
                "getUnclippedInnerRect_impl"
                , getUnclippedInnerRect_impl_function_type( &Tree_wrapper::default_getUnclippedInnerRect_impl )
                , ( bp::arg("skipAllPixelAlignment") ) );
        
        }
        { //::CEGUI::Element::getUnclippedOuterRect_impl
        
            typedef ::CEGUI::Rectf ( Tree_wrapper::*getUnclippedOuterRect_impl_function_type )( bool ) const;
            
            Tree_exposer.def( 
                "getUnclippedOuterRect_impl"
                , getUnclippedOuterRect_impl_function_type( &Tree_wrapper::default_getUnclippedOuterRect_impl )
                , ( bp::arg("skipAllPixelAlignment") )
                , "! Default implementation of function to return Element's outer rect area.\n" );
        
        }
        { //::CEGUI::Window::getWindowAttachedToCommonAncestor
        
            typedef ::CEGUI::Window const * ( Tree_wrapper::*getWindowAttachedToCommonAncestor_function_type )( ::CEGUI::Window const & ) const;
            
            Tree_exposer.def( 
                "getWindowAttachedToCommonAncestor"
                , getWindowAttachedToCommonAncestor_function_type( &Tree_wrapper::getWindowAttachedToCommonAncestor )
                , ( bp::arg("wnd") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
            \n\
                Helper function to return the ancestor Window of a wnd that is attached\n\
                as a child to a window that is also an ancestor of a this.  Returns 0\n\
                if a wnd and a this are not part of the same hierachy.\n\
             *\n" );
        
        }
        { //::CEGUI::Window::initialiseClippers
        
            typedef void ( Tree_wrapper::*initialiseClippers_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Tree_exposer.def( 
                "initialiseClippers"
                , initialiseClippers_function_type( &Tree_wrapper::initialiseClippers )
                , ( bp::arg("ctx") )
                , "! Helper to intialise the needed clipping for geometry and render surface.\n" );
        
        }
        { //::CEGUI::Window::initialiseComponents
        
            typedef void ( ::CEGUI::Window::*initialiseComponents_function_type )(  ) ;
            typedef void ( Tree_wrapper::*default_initialiseComponents_function_type )(  ) ;
            
            Tree_exposer.def( 
                "initialiseComponents"
                , initialiseComponents_function_type(&::CEGUI::Window::initialiseComponents)
                , default_initialiseComponents_function_type(&Tree_wrapper::default_initialiseComponents) );
        
        }
        { //::CEGUI::Window::invalidate_impl
        
            typedef void ( Tree_wrapper::*invalidate_impl_function_type )( bool const ) ;
            
            Tree_exposer.def( 
                "invalidate_impl"
                , invalidate_impl_function_type( &Tree_wrapper::invalidate_impl )
                , ( bp::arg("recursive") )
                , "! helper function to invalidate window and optionally child windows.\n" );
        
        }
        { //::CEGUI::Window::isHit
        
            typedef bool ( ::CEGUI::Window::*isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            typedef bool ( Tree_wrapper::*default_isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            
            Tree_exposer.def( 
                "isHit"
                , isHit_function_type(&::CEGUI::Window::isHit)
                , default_isHit_function_type(&Tree_wrapper::default_isHit)
                , ( bp::arg("position"), bp::arg("allow_disabled")=(bool const)(false) ) );
        
        }
        { //::CEGUI::Window::isHitTargetWindow
        
            typedef bool ( Tree_wrapper::*isHitTargetWindow_function_type )( ::CEGUI::Vector2f const &,bool ) const;
            
            Tree_exposer.def( 
                "isHitTargetWindow"
                , isHitTargetWindow_function_type( &Tree_wrapper::isHitTargetWindow )
                , ( bp::arg("position"), bp::arg("allow_disabled") ) );
        
        }
        { //::CEGUI::Element::isInnerRectSizeChanged
        
            typedef bool ( Tree_wrapper::*isInnerRectSizeChanged_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isInnerRectSizeChanged"
                , isInnerRectSizeChanged_function_type( &Tree_wrapper::isInnerRectSizeChanged )
                , "! helper to return whether the inner rect size has changed\n" );
        
        }
        { //::CEGUI::Window::isPropertyAtDefault
        
            typedef bool ( Tree_wrapper::*isPropertyAtDefault_function_type )( ::CEGUI::Property const * ) const;
            
            Tree_exposer.def( 
                "isPropertyAtDefault"
                , isPropertyAtDefault_function_type( &Tree_wrapper::isPropertyAtDefault )
                , ( bp::arg("property") )
                , "*!\n\
            \n\
                Returns whether a property is at it's default value.\n\
                This function is different from Property.isDefatult as it takes the assigned look'n'feel\n\
                (if the is one) into account.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::isTopOfZOrder
        
            typedef bool ( Tree_wrapper::*isTopOfZOrder_function_type )(  ) const;
            
            Tree_exposer.def( 
                "isTopOfZOrder"
                , isTopOfZOrder_function_type( &Tree_wrapper::isTopOfZOrder )
                , "*!\n\
                \n\
                    Return whether the window is at the top of the Z-Order.  This will\n\
                    correctly take into account 'Always on top' windows as needed.\n\
            \n\
                @return\n\
                    - true if the Window is at the top of the z-order in relation to sibling\n\
                      windows with the same 'always on top' setting.\n\
                    - false if the Window is not at the top of the z-order in relation to\n\
                      sibling windows with the same 'always on top' setting.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::layoutLookNFeelChildWidgets
        
            typedef void ( Tree_wrapper::*layoutLookNFeelChildWidgets_function_type )(  ) ;
            
            Tree_exposer.def( 
                "layoutLookNFeelChildWidgets"
                , layoutLookNFeelChildWidgets_function_type( &Tree_wrapper::layoutLookNFeelChildWidgets )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::markCachedWindowRectsInvalid
        
            typedef void ( Tree_wrapper::*markCachedWindowRectsInvalid_function_type )(  ) ;
            
            Tree_exposer.def( 
                "markCachedWindowRectsInvalid"
                , markCachedWindowRectsInvalid_function_type( &Tree_wrapper::markCachedWindowRectsInvalid )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::moveToFront_impl
        
            typedef bool ( Tree_wrapper::*moveToFront_impl_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "moveToFront_impl"
                , moveToFront_impl_function_type( &Tree_wrapper::default_moveToFront_impl )
                , ( bp::arg("wasClicked") )
                , "*!\n\
                \n\
                    Implements move to front behavior.\n\
            \n\
                @return\n\
                    Should return true if some action was taken, or false if there was\n\
                    nothing to be done.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::notifyChildrenOfSizeChange
        
            typedef void ( Tree_wrapper::*notifyChildrenOfSizeChange_function_type )( bool const,bool const ) ;
            
            Tree_exposer.def( 
                "notifyChildrenOfSizeChange"
                , notifyChildrenOfSizeChange_function_type( &Tree_wrapper::notifyChildrenOfSizeChange )
                , ( bp::arg("non_client"), bp::arg("client") ) );
        
        }
        { //::CEGUI::Window::notifyClippingChanged
        
            typedef void ( Tree_wrapper::*notifyClippingChanged_function_type )(  ) ;
            
            Tree_exposer.def( 
                "notifyClippingChanged"
                , notifyClippingChanged_function_type( &Tree_wrapper::notifyClippingChanged )
                , "*!\n\
            \n\
                Recursively inform all children that the clipping has changed and screen rects\n\
                needs to be recached.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::notifyScreenAreaChanged
        
            typedef void ( ::CEGUI::Window::*notifyScreenAreaChanged_function_type )( bool ) ;
            typedef void ( Tree_wrapper::*default_notifyScreenAreaChanged_function_type )( bool ) ;
            
            Tree_exposer.def( 
                "notifyScreenAreaChanged"
                , notifyScreenAreaChanged_function_type(&::CEGUI::Window::notifyScreenAreaChanged)
                , default_notifyScreenAreaChanged_function_type(&Tree_wrapper::default_notifyScreenAreaChanged)
                , ( bp::arg("recursive")=(bool)(true) ) );
        
        }
        { //::CEGUI::Window::onActivated
        
            typedef void ( Tree_wrapper::*onActivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            Tree_exposer.def( 
                "onActivated"
                , onActivated_function_type( &Tree_wrapper::default_onActivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has become the active window.\n\
            \n\
                @param e\n\
                    ActivationEventArgs class whose 'otherWindow' field is set to the window\n\
                    that previously was active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlphaChanged
        
            typedef void ( Tree_wrapper::*onAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onAlphaChanged"
                , onAlphaChanged_function_type( &Tree_wrapper::default_onAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's alpha blend value is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlwaysOnTopChanged
        
            typedef void ( Tree_wrapper::*onAlwaysOnTopChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onAlwaysOnTopChanged"
                , onAlwaysOnTopChanged_function_type( &Tree_wrapper::default_onAlwaysOnTopChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's always-on-top setting is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCaptureGained
        
            typedef void ( Tree_wrapper::*onCaptureGained_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onCaptureGained"
                , onCaptureGained_function_type( &Tree_wrapper::default_onCaptureGained )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gains capture of mouse inputs.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCaptureLost
        
            typedef void ( Tree_wrapper::*onCaptureLost_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onCaptureLost"
                , onCaptureLost_function_type( &Tree_wrapper::default_onCaptureLost )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window loses capture of mouse inputs.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCharacter
        
            typedef void ( Tree_wrapper::*onCharacter_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Tree_exposer.def( 
                "onCharacter"
                , onCharacter_function_type( &Tree_wrapper::default_onCharacter )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a character-key has been pressed while this window\n\
                    has input focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'codepoint' field is set to the Unicode code\n\
                    point (encoded as utf32) for the character typed, and whose 'sysKeys'\n\
                    field represents the combination of SystemKey that were active when the\n\
                    event was generated.  All other fields should be considered as 'junk'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildAdded
        
            typedef void ( Tree_wrapper::*onChildAdded_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onChildAdded"
                , onChildAdded_function_type( &Tree_wrapper::default_onChildAdded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is added to this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that has been added.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildRemoved
        
            typedef void ( Tree_wrapper::*onChildRemoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onChildRemoved"
                , onChildRemoved_function_type( &Tree_wrapper::default_onChildRemoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is removed from this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the window\n\
                    that has been removed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onClippingChanged
        
            typedef void ( Tree_wrapper::*onClippingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onClippingChanged"
                , onClippingChanged_function_type( &Tree_wrapper::default_onClippingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being clipped by it's\n\
                    parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDeactivated
        
            typedef void ( Tree_wrapper::*onDeactivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDeactivated"
                , onDeactivated_function_type( &Tree_wrapper::default_onDeactivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has lost input focus and has been\n\
                    deactivated.\n\
            \n\
                @param e\n\
                    ActivationEventArgs object whose 'otherWindow' field is set to the\n\
                    window that has now become active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDestructionStarted
        
            typedef void ( Tree_wrapper::*onDestructionStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDestructionStarted"
                , onDestructionStarted_function_type( &Tree_wrapper::default_onDestructionStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's destruction sequence has begun.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDisabled
        
            typedef void ( Tree_wrapper::*onDisabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDisabled"
                , onDisabled_function_type( &Tree_wrapper::default_onDisabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is disabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemDropped
        
            typedef void ( Tree_wrapper::*onDragDropItemDropped_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDragDropItemDropped"
                , onDragDropItemDropped_function_type( &Tree_wrapper::default_onDragDropItemDropped )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemEnters
        
            typedef void ( Tree_wrapper::*onDragDropItemEnters_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDragDropItemEnters"
                , onDragDropItemEnters_function_type( &Tree_wrapper::default_onDragDropItemEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemLeaves
        
            typedef void ( Tree_wrapper::*onDragDropItemLeaves_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Tree_exposer.def( 
                "onDragDropItemLeaves"
                , onDragDropItemLeaves_function_type( &Tree_wrapper::default_onDragDropItemLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onEnabled
        
            typedef void ( Tree_wrapper::*onEnabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onEnabled"
                , onEnabled_function_type( &Tree_wrapper::default_onEnabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is enabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onFontChanged
        
            typedef void ( Tree_wrapper::*onFontChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onFontChanged"
                , onFontChanged_function_type( &Tree_wrapper::default_onFontChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's font is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onHidden
        
            typedef void ( Tree_wrapper::*onHidden_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onHidden"
                , onHidden_function_type( &Tree_wrapper::default_onHidden )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is hidden.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onHorizontalAlignmentChanged
        
            typedef void ( Tree_wrapper::*onHorizontalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onHorizontalAlignmentChanged"
                , onHorizontalAlignmentChanged_function_type( &Tree_wrapper::default_onHorizontalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the horizontal alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onIDChanged
        
            typedef void ( Tree_wrapper::*onIDChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onIDChanged"
                , onIDChanged_function_type( &Tree_wrapper::default_onIDChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's client assigned ID is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInheritsAlphaChanged
        
            typedef void ( Tree_wrapper::*onInheritsAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onInheritsAlphaChanged"
                , onInheritsAlphaChanged_function_type( &Tree_wrapper::default_onInheritsAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for inheriting alpha-blending\n\
                    is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInvalidated
        
            typedef void ( Tree_wrapper::*onInvalidated_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onInvalidated"
                , onInvalidated_function_type( &Tree_wrapper::default_onInvalidated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gets invalidated.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onKeyDown
        
            typedef void ( Tree_wrapper::*onKeyDown_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Tree_exposer.def( 
                "onKeyDown"
                , onKeyDown_function_type( &Tree_wrapper::default_onKeyDown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a key as been depressed while this window has input\n\
                    focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'scancode' field is set to the Key.Scan value\n\
                    representing the key that was pressed, and whose 'sysKeys' field\n\
                    represents the combination of SystemKey that were active when the event\n\
                    was generated.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onKeyUp
        
            typedef void ( Tree_wrapper::*onKeyUp_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Tree_exposer.def( 
                "onKeyUp"
                , onKeyUp_function_type( &Tree_wrapper::default_onKeyUp )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a key as been released while this window has input\n\
                    focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'scancode' field is set to the Key.Scan value\n\
                    representing the key that was released, and whose 'sysKeys' field\n\
                    represents the combination of SystemKey that were active when the event\n\
                    was generated.  All other fields should be considered as 'junk'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMarginChanged
        
            typedef void ( Tree_wrapper::*onMarginChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMarginChanged"
                , onMarginChanged_function_type( &Tree_wrapper::default_onMarginChanged )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onMouseButtonUp
        
            typedef void ( Tree_wrapper::*onMouseButtonUp_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseButtonUp"
                , onMouseButtonUp_function_type( &Tree_wrapper::default_onMouseButtonUp )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been released within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseClicked
        
            typedef void ( Tree_wrapper::*onMouseClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseClicked"
                , onMouseClicked_function_type( &Tree_wrapper::default_onMouseClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been clicked (that is depressed\n\
                    and then released, within a specified time) within this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseDoubleClicked
        
            typedef void ( Tree_wrapper::*onMouseDoubleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseDoubleClicked"
                , onMouseDoubleClicked_function_type( &Tree_wrapper::default_onMouseDoubleClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been double-clicked within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEnters
        
            typedef void ( Tree_wrapper::*onMouseEnters_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseEnters"
                , onMouseEnters_function_type( &Tree_wrapper::default_onMouseEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area and\n\
                    is actually over some part of this windows surface and not, for\n\
                    instance over a child window - even though technically in those cases\n\
                    the mouse is also within this Window's area, the handler will not be\n\
                    called.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseEntersArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEntersArea
        
            typedef void ( Tree_wrapper::*onMouseEntersArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseEntersArea"
                , onMouseEntersArea_function_type( &Tree_wrapper::default_onMouseEntersArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeaves
        
            typedef void ( Tree_wrapper::*onMouseLeaves_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseLeaves"
                , onMouseLeaves_function_type( &Tree_wrapper::default_onMouseLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor is no longer over this window's\n\
                    surface area.  This will be called when the mouse is not over a part\n\
                    of this Window's actual surface - even though technically the mouse is\n\
                    still within the Window's area, for example if the mouse moves over a\n\
                    child window.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseLeavesArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeavesArea
        
            typedef void ( Tree_wrapper::*onMouseLeavesArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseLeavesArea"
                , onMouseLeavesArea_function_type( &Tree_wrapper::default_onMouseLeavesArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has left this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseTripleClicked
        
            typedef void ( Tree_wrapper::*onMouseTripleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMouseTripleClicked"
                , onMouseTripleClicked_function_type( &Tree_wrapper::default_onMouseTripleClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been triple-clicked within this\n\
                    window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMoved
        
            typedef void ( Tree_wrapper::*onMoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onMoved"
                , onMoved_function_type( &Tree_wrapper::default_onMoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's position changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::NamedElement::onNameChanged
        
            typedef void ( Tree_wrapper::*onNameChanged_function_type )( ::CEGUI::NamedElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onNameChanged"
                , onNameChanged_function_type( &Tree_wrapper::default_onNameChanged )
                , ( bp::arg("e") )
                , "*!\n\
                 Handler called when the element's name changes.\n\
            \n\
                @param e\n\
                    NamedElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onNonClientChanged
        
            typedef void ( Tree_wrapper::*onNonClientChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onNonClientChanged"
                , onNonClientChanged_function_type( &Tree_wrapper::default_onNonClientChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the element's non-client setting, affecting it's\n\
                    position and size relative to it's parent is changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentDestroyChanged
        
            typedef void ( Tree_wrapper::*onParentDestroyChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onParentDestroyChanged"
                , onParentDestroyChanged_function_type( &Tree_wrapper::default_onParentDestroyChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being destroyed\n\
                    automatically be it's parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentSized
        
            typedef void ( Tree_wrapper::*onParentSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onParentSized"
                , onParentSized_function_type( &Tree_wrapper::default_onParentSized )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's parent window has been resized.  If\n\
                    this window is the root  GUI Sheet window, this call will be made when\n\
                    the display size changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the the\n\
                    window that caused the event; this is typically either this window's\n\
                    parent window, or NULL to indicate the screen size has changed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingEnded
        
            typedef void ( Tree_wrapper::*onRenderingEnded_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onRenderingEnded"
                , onRenderingEnded_function_type( &Tree_wrapper::default_onRenderingEnded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has ended.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingStarted
        
            typedef void ( Tree_wrapper::*onRenderingStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onRenderingStarted"
                , onRenderingStarted_function_type( &Tree_wrapper::default_onRenderingStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has started.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRotated
        
            typedef void ( Tree_wrapper::*onRotated_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onRotated"
                , onRotated_function_type( &Tree_wrapper::default_onRotated )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onShown
        
            typedef void ( Tree_wrapper::*onShown_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onShown"
                , onShown_function_type( &Tree_wrapper::default_onShown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is shown (made visible).\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onTextChanged
        
            typedef void ( Tree_wrapper::*onTextChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onTextChanged"
                , onTextChanged_function_type( &Tree_wrapper::default_onTextChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's text is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onTextParsingChanged
        
            typedef void ( Tree_wrapper::*onTextParsingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onTextParsingChanged"
                , onTextParsingChanged_function_type( &Tree_wrapper::default_onTextParsingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for whether text parsing is\n\
                    enabled is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onVerticalAlignmentChanged
        
            typedef void ( Tree_wrapper::*onVerticalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Tree_exposer.def( 
                "onVerticalAlignmentChanged"
                , onVerticalAlignmentChanged_function_type( &Tree_wrapper::default_onVerticalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the vertical alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererAttached
        
            typedef void ( Tree_wrapper::*onWindowRendererAttached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onWindowRendererAttached"
                , onWindowRendererAttached_function_type( &Tree_wrapper::default_onWindowRendererAttached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a new window renderer object is attached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got a new\n\
                      window renderer attached. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererDetached
        
            typedef void ( Tree_wrapper::*onWindowRendererDetached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onWindowRendererDetached"
                , onWindowRendererDetached_function_type( &Tree_wrapper::default_onWindowRendererDetached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the currently attached window renderer object is detached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got lost its\n\
                      window renderer. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onZChange_impl
        
            typedef void ( Tree_wrapper::*onZChange_impl_function_type )(  ) ;
            
            Tree_exposer.def( 
                "onZChange_impl"
                , onZChange_impl_function_type( &Tree_wrapper::default_onZChange_impl )
                , "*!\n\
            \n\
                Notify 'this' and all siblings of a ZOrder change event\n\
            *\n" );
        
        }
        { //::CEGUI::Window::onZChanged
        
            typedef void ( Tree_wrapper::*onZChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Tree_exposer.def( 
                "onZChanged"
                , onZChanged_function_type( &Tree_wrapper::default_onZChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the z-order position of this window has changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::performChildWindowLayout
        
            typedef void ( ::CEGUI::Window::*performChildWindowLayout_function_type )( bool,bool ) ;
            typedef void ( Tree_wrapper::*default_performChildWindowLayout_function_type )( bool,bool ) ;
            
            Tree_exposer.def( 
                "performChildWindowLayout"
                , performChildWindowLayout_function_type(&::CEGUI::Window::performChildWindowLayout)
                , default_performChildWindowLayout_function_type(&Tree_wrapper::default_performChildWindowLayout)
                , ( bp::arg("nonclient_sized_hint")=(bool)(false), bp::arg("client_sized_hint")=(bool)(false) ) );
        
        }
        { //::CEGUI::Window::performCopy
        
            typedef bool ( ::CEGUI::Window::*performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Tree_wrapper::*default_performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            
            Tree_exposer.def( 
                "performCopy"
                , performCopy_function_type(&::CEGUI::Window::performCopy)
                , default_performCopy_function_type(&Tree_wrapper::default_performCopy)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::performCut
        
            typedef bool ( ::CEGUI::Window::*performCut_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Tree_wrapper::*default_performCut_function_type )( ::CEGUI::Clipboard & ) ;
            
            Tree_exposer.def( 
                "performCut"
                , performCut_function_type(&::CEGUI::Window::performCut)
                , default_performCut_function_type(&Tree_wrapper::default_performCut)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::performPaste
        
            typedef bool ( ::CEGUI::Window::*performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Tree_wrapper::*default_performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            
            Tree_exposer.def( 
                "performPaste"
                , performPaste_function_type(&::CEGUI::Window::performPaste)
                , default_performPaste_function_type(&Tree_wrapper::default_performPaste)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Window::queueGeometry
        
            typedef void ( Tree_wrapper::*queueGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Tree_exposer.def( 
                "queueGeometry"
                , queueGeometry_function_type( &Tree_wrapper::queueGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with positioning, clipping and\n\
                    queueing of window geometry to RenderingSurfaces.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf and is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::releaseRenderingWindow
        
            typedef void ( Tree_wrapper::*releaseRenderingWindow_function_type )(  ) ;
            
            Tree_exposer.def( 
                "releaseRenderingWindow"
                , releaseRenderingWindow_function_type( &Tree_wrapper::releaseRenderingWindow )
                , "! helper to clean up the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::removeChild_impl
        
            typedef void ( Tree_wrapper::*removeChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            Tree_exposer.def( 
                "removeChild_impl"
                , removeChild_impl_function_type( &Tree_wrapper::default_removeChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.removeChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Window::removeWindowFromDrawList
        
            typedef void ( Tree_wrapper::*removeWindowFromDrawList_function_type )( ::CEGUI::Window const & ) ;
            
            Tree_exposer.def( 
                "removeWindowFromDrawList"
                , removeWindowFromDrawList_function_type( &Tree_wrapper::removeWindowFromDrawList )
                , ( bp::arg("wnd") )
                , "*!\n\
                \n\
                    Removes the window from the drawing list.  If the window is not attached\n\
                    to the drawing list then nothing happens.\n\
            \n\
                @param wnd\n\
                    Window object to be removed from the drawing list.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            typedef void ( Tree_wrapper::*default_setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            
            Tree_exposer.def( 
                "setArea"
                , setArea_function_type(&::CEGUI::Element::setArea)
                , default_setArea_function_type(&Tree_wrapper::default_setArea)
                , ( bp::arg("pos"), bp::arg("size") ) );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const & ) ;
            
            Tree_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("xpos"), bp::arg("ypos"), bp::arg("width"), bp::arg("height") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::URect const & ) ;
            
            Tree_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("area") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Window::setArea_impl
        
            typedef void ( Tree_wrapper::*setArea_impl_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const &,bool,bool ) ;
            
            Tree_exposer.def( 
                "setArea_impl"
                , setArea_impl_function_type( &Tree_wrapper::default_setArea_impl )
                , ( bp::arg("pos"), bp::arg("size"), bp::arg("topLeftSizing")=(bool)(false), bp::arg("fireEvents")=(bool)(true) )
                , "! opydoc Element.setArea_impl\n" );
        
        }
        { //::CEGUI::Element::setHorizontalAlignment
        
            typedef void ( ::CEGUI::Element::*setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            typedef void ( Tree_wrapper::*default_setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            
            Tree_exposer.def( 
                "setHorizontalAlignment"
                , setHorizontalAlignment_function_type(&::CEGUI::Element::setHorizontalAlignment)
                , default_setHorizontalAlignment_function_type(&Tree_wrapper::default_setHorizontalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::Window::setMargin
        
            typedef void ( ::CEGUI::Window::*setMargin_function_type )( ::CEGUI::UBox const & ) ;
            typedef void ( Tree_wrapper::*default_setMargin_function_type )( ::CEGUI::UBox const & ) ;
            
            Tree_exposer.def( 
                "setMargin"
                , setMargin_function_type(&::CEGUI::Window::setMargin)
                , default_setMargin_function_type(&Tree_wrapper::default_setMargin)
                , ( bp::arg("margin") ) );
        
        }
        { //::CEGUI::NamedElement::setName
        
            typedef void ( ::CEGUI::NamedElement::*setName_function_type )( ::CEGUI::String const & ) ;
            typedef void ( Tree_wrapper::*default_setName_function_type )( ::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "setName"
                , setName_function_type(&::CEGUI::NamedElement::setName)
                , default_setName_function_type(&Tree_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::CEGUI::Window::setParent
        
            typedef void ( Tree_wrapper::*setParent_function_type )( ::CEGUI::Element * ) ;
            
            Tree_exposer.def( 
                "setParent"
                , setParent_function_type( &Tree_wrapper::default_setParent )
                , ( bp::arg("parent") )
                , "*!\n\
                \n\
                    Set the parent window for this window object.\n\
            \n\
                @param parent\n\
                    Pointer to a Window object that is to be assigned as the parent to this\n\
                    Window.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setVerticalAlignment
        
            typedef void ( ::CEGUI::Element::*setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            typedef void ( Tree_wrapper::*default_setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            
            Tree_exposer.def( 
                "setVerticalAlignment"
                , setVerticalAlignment_function_type(&::CEGUI::Element::setVerticalAlignment)
                , default_setVerticalAlignment_function_type(&Tree_wrapper::default_setVerticalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Tree_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Tree_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Tree_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            
            Tree_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Tree_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("group"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::Window::transferChildSurfaces
        
            typedef void ( Tree_wrapper::*transferChildSurfaces_function_type )(  ) ;
            
            Tree_exposer.def( 
                "transferChildSurfaces"
                , transferChildSurfaces_function_type( &Tree_wrapper::transferChildSurfaces )
                , "! transfer RenderingSurfaces to be owned by our target RenderingSurface.\n" );
        
        }
        { //::CEGUI::Window::update
        
            typedef void ( ::CEGUI::Window::*update_function_type )( float ) ;
            typedef void ( Tree_wrapper::*default_update_function_type )( float ) ;
            
            Tree_exposer.def( 
                "update"
                , update_function_type(&::CEGUI::Window::update)
                , default_update_function_type(&Tree_wrapper::default_update)
                , ( bp::arg("elapsed") ) );
        
        }
        { //::CEGUI::Window::updateGeometryRenderSettings
        
            typedef void ( Tree_wrapper::*updateGeometryRenderSettings_function_type )(  ) ;
            
            Tree_exposer.def( 
                "updateGeometryRenderSettings"
                , updateGeometryRenderSettings_function_type( &Tree_wrapper::updateGeometryRenderSettings )
                , "*!\n\
            \n\
                Update position and clip region on this Windows geometry  rendering\n\
                surface.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::updateSelf
        
            typedef void ( Tree_wrapper::*updateSelf_function_type )( float ) ;
            
            Tree_exposer.def( 
                "updateSelf"
                , updateSelf_function_type( &Tree_wrapper::default_updateSelf )
                , ( bp::arg("elapsed") )
                , "*************************************************************************\n\
                    Implementation Functions\n\
                *************************************************************************\n\
                *!\n\
                \n\
                    Perform actual update processing for this Window.\n\
            \n\
                @param elapsed\n\
                    float value indicating the number of seconds elapsed since the last\n\
                    update call.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::validateWindowRenderer
        
            typedef bool ( Tree_wrapper::*validateWindowRenderer_function_type )( ::CEGUI::WindowRenderer const * ) const;
            
            Tree_exposer.def( 
                "validateWindowRenderer"
                , validateWindowRenderer_function_type( &Tree_wrapper::default_validateWindowRenderer )
                , ( bp::arg("renderer") )
                , "*!\n\
                \n\
                    Function used in checking if a WindowRenderer is valid for this window.\n\
            \n\
                @param renderer\n\
                  Window renderer that will be checked (it can be null!)\n\
            \n\
                @return\n\
                    Returns true if the given WindowRenderer class name is valid for this window.\n\
                    False if not.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::writeAutoChildWindowXML
        
            typedef bool ( Tree_wrapper::*writeAutoChildWindowXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Tree_exposer.def( 
                "writeAutoChildWindowXML"
                , writeAutoChildWindowXML_function_type( &Tree_wrapper::default_writeAutoChildWindowXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeChildWindowsXML
        
            typedef int ( Tree_wrapper::*writeChildWindowsXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Tree_exposer.def( 
                "writeChildWindowsXML"
                , writeChildWindowsXML_function_type( &Tree_wrapper::default_writeChildWindowsXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writePropertiesXML
        
            typedef int ( Tree_wrapper::*writePropertiesXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Tree_exposer.def( 
                "writePropertiesXML"
                , writePropertiesXML_function_type( &Tree_wrapper::default_writePropertiesXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeXMLToStream
        
            typedef void ( ::CEGUI::Window::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            typedef void ( Tree_wrapper::*default_writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Tree_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type(&::CEGUI::Window::writeXMLToStream)
                , default_writeXMLToStream_function_type(&Tree_wrapper::default_writeXMLToStream)
                , ( bp::arg("xml_stream") ) );
        
        }
    }

}
