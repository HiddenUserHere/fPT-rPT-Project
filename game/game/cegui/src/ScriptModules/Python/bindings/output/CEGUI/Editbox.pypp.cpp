// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "Editbox.pypp.hpp"

namespace bp = boost::python;

struct Editbox_wrapper : CEGUI::Editbox, bp::wrapper< CEGUI::Editbox > {

    Editbox_wrapper(::CEGUI::String const & type, ::CEGUI::String const & name )
    : CEGUI::Editbox( boost::ref(type), boost::ref(name) )
      , bp::wrapper< CEGUI::Editbox >(){
        // constructor
    
    }

    void clearSelection(  ){
        CEGUI::Editbox::clearSelection(  );
    }

    void eraseSelectedText( bool modify_text=true ){
        CEGUI::Editbox::eraseSelectedText( modify_text );
    }

    ::CEGUI::RegexMatcher::MatchState getStringMatchState( ::CEGUI::String const & str ) const {
        return CEGUI::Editbox::getStringMatchState( boost::ref(str) );
    }

    ::size_t getTextIndexFromPosition( ::CEGUI::Vector2f const & pt ) const {
        return CEGUI::Editbox::getTextIndexFromPosition( boost::ref(pt) );
    }

    void handleBackspace(  ){
        CEGUI::Editbox::handleBackspace(  );
    }

    void handleCharLeft( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleCharLeft( sysKeys );
    }

    void handleCharRight( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleCharRight( sysKeys );
    }

    void handleDelete(  ){
        CEGUI::Editbox::handleDelete(  );
    }

    void handleEnd( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleEnd( sysKeys );
    }

    void handleHome( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleHome( sysKeys );
    }

    bool handleValidityChangeForString( ::CEGUI::String const & str ){
        return CEGUI::Editbox::handleValidityChangeForString( boost::ref(str) );
    }

    void handleWordLeft( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleWordLeft( sysKeys );
    }

    void handleWordRight( ::CEGUI::uint sysKeys ){
        CEGUI::Editbox::handleWordRight( sysKeys );
    }

    virtual void onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureLost = this->get_override( "onCaptureLost" ) )
            func_onCaptureLost( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onCaptureLost( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureLost( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onCaptureLost( boost::ref(e) );
    }

    virtual void onCaretMoved( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaretMoved = this->get_override( "onCaretMoved" ) )
            func_onCaretMoved( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onCaretMoved( boost::ref(e) );
        }
    }
    
    virtual void default_onCaretMoved( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onCaretMoved( boost::ref(e) );
    }

    virtual void onCharacter( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onCharacter = this->get_override( "onCharacter" ) )
            func_onCharacter( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onCharacter( boost::ref(e) );
        }
    }
    
    virtual void default_onCharacter( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Editbox::onCharacter( boost::ref(e) );
    }

    virtual void onEditboxFullEvent( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onEditboxFullEvent = this->get_override( "onEditboxFullEvent" ) )
            func_onEditboxFullEvent( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onEditboxFullEvent( boost::ref(e) );
        }
    }
    
    virtual void default_onEditboxFullEvent( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onEditboxFullEvent( boost::ref(e) );
    }

    virtual void onKeyDown( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyDown = this->get_override( "onKeyDown" ) )
            func_onKeyDown( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onKeyDown( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyDown( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Editbox::onKeyDown( boost::ref(e) );
    }

    virtual void onMaskCodePointChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMaskCodePointChanged = this->get_override( "onMaskCodePointChanged" ) )
            func_onMaskCodePointChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMaskCodePointChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMaskCodePointChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onMaskCodePointChanged( boost::ref(e) );
    }

    virtual void onMaskedRenderingModeChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMaskedRenderingModeChanged = this->get_override( "onMaskedRenderingModeChanged" ) )
            func_onMaskedRenderingModeChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMaskedRenderingModeChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMaskedRenderingModeChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onMaskedRenderingModeChanged( boost::ref(e) );
    }

    virtual void onMaximumTextLengthChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMaximumTextLengthChanged = this->get_override( "onMaximumTextLengthChanged" ) )
            func_onMaximumTextLengthChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMaximumTextLengthChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMaximumTextLengthChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onMaximumTextLengthChanged( boost::ref(e) );
    }

    virtual void onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonDown = this->get_override( "onMouseButtonDown" ) )
            func_onMouseButtonDown( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMouseButtonDown( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonDown( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Editbox::onMouseButtonDown( boost::ref(e) );
    }

    virtual void onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseButtonUp = this->get_override( "onMouseButtonUp" ) )
            func_onMouseButtonUp( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMouseButtonUp( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseButtonUp( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Editbox::onMouseButtonUp( boost::ref(e) );
    }

    virtual void onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseDoubleClicked = this->get_override( "onMouseDoubleClicked" ) )
            func_onMouseDoubleClicked( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMouseDoubleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseDoubleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Editbox::onMouseDoubleClicked( boost::ref(e) );
    }

    virtual void onMouseMove( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseMove = this->get_override( "onMouseMove" ) )
            func_onMouseMove( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMouseMove( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseMove( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Editbox::onMouseMove( boost::ref(e) );
    }

    virtual void onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseTripleClicked = this->get_override( "onMouseTripleClicked" ) )
            func_onMouseTripleClicked( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onMouseTripleClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseTripleClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Editbox::onMouseTripleClicked( boost::ref(e) );
    }

    virtual void onReadOnlyChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onReadOnlyChanged = this->get_override( "onReadOnlyChanged" ) )
            func_onReadOnlyChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onReadOnlyChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onReadOnlyChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onReadOnlyChanged( boost::ref(e) );
    }

    virtual void onTextAcceptedEvent( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextAcceptedEvent = this->get_override( "onTextAcceptedEvent" ) )
            func_onTextAcceptedEvent( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onTextAcceptedEvent( boost::ref(e) );
        }
    }
    
    virtual void default_onTextAcceptedEvent( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onTextAcceptedEvent( boost::ref(e) );
    }

    virtual void onTextChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextChanged = this->get_override( "onTextChanged" ) )
            func_onTextChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onTextChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onTextChanged( boost::ref(e) );
    }

    virtual void onTextSelectionChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextSelectionChanged = this->get_override( "onTextSelectionChanged" ) )
            func_onTextSelectionChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onTextSelectionChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextSelectionChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onTextSelectionChanged( boost::ref(e) );
    }

    virtual void onTextValidityChanged( ::CEGUI::RegexMatchStateEventArgs & e ){
        if( bp::override func_onTextValidityChanged = this->get_override( "onTextValidityChanged" ) )
            func_onTextValidityChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onTextValidityChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextValidityChanged( ::CEGUI::RegexMatchStateEventArgs & e ){
        CEGUI::Editbox::onTextValidityChanged( boost::ref(e) );
    }

    virtual void onValidationStringChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onValidationStringChanged = this->get_override( "onValidationStringChanged" ) )
            func_onValidationStringChanged( boost::ref(e) );
        else{
            this->CEGUI::Editbox::onValidationStringChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onValidationStringChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Editbox::onValidationStringChanged( boost::ref(e) );
    }

    virtual bool performCopy( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCopy = this->get_override( "performCopy" ) )
            return func_performCopy( boost::ref(clipboard) );
        else{
            return this->CEGUI::Editbox::performCopy( boost::ref(clipboard) );
        }
    }
    
    bool default_performCopy( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Editbox::performCopy( boost::ref(clipboard) );
    }

    virtual bool performCut( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performCut = this->get_override( "performCut" ) )
            return func_performCut( boost::ref(clipboard) );
        else{
            return this->CEGUI::Editbox::performCut( boost::ref(clipboard) );
        }
    }
    
    bool default_performCut( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Editbox::performCut( boost::ref(clipboard) );
    }

    virtual bool performPaste( ::CEGUI::Clipboard & clipboard ) {
        if( bp::override func_performPaste = this->get_override( "performPaste" ) )
            return func_performPaste( boost::ref(clipboard) );
        else{
            return this->CEGUI::Editbox::performPaste( boost::ref(clipboard) );
        }
    }
    
    bool default_performPaste( ::CEGUI::Clipboard & clipboard ) {
        return CEGUI::Editbox::performPaste( boost::ref(clipboard) );
    }

    virtual bool validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        if( bp::override func_validateWindowRenderer = this->get_override( "validateWindowRenderer" ) )
            return func_validateWindowRenderer( boost::python::ptr(renderer) );
        else{
            return this->CEGUI::Editbox::validateWindowRenderer( boost::python::ptr(renderer) );
        }
    }
    
    virtual bool default_validateWindowRenderer( ::CEGUI::WindowRenderer const * renderer ) const {
        return CEGUI::Editbox::validateWindowRenderer( boost::python::ptr(renderer) );
    }

    virtual void addChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_addChild_impl = this->get_override( "addChild_impl" ) )
            func_addChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::addChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_addChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::addChild_impl( boost::python::ptr(element) );
    }

    void addElementProperties(  ){
        CEGUI::Element::addElementProperties(  );
    }

    void addNamedElementProperties(  ){
        CEGUI::NamedElement::addNamedElementProperties(  );
    }

    void addWindowProperties(  ){
        CEGUI::Window::addWindowProperties(  );
    }

    void addWindowToDrawList( ::CEGUI::Window & wnd, bool at_back=false ){
        CEGUI::Window::addWindowToDrawList( boost::ref(wnd), at_back );
    }

    void allocateRenderingWindow(  ){
        CEGUI::Window::allocateRenderingWindow(  );
    }

    virtual void banPropertiesForAutoWindow(  ){
        if( bp::override func_banPropertiesForAutoWindow = this->get_override( "banPropertiesForAutoWindow" ) )
            func_banPropertiesForAutoWindow(  );
        else{
            this->CEGUI::Window::banPropertiesForAutoWindow(  );
        }
    }
    
    virtual void default_banPropertiesForAutoWindow(  ){
        CEGUI::Window::banPropertiesForAutoWindow( );
    }

    virtual void beginInitialisation(  ) {
        if( bp::override func_beginInitialisation = this->get_override( "beginInitialisation" ) )
            func_beginInitialisation(  );
        else{
            this->CEGUI::Window::beginInitialisation(  );
        }
    }
    
    void default_beginInitialisation(  ) {
        CEGUI::Window::beginInitialisation( );
    }

    void bufferGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::bufferGeometry( boost::ref(ctx) );
    }

    virtual void cleanupChildren(  ){
        if( bp::override func_cleanupChildren = this->get_override( "cleanupChildren" ) )
            func_cleanupChildren(  );
        else{
            this->CEGUI::Window::cleanupChildren(  );
        }
    }
    
    virtual void default_cleanupChildren(  ){
        CEGUI::Window::cleanupChildren( );
    }

    virtual void cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_cloneChildWidgetsTo = this->get_override( "cloneChildWidgetsTo" ) )
            func_cloneChildWidgetsTo( boost::ref(target) );
        else{
            this->CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
        }
    }
    
    void default_cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
    }

    virtual void clonePropertiesTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_clonePropertiesTo = this->get_override( "clonePropertiesTo" ) )
            func_clonePropertiesTo( boost::ref(target) );
        else{
            this->CEGUI::Window::clonePropertiesTo( boost::ref(target) );
        }
    }
    
    void default_clonePropertiesTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::clonePropertiesTo( boost::ref(target) );
    }

    virtual void destroy(  ) {
        if( bp::override func_destroy = this->get_override( "destroy" ) )
            func_destroy(  );
        else{
            this->CEGUI::Window::destroy(  );
        }
    }
    
    void default_destroy(  ) {
        CEGUI::Window::destroy( );
    }

    virtual void drawSelf( ::CEGUI::RenderingContext const & ctx ){
        if( bp::override func_drawSelf = this->get_override( "drawSelf" ) )
            func_drawSelf( boost::ref(ctx) );
        else{
            this->CEGUI::Window::drawSelf( boost::ref(ctx) );
        }
    }
    
    virtual void default_drawSelf( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::drawSelf( boost::ref(ctx) );
    }

    virtual void endInitialisation(  ) {
        if( bp::override func_endInitialisation = this->get_override( "endInitialisation" ) )
            func_endInitialisation(  );
        else{
            this->CEGUI::Window::endInitialisation(  );
        }
    }
    
    void default_endInitialisation(  ) {
        CEGUI::Window::endInitialisation( );
    }

    void fireAreaChangeEvents( bool const moved, bool const sized ){
        CEGUI::Element::fireAreaChangeEvents( moved, sized );
    }

    virtual void fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        if( bp::override func_fireEvent = this->get_override( "fireEvent" ) )
            func_fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        else{
            this->CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        }
    }
    
    void default_fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
    }

    void fireEvent_impl( ::CEGUI::String const & name, ::CEGUI::EventArgs & args ){
        CEGUI::EventSet::fireEvent_impl( boost::ref(name), boost::ref(args) );
    }

    void generateAutoRepeatEvent( ::CEGUI::MouseButton button ){
        CEGUI::Window::generateAutoRepeatEvent( button );
    }

    virtual ::CEGUI::NamedElement * getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        if( bp::override func_getChildByNamePath_impl = this->get_override( "getChildByNamePath_impl" ) )
            return func_getChildByNamePath_impl( boost::ref(name_path) );
        else{
            return this->CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNamePath_impl( ::CEGUI::String const & name_path ) const {
        return CEGUI::NamedElement::getChildByNamePath_impl( boost::ref(name_path) );
    }

    virtual ::CEGUI::NamedElement * getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        if( bp::override func_getChildByNameRecursive_impl = this->get_override( "getChildByNameRecursive_impl" ) )
            return func_getChildByNameRecursive_impl( boost::ref(name) );
        else{
            return this->CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
        }
    }
    
    virtual ::CEGUI::NamedElement * default_getChildByNameRecursive_impl( ::CEGUI::String const & name ) const {
        return CEGUI::NamedElement::getChildByNameRecursive_impl( boost::ref(name) );
    }

    virtual ::CEGUI::Rectf getHitTestRect_impl(  ) const {
        if( bp::override func_getHitTestRect_impl = this->get_override( "getHitTestRect_impl" ) )
            return func_getHitTestRect_impl(  );
        else{
            return this->CEGUI::Window::getHitTestRect_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getHitTestRect_impl(  ) const {
        return CEGUI::Window::getHitTestRect_impl( );
    }

    virtual ::CEGUI::Rectf getInnerRectClipper_impl(  ) const {
        if( bp::override func_getInnerRectClipper_impl = this->get_override( "getInnerRectClipper_impl" ) )
            return func_getInnerRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getInnerRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getInnerRectClipper_impl(  ) const {
        return CEGUI::Window::getInnerRectClipper_impl( );
    }

    virtual ::CEGUI::Rectf getOuterRectClipper_impl(  ) const {
        if( bp::override func_getOuterRectClipper_impl = this->get_override( "getOuterRectClipper_impl" ) )
            return func_getOuterRectClipper_impl(  );
        else{
            return this->CEGUI::Window::getOuterRectClipper_impl(  );
        }
    }
    
    virtual ::CEGUI::Rectf default_getOuterRectClipper_impl(  ) const {
        return CEGUI::Window::getOuterRectClipper_impl( );
    }

    ::CEGUI::Rectf getParentElementClipIntersection( ::CEGUI::Rectf const & unclipped_area ) const {
        return CEGUI::Window::getParentElementClipIntersection( boost::ref(unclipped_area) );
    }

    virtual void getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        if( bp::override func_getRenderingContext_impl = this->get_override( "getRenderingContext_impl" ) )
            func_getRenderingContext_impl( boost::ref(ctx) );
        else{
            this->CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
        }
    }
    
    void default_getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
    }

    ::CEGUI::ScriptModule * getScriptModule(  ) const {
        return CEGUI::EventSet::getScriptModule(  );
    }

    virtual ::CEGUI::Rectf getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedInnerRect_impl = this->get_override( "getUnclippedInnerRect_impl" ) )
            return func_getUnclippedInnerRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedInnerRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Window::getUnclippedInnerRect_impl( skipAllPixelAlignment );
    }

    virtual ::CEGUI::Rectf getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        if( bp::override func_getUnclippedOuterRect_impl = this->get_override( "getUnclippedOuterRect_impl" ) )
            return func_getUnclippedOuterRect_impl( skipAllPixelAlignment );
        else{
            return this->CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
        }
    }
    
    virtual ::CEGUI::Rectf default_getUnclippedOuterRect_impl( bool skipAllPixelAlignment ) const {
        return CEGUI::Element::getUnclippedOuterRect_impl( skipAllPixelAlignment );
    }

    ::CEGUI::Window const * getWindowAttachedToCommonAncestor( ::CEGUI::Window const & wnd ) const {
        return CEGUI::Window::getWindowAttachedToCommonAncestor( boost::ref(wnd) );
    }

    virtual bool handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        if( bp::override func_handleFontRenderSizeChange = this->get_override( "handleFontRenderSizeChange" ) )
            return func_handleFontRenderSizeChange( boost::ref(args) );
        else{
            return this->CEGUI::Window::handleFontRenderSizeChange( boost::ref(args) );
        }
    }
    
    virtual bool default_handleFontRenderSizeChange( ::CEGUI::EventArgs const & args ){
        return CEGUI::Window::handleFontRenderSizeChange( boost::ref(args) );
    }

    void initialiseClippers( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::initialiseClippers( boost::ref(ctx) );
    }

    virtual void initialiseComponents(  ) {
        if( bp::override func_initialiseComponents = this->get_override( "initialiseComponents" ) )
            func_initialiseComponents(  );
        else{
            this->CEGUI::Window::initialiseComponents(  );
        }
    }
    
    void default_initialiseComponents(  ) {
        CEGUI::Window::initialiseComponents( );
    }

    void invalidate_impl( bool const recursive ){
        CEGUI::Window::invalidate_impl( recursive );
    }

    virtual bool isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        if( bp::override func_isHit = this->get_override( "isHit" ) )
            return func_isHit( boost::ref(position), allow_disabled );
        else{
            return this->CEGUI::Window::isHit( boost::ref(position), allow_disabled );
        }
    }
    
    bool default_isHit( ::CEGUI::Vector2f const & position, bool const allow_disabled=false ) const  {
        return CEGUI::Window::isHit( boost::ref(position), allow_disabled );
    }

    bool isHitTargetWindow( ::CEGUI::Vector2f const & position, bool allow_disabled ) const {
        return CEGUI::Window::isHitTargetWindow( boost::ref(position), allow_disabled );
    }

    bool isInnerRectSizeChanged(  ) const {
        return CEGUI::Element::isInnerRectSizeChanged(  );
    }

    bool isPropertyAtDefault( ::CEGUI::Property const * property ) const {
        return CEGUI::Window::isPropertyAtDefault( boost::python::ptr(property) );
    }

    bool isTopOfZOrder(  ) const {
        return CEGUI::Window::isTopOfZOrder(  );
    }

    void layoutLookNFeelChildWidgets(  ){
        CEGUI::Window::layoutLookNFeelChildWidgets(  );
    }

    void markCachedWindowRectsInvalid(  ){
        CEGUI::Window::markCachedWindowRectsInvalid(  );
    }

    virtual bool moveToFront_impl( bool wasClicked ){
        if( bp::override func_moveToFront_impl = this->get_override( "moveToFront_impl" ) )
            return func_moveToFront_impl( wasClicked );
        else{
            return this->CEGUI::Window::moveToFront_impl( wasClicked );
        }
    }
    
    virtual bool default_moveToFront_impl( bool wasClicked ){
        return CEGUI::Window::moveToFront_impl( wasClicked );
    }

    void notifyChildrenOfSizeChange( bool const non_client, bool const client ){
        CEGUI::Element::notifyChildrenOfSizeChange( non_client, client );
    }

    void notifyClippingChanged(  ){
        CEGUI::Window::notifyClippingChanged(  );
    }

    virtual void notifyScreenAreaChanged( bool recursive=true ) {
        if( bp::override func_notifyScreenAreaChanged = this->get_override( "notifyScreenAreaChanged" ) )
            func_notifyScreenAreaChanged( recursive );
        else{
            this->CEGUI::Window::notifyScreenAreaChanged( recursive );
        }
    }
    
    void default_notifyScreenAreaChanged( bool recursive=true ) {
        CEGUI::Window::notifyScreenAreaChanged( recursive );
    }

    virtual void onActivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onActivated = this->get_override( "onActivated" ) )
            func_onActivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onActivated( boost::ref(e) );
        }
    }
    
    virtual void default_onActivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onActivated( boost::ref(e) );
    }

    virtual void onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlphaChanged = this->get_override( "onAlphaChanged" ) )
            func_onAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlphaChanged( boost::ref(e) );
    }

    virtual void onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onAlwaysOnTopChanged = this->get_override( "onAlwaysOnTopChanged" ) )
            func_onAlwaysOnTopChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onAlwaysOnTopChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onAlwaysOnTopChanged( boost::ref(e) );
    }

    virtual void onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onCaptureGained = this->get_override( "onCaptureGained" ) )
            func_onCaptureGained( boost::ref(e) );
        else{
            this->CEGUI::Window::onCaptureGained( boost::ref(e) );
        }
    }
    
    virtual void default_onCaptureGained( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onCaptureGained( boost::ref(e) );
    }

    virtual void onChildAdded( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildAdded = this->get_override( "onChildAdded" ) )
            func_onChildAdded( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildAdded( boost::ref(e) );
        }
    }
    
    virtual void default_onChildAdded( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildAdded( boost::ref(e) );
    }

    virtual void onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onChildRemoved = this->get_override( "onChildRemoved" ) )
            func_onChildRemoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onChildRemoved( boost::ref(e) );
        }
    }
    
    virtual void default_onChildRemoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onChildRemoved( boost::ref(e) );
    }

    virtual void onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onClippingChanged = this->get_override( "onClippingChanged" ) )
            func_onClippingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onClippingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onClippingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onClippingChanged( boost::ref(e) );
    }

    virtual void onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        if( bp::override func_onDeactivated = this->get_override( "onDeactivated" ) )
            func_onDeactivated( boost::ref(e) );
        else{
            this->CEGUI::Window::onDeactivated( boost::ref(e) );
        }
    }
    
    virtual void default_onDeactivated( ::CEGUI::ActivationEventArgs & e ){
        CEGUI::Window::onDeactivated( boost::ref(e) );
    }

    virtual void onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDestructionStarted = this->get_override( "onDestructionStarted" ) )
            func_onDestructionStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onDestructionStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onDestructionStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDestructionStarted( boost::ref(e) );
    }

    virtual void onDisabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onDisabled = this->get_override( "onDisabled" ) )
            func_onDisabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onDisabled( boost::ref(e) );
        }
    }
    
    virtual void default_onDisabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onDisabled( boost::ref(e) );
    }

    virtual void onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemDropped = this->get_override( "onDragDropItemDropped" ) )
            func_onDragDropItemDropped( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemDropped( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemDropped( boost::ref(e) );
    }

    virtual void onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemEnters = this->get_override( "onDragDropItemEnters" ) )
            func_onDragDropItemEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemEnters( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemEnters( boost::ref(e) );
    }

    virtual void onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        if( bp::override func_onDragDropItemLeaves = this->get_override( "onDragDropItemLeaves" ) )
            func_onDragDropItemLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onDragDropItemLeaves( ::CEGUI::DragDropEventArgs & e ){
        CEGUI::Window::onDragDropItemLeaves( boost::ref(e) );
    }

    virtual void onEnabled( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onEnabled = this->get_override( "onEnabled" ) )
            func_onEnabled( boost::ref(e) );
        else{
            this->CEGUI::Window::onEnabled( boost::ref(e) );
        }
    }
    
    virtual void default_onEnabled( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onEnabled( boost::ref(e) );
    }

    virtual void onFontChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onFontChanged = this->get_override( "onFontChanged" ) )
            func_onFontChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onFontChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onFontChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onFontChanged( boost::ref(e) );
    }

    virtual void onHidden( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onHidden = this->get_override( "onHidden" ) )
            func_onHidden( boost::ref(e) );
        else{
            this->CEGUI::Window::onHidden( boost::ref(e) );
        }
    }
    
    virtual void default_onHidden( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onHidden( boost::ref(e) );
    }

    virtual void onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onHorizontalAlignmentChanged = this->get_override( "onHorizontalAlignmentChanged" ) )
            func_onHorizontalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onHorizontalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onHorizontalAlignmentChanged( boost::ref(e) );
    }

    virtual void onIDChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onIDChanged = this->get_override( "onIDChanged" ) )
            func_onIDChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onIDChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onIDChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onIDChanged( boost::ref(e) );
    }

    virtual void onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInheritsAlphaChanged = this->get_override( "onInheritsAlphaChanged" ) )
            func_onInheritsAlphaChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onInheritsAlphaChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInheritsAlphaChanged( boost::ref(e) );
    }

    virtual void onInvalidated( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onInvalidated = this->get_override( "onInvalidated" ) )
            func_onInvalidated( boost::ref(e) );
        else{
            this->CEGUI::Window::onInvalidated( boost::ref(e) );
        }
    }
    
    virtual void default_onInvalidated( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onInvalidated( boost::ref(e) );
    }

    virtual void onKeyUp( ::CEGUI::KeyEventArgs & e ){
        if( bp::override func_onKeyUp = this->get_override( "onKeyUp" ) )
            func_onKeyUp( boost::ref(e) );
        else{
            this->CEGUI::Window::onKeyUp( boost::ref(e) );
        }
    }
    
    virtual void default_onKeyUp( ::CEGUI::KeyEventArgs & e ){
        CEGUI::Window::onKeyUp( boost::ref(e) );
    }

    virtual void onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onMarginChanged = this->get_override( "onMarginChanged" ) )
            func_onMarginChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onMarginChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onMarginChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onMarginChanged( boost::ref(e) );
    }

    virtual void onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseClicked = this->get_override( "onMouseClicked" ) )
            func_onMouseClicked( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseClicked( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseClicked( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseClicked( boost::ref(e) );
    }

    virtual void onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEnters = this->get_override( "onMouseEnters" ) )
            func_onMouseEnters( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEnters( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEnters( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEnters( boost::ref(e) );
    }

    virtual void onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseEntersArea = this->get_override( "onMouseEntersArea" ) )
            func_onMouseEntersArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseEntersArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseEntersArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseEntersArea( boost::ref(e) );
    }

    virtual void onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeaves = this->get_override( "onMouseLeaves" ) )
            func_onMouseLeaves( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeaves( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeaves( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeaves( boost::ref(e) );
    }

    virtual void onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseLeavesArea = this->get_override( "onMouseLeavesArea" ) )
            func_onMouseLeavesArea( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseLeavesArea( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseLeavesArea( boost::ref(e) );
    }

    virtual void onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        if( bp::override func_onMouseWheel = this->get_override( "onMouseWheel" ) )
            func_onMouseWheel( boost::ref(e) );
        else{
            this->CEGUI::Window::onMouseWheel( boost::ref(e) );
        }
    }
    
    virtual void default_onMouseWheel( ::CEGUI::MouseEventArgs & e ){
        CEGUI::Window::onMouseWheel( boost::ref(e) );
    }

    virtual void onMoved( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onMoved = this->get_override( "onMoved" ) )
            func_onMoved( boost::ref(e) );
        else{
            this->CEGUI::Window::onMoved( boost::ref(e) );
        }
    }
    
    virtual void default_onMoved( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onMoved( boost::ref(e) );
    }

    virtual void onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        if( bp::override func_onNameChanged = this->get_override( "onNameChanged" ) )
            func_onNameChanged( boost::ref(e) );
        else{
            this->CEGUI::NamedElement::onNameChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNameChanged( ::CEGUI::NamedElementEventArgs & e ){
        CEGUI::NamedElement::onNameChanged( boost::ref(e) );
    }

    virtual void onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onNonClientChanged = this->get_override( "onNonClientChanged" ) )
            func_onNonClientChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onNonClientChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onNonClientChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onNonClientChanged( boost::ref(e) );
    }

    virtual void onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onParentDestroyChanged = this->get_override( "onParentDestroyChanged" ) )
            func_onParentDestroyChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onParentDestroyChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onParentDestroyChanged( boost::ref(e) );
    }

    virtual void onParentSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onParentSized = this->get_override( "onParentSized" ) )
            func_onParentSized( boost::ref(e) );
        else{
            this->CEGUI::Window::onParentSized( boost::ref(e) );
        }
    }
    
    virtual void default_onParentSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onParentSized( boost::ref(e) );
    }

    virtual void onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingEnded = this->get_override( "onRenderingEnded" ) )
            func_onRenderingEnded( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingEnded( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingEnded( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingEnded( boost::ref(e) );
    }

    virtual void onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onRenderingStarted = this->get_override( "onRenderingStarted" ) )
            func_onRenderingStarted( boost::ref(e) );
        else{
            this->CEGUI::Window::onRenderingStarted( boost::ref(e) );
        }
    }
    
    virtual void default_onRenderingStarted( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onRenderingStarted( boost::ref(e) );
    }

    virtual void onRotated( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onRotated = this->get_override( "onRotated" ) )
            func_onRotated( boost::ref(e) );
        else{
            this->CEGUI::Window::onRotated( boost::ref(e) );
        }
    }
    
    virtual void default_onRotated( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onRotated( boost::ref(e) );
    }

    virtual void onShown( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onShown = this->get_override( "onShown" ) )
            func_onShown( boost::ref(e) );
        else{
            this->CEGUI::Window::onShown( boost::ref(e) );
        }
    }
    
    virtual void default_onShown( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onShown( boost::ref(e) );
    }

    virtual void onSized( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onSized = this->get_override( "onSized" ) )
            func_onSized( boost::ref(e) );
        else{
            this->CEGUI::Window::onSized( boost::ref(e) );
        }
    }
    
    virtual void default_onSized( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Window::onSized( boost::ref(e) );
    }

    virtual void onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onTextParsingChanged = this->get_override( "onTextParsingChanged" ) )
            func_onTextParsingChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onTextParsingChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onTextParsingChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onTextParsingChanged( boost::ref(e) );
    }

    virtual void onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        if( bp::override func_onVerticalAlignmentChanged = this->get_override( "onVerticalAlignmentChanged" ) )
            func_onVerticalAlignmentChanged( boost::ref(e) );
        else{
            this->CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onVerticalAlignmentChanged( ::CEGUI::ElementEventArgs & e ){
        CEGUI::Element::onVerticalAlignmentChanged( boost::ref(e) );
    }

    virtual void onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererAttached = this->get_override( "onWindowRendererAttached" ) )
            func_onWindowRendererAttached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererAttached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererAttached( boost::ref(e) );
    }

    virtual void onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onWindowRendererDetached = this->get_override( "onWindowRendererDetached" ) )
            func_onWindowRendererDetached( boost::ref(e) );
        else{
            this->CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
        }
    }
    
    virtual void default_onWindowRendererDetached( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onWindowRendererDetached( boost::ref(e) );
    }

    virtual void onZChange_impl(  ){
        if( bp::override func_onZChange_impl = this->get_override( "onZChange_impl" ) )
            func_onZChange_impl(  );
        else{
            this->CEGUI::Window::onZChange_impl(  );
        }
    }
    
    virtual void default_onZChange_impl(  ){
        CEGUI::Window::onZChange_impl( );
    }

    virtual void onZChanged( ::CEGUI::WindowEventArgs & e ){
        if( bp::override func_onZChanged = this->get_override( "onZChanged" ) )
            func_onZChanged( boost::ref(e) );
        else{
            this->CEGUI::Window::onZChanged( boost::ref(e) );
        }
    }
    
    virtual void default_onZChanged( ::CEGUI::WindowEventArgs & e ){
        CEGUI::Window::onZChanged( boost::ref(e) );
    }

    virtual void performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        if( bp::override func_performChildWindowLayout = this->get_override( "performChildWindowLayout" ) )
            func_performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        else{
            this->CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
        }
    }
    
    void default_performChildWindowLayout( bool nonclient_sized_hint=false, bool client_sized_hint=false ) {
        CEGUI::Window::performChildWindowLayout( nonclient_sized_hint, client_sized_hint );
    }

    virtual void populateGeometryBuffer(  ){
        if( bp::override func_populateGeometryBuffer = this->get_override( "populateGeometryBuffer" ) )
            func_populateGeometryBuffer(  );
        else{
            this->CEGUI::Window::populateGeometryBuffer(  );
        }
    }
    
    virtual void default_populateGeometryBuffer(  ){
        CEGUI::Window::populateGeometryBuffer( );
    }

    void queueGeometry( ::CEGUI::RenderingContext const & ctx ){
        CEGUI::Window::queueGeometry( boost::ref(ctx) );
    }

    void releaseRenderingWindow(  ){
        CEGUI::Window::releaseRenderingWindow(  );
    }

    virtual void removeChild_impl( ::CEGUI::Element * element ){
        if( bp::override func_removeChild_impl = this->get_override( "removeChild_impl" ) )
            func_removeChild_impl( boost::python::ptr(element) );
        else{
            this->CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
        }
    }
    
    virtual void default_removeChild_impl( ::CEGUI::Element * element ){
        CEGUI::Window::removeChild_impl( boost::python::ptr(element) );
    }

    void removeWindowFromDrawList( ::CEGUI::Window const & wnd ){
        CEGUI::Window::removeWindowFromDrawList( boost::ref(wnd) );
    }

    virtual void setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        if( bp::override func_setArea = this->get_override( "setArea" ) )
            func_setArea( boost::ref(pos), boost::ref(size) );
        else{
            this->CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
        }
    }
    
    void default_setArea( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size ) {
        CEGUI::Element::setArea( boost::ref(pos), boost::ref(size) );
    }

    virtual void setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        if( bp::override func_setArea_impl = this->get_override( "setArea_impl" ) )
            func_setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        else{
            this->CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
        }
    }
    
    virtual void default_setArea_impl( ::CEGUI::UVector2 const & pos, ::CEGUI::USize const & size, bool topLeftSizing=false, bool fireEvents=true ){
        CEGUI::Window::setArea_impl( boost::ref(pos), boost::ref(size), topLeftSizing, fireEvents );
    }

    virtual void setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        if( bp::override func_setHorizontalAlignment = this->get_override( "setHorizontalAlignment" ) )
            func_setHorizontalAlignment( alignment );
        else{
            this->CEGUI::Element::setHorizontalAlignment( alignment );
        }
    }
    
    void default_setHorizontalAlignment( ::CEGUI::HorizontalAlignment const alignment ) {
        CEGUI::Element::setHorizontalAlignment( alignment );
    }

    virtual void setLookNFeel( ::CEGUI::String const & look ) {
        if( bp::override func_setLookNFeel = this->get_override( "setLookNFeel" ) )
            func_setLookNFeel( boost::ref(look) );
        else{
            this->CEGUI::Window::setLookNFeel( boost::ref(look) );
        }
    }
    
    void default_setLookNFeel( ::CEGUI::String const & look ) {
        CEGUI::Window::setLookNFeel( boost::ref(look) );
    }

    virtual void setMargin( ::CEGUI::UBox const & margin ) {
        if( bp::override func_setMargin = this->get_override( "setMargin" ) )
            func_setMargin( boost::ref(margin) );
        else{
            this->CEGUI::Window::setMargin( boost::ref(margin) );
        }
    }
    
    void default_setMargin( ::CEGUI::UBox const & margin ) {
        CEGUI::Window::setMargin( boost::ref(margin) );
    }

    virtual void setName( ::CEGUI::String const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->CEGUI::NamedElement::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::CEGUI::String const & name ) {
        CEGUI::NamedElement::setName( boost::ref(name) );
    }

    virtual void setParent( ::CEGUI::Element * parent ){
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(parent) );
        else{
            this->CEGUI::Window::setParent( boost::python::ptr(parent) );
        }
    }
    
    virtual void default_setParent( ::CEGUI::Element * parent ){
        CEGUI::Window::setParent( boost::python::ptr(parent) );
    }

    virtual void setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        if( bp::override func_setVerticalAlignment = this->get_override( "setVerticalAlignment" ) )
            func_setVerticalAlignment( alignment );
        else{
            this->CEGUI::Element::setVerticalAlignment( alignment );
        }
    }
    
    void default_setVerticalAlignment( ::CEGUI::VerticalAlignment const alignment ) {
        CEGUI::Element::setVerticalAlignment( alignment );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
    }

    void transferChildSurfaces(  ){
        CEGUI::Window::transferChildSurfaces(  );
    }

    virtual void update( float elapsed ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( elapsed );
        else{
            this->CEGUI::Window::update( elapsed );
        }
    }
    
    void default_update( float elapsed ) {
        CEGUI::Window::update( elapsed );
    }

    void updateGeometryRenderSettings(  ){
        CEGUI::Window::updateGeometryRenderSettings(  );
    }

    virtual void updateSelf( float elapsed ){
        if( bp::override func_updateSelf = this->get_override( "updateSelf" ) )
            func_updateSelf( elapsed );
        else{
            this->CEGUI::Window::updateSelf( elapsed );
        }
    }
    
    virtual void default_updateSelf( float elapsed ){
        CEGUI::Window::updateSelf( elapsed );
    }

    virtual bool writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeAutoChildWindowXML = this->get_override( "writeAutoChildWindowXML" ) )
            return func_writeAutoChildWindowXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
        }
    }
    
    virtual bool default_writeAutoChildWindowXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeAutoChildWindowXML( boost::ref(xml_stream) );
    }

    virtual int writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeChildWindowsXML = this->get_override( "writeChildWindowsXML" ) )
            return func_writeChildWindowsXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writeChildWindowsXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writeChildWindowsXML( boost::ref(xml_stream) );
    }

    virtual int writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writePropertiesXML = this->get_override( "writePropertiesXML" ) )
            return func_writePropertiesXML( boost::ref(xml_stream) );
        else{
            return this->CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
        }
    }
    
    virtual int default_writePropertiesXML( ::CEGUI::XMLSerializer & xml_stream ) const {
        return CEGUI::Window::writePropertiesXML( boost::ref(xml_stream) );
    }

    virtual void writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        if( bp::override func_writeXMLToStream = this->get_override( "writeXMLToStream" ) )
            func_writeXMLToStream( boost::ref(xml_stream) );
        else{
            this->CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
        }
    }
    
    void default_writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
    }

};

void register_Editbox_class(){

    { //::CEGUI::Editbox
        typedef bp::class_< Editbox_wrapper, bp::bases< CEGUI::Window >, boost::noncopyable > Editbox_exposer_t;
        Editbox_exposer_t Editbox_exposer = Editbox_exposer_t( "Editbox", "! Base class for an Editbox widget\n", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("type"), bp::arg("name") ), "! Constructor for Editbox class.\n") );
        bp::scope Editbox_scope( Editbox_exposer );
        { //::CEGUI::Editbox::clearSelection
        
            typedef void ( Editbox_wrapper::*clearSelection_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "clearSelection"
                , clearSelection_function_type( &Editbox_wrapper::clearSelection )
                , "! Clear the currently defined selection (just the region, not the text).\n" );
        
        }
        { //::CEGUI::Editbox::eraseSelectedText
        
            typedef void ( Editbox_wrapper::*eraseSelectedText_function_type )( bool ) ;
            
            Editbox_exposer.def( 
                "eraseSelectedText"
                , eraseSelectedText_function_type( &Editbox_wrapper::eraseSelectedText )
                , ( bp::arg("modify_text")=(bool)(true) )
                , "*!\n\
                \n\
                    Erase the currently selected text.\n\
            \n\
                @param modify_text\n\
                    when true, the actual text will be modified.  When false, everything is\n\
                    done except erasing the characters.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getCaretIndex
        
            typedef ::size_t ( ::CEGUI::Editbox::*getCaretIndex_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getCaretIndex"
                , getCaretIndex_function_type( &::CEGUI::Editbox::getCaretIndex )
                , "*!\n\
                \n\
                    return the current position of the caret.\n\
            \n\
                @return\n\
                    Index of the insert caret relative to the start of the text.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getMaskCodePoint
        
            typedef ::CEGUI::utf32 ( ::CEGUI::Editbox::*getMaskCodePoint_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getMaskCodePoint"
                , getMaskCodePoint_function_type( &::CEGUI::Editbox::getMaskCodePoint )
                , "*!\n\
                \n\
                    return the code point used when rendering masked text.\n\
            \n\
                @return\n\
                    utf32 or char (depends on used String class) code point value representing\n\
                    the Unicode code point that will be rendered instead of the Editbox text\n\
                    when rendering in masked mode.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getMaxTextLength
        
            typedef ::size_t ( ::CEGUI::Editbox::*getMaxTextLength_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getMaxTextLength"
                , getMaxTextLength_function_type( &::CEGUI::Editbox::getMaxTextLength )
                , "*!\n\
                \n\
                    return the maximum text length set for this Editbox.\n\
            \n\
                @return\n\
                    The maximum number of code points (characters) that can be entered into\n\
                    this Editbox.\n\
            \n\
                \note\n\
                    Depending on the validation string set, the actual length of text that\n\
                    can be entered may be less than the value returned here\n\
                    (it will never be more).\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getSelectionEndIndex
        
            typedef ::size_t ( ::CEGUI::Editbox::*getSelectionEndIndex_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getSelectionEndIndex"
                , getSelectionEndIndex_function_type( &::CEGUI::Editbox::getSelectionEndIndex )
                , "*!\n\
                \n\
                    return the current selection end point.\n\
            \n\
                @return\n\
                    Index of the selection end point relative to the start of the text.  If\n\
                    no selection is defined this function returns the position of the caret.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getSelectionLength
        
            typedef ::size_t ( ::CEGUI::Editbox::*getSelectionLength_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getSelectionLength"
                , getSelectionLength_function_type( &::CEGUI::Editbox::getSelectionLength )
                , "*!\n\
                \n\
                    return the length of the current selection (in code points \n\
                    characters).\n\
            \n\
                @return\n\
                    Number of code points (or characters) contained within the currently\n\
                    defined selection.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getSelectionStartIndex
        
            typedef ::size_t ( ::CEGUI::Editbox::*getSelectionStartIndex_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getSelectionStartIndex"
                , getSelectionStartIndex_function_type( &::CEGUI::Editbox::getSelectionStartIndex )
                , "*!\n\
                \n\
                    return the current selection start point.\n\
            \n\
                @return\n\
                    Index of the selection start point relative to the start of the text.\n\
                    If no selection is defined this function returns the position of the\n\
                    caret.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getStringMatchState
        
            typedef ::CEGUI::RegexMatcher::MatchState ( Editbox_wrapper::*getStringMatchState_function_type )( ::CEGUI::String const & ) const;
            
            Editbox_exposer.def( 
                "getStringMatchState"
                , getStringMatchState_function_type( &Editbox_wrapper::getStringMatchState )
                , ( bp::arg("str") )
                , "*!\n\
            \n\
                return the match state of the given string for the validation regular\n\
                expression.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::getTextIndexFromPosition
        
            typedef ::size_t ( Editbox_wrapper::*getTextIndexFromPosition_function_type )( ::CEGUI::Vector2f const & ) const;
            
            Editbox_exposer.def( 
                "getTextIndexFromPosition"
                , getTextIndexFromPosition_function_type( &Editbox_wrapper::getTextIndexFromPosition )
                , ( bp::arg("pt") )
                , "*!\n\
                \n\
                    Return the text code point index that is rendered closest to screen\n\
                    position  pt.\n\
            \n\
                @param pt\n\
                    Point object describing a position on the screen in pixels.\n\
            \n\
                @return\n\
                    Code point index into the text that is rendered closest to screen\n\
                    position  pt.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getTextMatchState
        
            typedef ::CEGUI::RegexMatcher::MatchState ( ::CEGUI::Editbox::*getTextMatchState_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getTextMatchState"
                , getTextMatchState_function_type( &::CEGUI::Editbox::getTextMatchState )
                , "*!\n\
                \n\
                    return the validation MatchState for the current Editbox text, given the\n\
                    currently set validation string.\n\
            \n\
                \note\n\
                    Validation is performed by means of a regular expression.  If the text\n\
                    matches the regex, the text is said to have passed validation.  If the\n\
                    text does not match with the regex then the text fails validation.\n\
                    The default RegexMatcher uses the pcre library to perform regular\n\
                    expression operations, details about the pattern syntax can be found\n\
                    on unix-like systems by way of <tt>man pcrepattern<tt> (or online at\n\
                    http:www.pcre.orgpcre.txt (scroll  search PCREPATTERN(3)).\n\
                    Alternatively, see the perl regex documentation at\n\
                    http:perldoc.perl.orgperlre.html\n\
            \n\
                @return\n\
                    One of the MatchState enumerated values indicating the current match state.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::getValidationString
        
            typedef ::CEGUI::String const & ( ::CEGUI::Editbox::*getValidationString_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getValidationString"
                , getValidationString_function_type( &::CEGUI::Editbox::getValidationString )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    return the currently set validation string\n\
            \n\
                \note\n\
                    Validation is performed by means of a regular expression.  If the text\n\
                    matches the regex, the text is said to have passed validation.  If the\n\
                    text does not match with the regex then the text fails validation.\n\
                    The default RegexMatcher uses the pcre library to perform regular\n\
                    expression operations, details about the pattern syntax can be found\n\
                    on unix-like systems by way of <tt>man pcrepattern<tt> (or online at\n\
                    http:www.pcre.orgpcre.txt (scroll  search PCREPATTERN(3)).\n\
                    Alternatively, see the perl regex documentation at\n\
                    http:perldoc.perl.orgperlre.html\n\
            \n\
                @return\n\
                    String object containing the current validation regex data\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::handleBackspace
        
            typedef void ( Editbox_wrapper::*handleBackspace_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "handleBackspace"
                , handleBackspace_function_type( &Editbox_wrapper::handleBackspace )
                , "! Processing for backspace key\n" );
        
        }
        { //::CEGUI::Editbox::handleCharLeft
        
            typedef void ( Editbox_wrapper::*handleCharLeft_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleCharLeft"
                , handleCharLeft_function_type( &Editbox_wrapper::handleCharLeft )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret one character left\n" );
        
        }
        { //::CEGUI::Editbox::handleCharRight
        
            typedef void ( Editbox_wrapper::*handleCharRight_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleCharRight"
                , handleCharRight_function_type( &Editbox_wrapper::handleCharRight )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret one character right\n" );
        
        }
        { //::CEGUI::Editbox::handleDelete
        
            typedef void ( Editbox_wrapper::*handleDelete_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "handleDelete"
                , handleDelete_function_type( &Editbox_wrapper::handleDelete )
                , "! Processing for Delete key\n" );
        
        }
        { //::CEGUI::Editbox::handleEnd
        
            typedef void ( Editbox_wrapper::*handleEnd_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleEnd"
                , handleEnd_function_type( &Editbox_wrapper::handleEnd )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret to the end of the text\n" );
        
        }
        { //::CEGUI::Editbox::handleHome
        
            typedef void ( Editbox_wrapper::*handleHome_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleHome"
                , handleHome_function_type( &Editbox_wrapper::handleHome )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret to the start of the text.\n" );
        
        }
        { //::CEGUI::Editbox::handleValidityChangeForString
        
            typedef bool ( Editbox_wrapper::*handleValidityChangeForString_function_type )( ::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "handleValidityChangeForString"
                , handleValidityChangeForString_function_type( &Editbox_wrapper::handleValidityChangeForString )
                , ( bp::arg("str") )
                , "** Helper to update validator match state as needed for the given string\n\
             * and event handler return codes.\n\
             *\n\
             * This effectively asks permission from event handlers to proceed with the\n\
             * change, updates d_validatorMatchState and returns an appropriate bool.\n\
             * The return value basically says whether or not to set the input string\n\
             * as the current text for the Editbox.\n\
             *\n" );
        
        }
        { //::CEGUI::Editbox::handleWordLeft
        
            typedef void ( Editbox_wrapper::*handleWordLeft_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleWordLeft"
                , handleWordLeft_function_type( &Editbox_wrapper::handleWordLeft )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret one word left\n" );
        
        }
        { //::CEGUI::Editbox::handleWordRight
        
            typedef void ( Editbox_wrapper::*handleWordRight_function_type )( ::CEGUI::uint ) ;
            
            Editbox_exposer.def( 
                "handleWordRight"
                , handleWordRight_function_type( &Editbox_wrapper::handleWordRight )
                , ( bp::arg("sysKeys") )
                , "! Processing to move caret one word right\n" );
        
        }
        { //::CEGUI::Editbox::hasInputFocus
        
            typedef bool ( ::CEGUI::Editbox::*hasInputFocus_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "hasInputFocus"
                , hasInputFocus_function_type( &::CEGUI::Editbox::hasInputFocus )
                , "*!\n\
                \n\
                    return true if the Editbox has input focus.\n\
            \n\
                @return\n\
                    - true if the Editbox has keyboard input focus.\n\
                    - false if the Editbox does not have keyboard input focus.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::isReadOnly
        
            typedef bool ( ::CEGUI::Editbox::*isReadOnly_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "isReadOnly"
                , isReadOnly_function_type( &::CEGUI::Editbox::isReadOnly )
                , "*!\n\
                \n\
                    return true if the Editbox is read-only.\n\
            \n\
                @return\n\
                    true if the Editbox is read only and can't be edited by the user, false\n\
                    if the Editbox is not read only and may be edited by the user.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::isTextMasked
        
            typedef bool ( ::CEGUI::Editbox::*isTextMasked_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "isTextMasked"
                , isTextMasked_function_type( &::CEGUI::Editbox::isTextMasked )
                , "*!\n\
                \n\
                    return true if the text for the Editbox will be rendered masked.\n\
            \n\
                @return\n\
                    true if the Editbox text will be rendered masked using the currently set\n\
                    mask code point, false if the Editbox text will be rendered as ordinary\n\
                    text.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::onCaptureLost
        
            typedef void ( Editbox_wrapper::*onCaptureLost_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onCaptureLost"
                , onCaptureLost_function_type( &Editbox_wrapper::default_onCaptureLost )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onCaretMoved
        
            typedef void ( Editbox_wrapper::*onCaretMoved_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onCaretMoved"
                , onCaretMoved_function_type( &Editbox_wrapper::default_onCaretMoved )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the caret (insert point) position changes.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onCharacter
        
            typedef void ( Editbox_wrapper::*onCharacter_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onCharacter"
                , onCharacter_function_type( &Editbox_wrapper::default_onCharacter )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onEditboxFullEvent
        
            typedef void ( Editbox_wrapper::*onEditboxFullEvent_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onEditboxFullEvent"
                , onEditboxFullEvent_function_type( &Editbox_wrapper::default_onEditboxFullEvent )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the edit box text has reached the set maximum\n\
                length.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onKeyDown
        
            typedef void ( Editbox_wrapper::*onKeyDown_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onKeyDown"
                , onKeyDown_function_type( &Editbox_wrapper::default_onKeyDown )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onMaskCodePointChanged
        
            typedef void ( Editbox_wrapper::*onMaskCodePointChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMaskCodePointChanged"
                , onMaskCodePointChanged_function_type( &Editbox_wrapper::default_onMaskCodePointChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the code point to use for masked rendering has been\n\
                changed.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onMaskedRenderingModeChanged
        
            typedef void ( Editbox_wrapper::*onMaskedRenderingModeChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMaskedRenderingModeChanged"
                , onMaskedRenderingModeChanged_function_type( &Editbox_wrapper::default_onMaskedRenderingModeChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the masked rendering mode (password mode) has been\n\
                changed.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onMaximumTextLengthChanged
        
            typedef void ( Editbox_wrapper::*onMaximumTextLengthChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMaximumTextLengthChanged"
                , onMaximumTextLengthChanged_function_type( &Editbox_wrapper::default_onMaximumTextLengthChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the maximum text length for the edit box is changed.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onMouseButtonDown
        
            typedef void ( Editbox_wrapper::*onMouseButtonDown_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseButtonDown"
                , onMouseButtonDown_function_type( &Editbox_wrapper::default_onMouseButtonDown )
                , ( bp::arg("e") )
                , "Overridden event handlers\n" );
        
        }
        { //::CEGUI::Editbox::onMouseButtonUp
        
            typedef void ( Editbox_wrapper::*onMouseButtonUp_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseButtonUp"
                , onMouseButtonUp_function_type( &Editbox_wrapper::default_onMouseButtonUp )
                , ( bp::arg("e") )
                , "Overridden event handlers\n" );
        
        }
        { //::CEGUI::Editbox::onMouseDoubleClicked
        
            typedef void ( Editbox_wrapper::*onMouseDoubleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseDoubleClicked"
                , onMouseDoubleClicked_function_type( &Editbox_wrapper::default_onMouseDoubleClicked )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onMouseMove
        
            typedef void ( Editbox_wrapper::*onMouseMove_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseMove"
                , onMouseMove_function_type( &Editbox_wrapper::default_onMouseMove )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onMouseTripleClicked
        
            typedef void ( Editbox_wrapper::*onMouseTripleClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseTripleClicked"
                , onMouseTripleClicked_function_type( &Editbox_wrapper::default_onMouseTripleClicked )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onReadOnlyChanged
        
            typedef void ( Editbox_wrapper::*onReadOnlyChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onReadOnlyChanged"
                , onReadOnlyChanged_function_type( &Editbox_wrapper::default_onReadOnlyChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the read only state of the Editbox has been changed.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onTextAcceptedEvent
        
            typedef void ( Editbox_wrapper::*onTextAcceptedEvent_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onTextAcceptedEvent"
                , onTextAcceptedEvent_function_type( &Editbox_wrapper::default_onTextAcceptedEvent )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the user accepts the edit box text by pressing\n\
                Return, Enter, or Tab.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onTextChanged
        
            typedef void ( Editbox_wrapper::*onTextChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onTextChanged"
                , onTextChanged_function_type( &Editbox_wrapper::default_onTextChanged )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Editbox::onTextSelectionChanged
        
            typedef void ( Editbox_wrapper::*onTextSelectionChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onTextSelectionChanged"
                , onTextSelectionChanged_function_type( &Editbox_wrapper::default_onTextSelectionChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when the current text selection changes.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onTextValidityChanged
        
            typedef void ( Editbox_wrapper::*onTextValidityChanged_function_type )( ::CEGUI::RegexMatchStateEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onTextValidityChanged"
                , onTextValidityChanged_function_type( &Editbox_wrapper::default_onTextValidityChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Handler called when something has caused the validity state of the\n\
                current text to change.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::onValidationStringChanged
        
            typedef void ( Editbox_wrapper::*onValidationStringChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onValidationStringChanged"
                , onValidationStringChanged_function_type( &Editbox_wrapper::default_onValidationStringChanged )
                , ( bp::arg("e") )
                , "*!\n\
            \n\
                Event fired internally when the validation string is changed.\n\
            *\n" );
        
        }
        { //::CEGUI::Editbox::performCopy
        
            typedef bool ( ::CEGUI::Editbox::*performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Editbox_wrapper::*default_performCopy_function_type )( ::CEGUI::Clipboard & ) ;
            
            Editbox_exposer.def( 
                "performCopy"
                , performCopy_function_type(&::CEGUI::Editbox::performCopy)
                , default_performCopy_function_type(&Editbox_wrapper::default_performCopy)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Editbox::performCut
        
            typedef bool ( ::CEGUI::Editbox::*performCut_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Editbox_wrapper::*default_performCut_function_type )( ::CEGUI::Clipboard & ) ;
            
            Editbox_exposer.def( 
                "performCut"
                , performCut_function_type(&::CEGUI::Editbox::performCut)
                , default_performCut_function_type(&Editbox_wrapper::default_performCut)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Editbox::performPaste
        
            typedef bool ( ::CEGUI::Editbox::*performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            typedef bool ( Editbox_wrapper::*default_performPaste_function_type )( ::CEGUI::Clipboard & ) ;
            
            Editbox_exposer.def( 
                "performPaste"
                , performPaste_function_type(&::CEGUI::Editbox::performPaste)
                , default_performPaste_function_type(&Editbox_wrapper::default_performPaste)
                , ( bp::arg("clipboard") ) );
        
        }
        { //::CEGUI::Editbox::setCaretIndex
        
            typedef void ( ::CEGUI::Editbox::*setCaretIndex_function_type )( ::size_t ) ;
            
            Editbox_exposer.def( 
                "setCaretIndex"
                , setCaretIndex_function_type( &::CEGUI::Editbox::setCaretIndex )
                , ( bp::arg("caret_pos") )
                , "*!\n\
                \n\
                    Set the current position of the caret.\n\
            \n\
                @param caret_pos\n\
                    New index for the insert caret relative to the start of the text.  If\n\
                    the value specified is greater than the number of characters in the\n\
                    Editbox, the caret is positioned at the end of the text.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setMaskCodePoint
        
            typedef void ( ::CEGUI::Editbox::*setMaskCodePoint_function_type )( ::CEGUI::utf32 ) ;
            
            Editbox_exposer.def( 
                "setMaskCodePoint"
                , setMaskCodePoint_function_type( &::CEGUI::Editbox::setMaskCodePoint )
                , ( bp::arg("code_point") )
                , "*!\n\
                \n\
                    set the code point used when rendering masked text.\n\
            \n\
                @param code_point\n\
                    utf32 or char (depends on used String class) code point value representing\n\
                    the vode point that should be rendered instead of the Editbox text when\n\
                    rendering in masked mode.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setMaxTextLength
        
            typedef void ( ::CEGUI::Editbox::*setMaxTextLength_function_type )( ::size_t ) ;
            
            Editbox_exposer.def( 
                "setMaxTextLength"
                , setMaxTextLength_function_type( &::CEGUI::Editbox::setMaxTextLength )
                , ( bp::arg("max_len") )
                , "*!\n\
                \n\
                    set the maximum text length for this Editbox.\n\
            \n\
                @param max_len\n\
                    The maximum number of code points (characters) that can be entered into\n\
                    this Editbox.\n\
            \n\
                \note\n\
                    Depending on the validation string set, the actual length of text that\n\
                    can be entered may be less than the value set here\n\
                    (it will never be more).\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setReadOnly
        
            typedef void ( ::CEGUI::Editbox::*setReadOnly_function_type )( bool ) ;
            
            Editbox_exposer.def( 
                "setReadOnly"
                , setReadOnly_function_type( &::CEGUI::Editbox::setReadOnly )
                , ( bp::arg("setting") )
                , "*!\n\
                \n\
                    Specify whether the Editbox is read-only.\n\
            \n\
                @param setting\n\
                    true if the Editbox is read only and can't be edited by the user, false\n\
                    if the Editbox is not read only and may be edited by the user.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setSelection
        
            typedef void ( ::CEGUI::Editbox::*setSelection_function_type )( ::size_t,::size_t ) ;
            
            Editbox_exposer.def( 
                "setSelection"
                , setSelection_function_type( &::CEGUI::Editbox::setSelection )
                , ( bp::arg("start_pos"), bp::arg("end_pos") )
                , "*!\n\
                \n\
                    Define the current selection for the Editbox\n\
            \n\
                @param start_pos\n\
                    Index of the starting point for the selection.  If this value is greater\n\
                    than the number of characters in the Editbox, the selection start will\n\
                    be set to the end of the text.\n\
            \n\
                @param end_pos\n\
                    Index of the ending point for the selection.  If this value is greater\n\
                    than the number of characters in the Editbox, the selection end will be\n\
                    set to the end of the text.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setSelectionLength
        
            typedef void ( ::CEGUI::Editbox::*setSelectionLength_function_type )( ::size_t ) ;
            
            Editbox_exposer.def( 
                "setSelectionLength"
                , setSelectionLength_function_type( &::CEGUI::Editbox::setSelectionLength )
                , ( bp::arg("length") )
                , "*!\n\
                \n\
                    Define the current selection for the Editbox\n\
            \n\
                @param start_pos\n\
                    Length of the selection.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setSelectionStart
        
            typedef void ( ::CEGUI::Editbox::*setSelectionStart_function_type )( ::size_t ) ;
            
            Editbox_exposer.def( 
                "setSelectionStart"
                , setSelectionStart_function_type( &::CEGUI::Editbox::setSelectionStart )
                , ( bp::arg("start_pos") )
                , "*!\n\
                \n\
                    Define the current selection start for the Editbox\n\
            \n\
                    @param start_pos\n\
                    Index of the starting point for the selection.  If this value is greater than the number of\
                    characters in the Editbox, the\n\
                    selection start will be set to the end of the text.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setTextMasked
        
            typedef void ( ::CEGUI::Editbox::*setTextMasked_function_type )( bool ) ;
            
            Editbox_exposer.def( 
                "setTextMasked"
                , setTextMasked_function_type( &::CEGUI::Editbox::setTextMasked )
                , ( bp::arg("setting") )
                , "*!\n\
                \n\
                    Specify whether the text for the Editbox will be rendered masked.\n\
            \n\
                @param setting\n\
                    - true if the Editbox text should be rendered masked using the currently\n\
                      set mask code point.\n\
                    - false if the Editbox text should be rendered as ordinary text.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setValidationString
        
            typedef void ( ::CEGUI::Editbox::*setValidationString_function_type )( ::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "setValidationString"
                , setValidationString_function_type( &::CEGUI::Editbox::setValidationString )
                , ( bp::arg("validation_string") )
                , "*!\n\
                \n\
                    Set the text validation string.\n\
            \n\
                \note\n\
                    Validation is performed by means of a regular expression.  If the text\n\
                    matches the regex, the text is said to have passed validation.  If the\n\
                    text does not match with the regex then the text fails validation.\n\
                    The default RegexMatcher uses the pcre library to perform regular\n\
                    expression operations, details about the pattern syntax can be found\n\
                    on unix-like systems by way of <tt>man pcrepattern<tt> (or online at\n\
                    http:www.pcre.orgpcre.txt (scroll  search PCREPATTERN(3)).\n\
                    Alternatively, see the perl regex documentation at\n\
                    http:perldoc.perl.orgperlre.html\n\
            \n\
                @param validation_string\n\
                    String object containing the validation regex data to be used.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::setValidator
        
            typedef void ( ::CEGUI::Editbox::*setValidator_function_type )( ::CEGUI::RegexMatcher * ) ;
            
            Editbox_exposer.def( 
                "setValidator"
                , setValidator_function_type( &::CEGUI::Editbox::setValidator )
                , ( bp::arg("matcher") )
                , "*!\n\
                \n\
                    Set the RegexMatcher based validator for this Editbox.\n\
            \n\
                @param matcher\n\
                    Pointer to an object that implements the RegexMatcher interface, or 0\n\
                    to restore a system supplied RegexMatcher (if support is available).\n\
            \n\
                \note\n\
                    If the previous RegexMatcher validator is one supplied via the system,\n\
                    it is deleted and replaced with the given RegexMatcher.  User supplied\n\
                    RegexMatcher objects will never be deleted by the system and you must\n\
                    ensure that the object is not deleted while the Editbox holds a pointer\n\
                    to it.  Once the Editbox is destroyed or the validator is set to\n\
                    something else it is the responsibility of client code to ensure any\n\
                    previous custom validator is deleted.\n\
                *\n" );
        
        }
        { //::CEGUI::Editbox::validateWindowRenderer
        
            typedef bool ( Editbox_wrapper::*validateWindowRenderer_function_type )( ::CEGUI::WindowRenderer const * ) const;
            
            Editbox_exposer.def( 
                "validateWindowRenderer"
                , validateWindowRenderer_function_type( &Editbox_wrapper::default_validateWindowRenderer )
                , ( bp::arg("renderer") )
                , "! validate window renderer\n" );
        
        }
        Editbox_exposer.add_static_property( "EventCaretMoved"
                        , bp::make_getter( &CEGUI::Editbox::EventCaretMoved
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventEditboxFull"
                        , bp::make_getter( &CEGUI::Editbox::EventEditboxFull
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventMaskCodePointChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventMaskCodePointChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventMaskedRenderingModeChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventMaskedRenderingModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventMaximumTextLengthChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventMaximumTextLengthChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventReadOnlyModeChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventReadOnlyModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventTextAccepted"
                        , bp::make_getter( &CEGUI::Editbox::EventTextAccepted
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventTextSelectionChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventTextSelectionChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventTextValidityChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventTextValidityChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Editbox_exposer.add_static_property( "EventValidationStringChanged"
                        , bp::make_getter( &CEGUI::Editbox::EventValidationStringChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        { //::CEGUI::Window::addChild_impl
        
            typedef void ( Editbox_wrapper::*addChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            Editbox_exposer.def( 
                "addChild_impl"
                , addChild_impl_function_type( &Editbox_wrapper::default_addChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.addChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Element::addElementProperties
        
            typedef void ( Editbox_wrapper::*addElementProperties_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "addElementProperties"
                , addElementProperties_function_type( &Editbox_wrapper::addElementProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Element properties.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::addNamedElementProperties
        
            typedef void ( Editbox_wrapper::*addNamedElementProperties_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "addNamedElementProperties"
                , addNamedElementProperties_function_type( &Editbox_wrapper::addNamedElementProperties )
                , "*!\n\
             Add standard CEGUI.NamedElement properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowProperties
        
            typedef void ( Editbox_wrapper::*addWindowProperties_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "addWindowProperties"
                , addWindowProperties_function_type( &Editbox_wrapper::addWindowProperties )
                , "*!\n\
            \n\
                Add standard CEGUI.Window properties.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::addWindowToDrawList
        
            typedef void ( Editbox_wrapper::*addWindowToDrawList_function_type )( ::CEGUI::Window &,bool ) ;
            
            Editbox_exposer.def( 
                "addWindowToDrawList"
                , addWindowToDrawList_function_type( &Editbox_wrapper::addWindowToDrawList )
                , ( bp::arg("wnd"), bp::arg("at_back")=(bool)(false) )
                , "*!\n\
                \n\
                    Add the given window to the drawing list at an appropriate position for\n\
                    it's settings and the required direction.  Basically, when  at_back\n\
                    is false, the window will appear in front of all other windows with the\n\
                    same 'always on top' setting.  When  at_back is true, the window will\n\
                    appear behind all other windows wih the same 'always on top' setting.\n\
            \n\
                @param wnd\n\
                    Window object to be added to the drawing list.\n\
            \n\
                @param at_back\n\
                    Indicates whether the window should be placed at the back of other\n\
                    windows in the same group. If this is false, the window is placed in\n\
                    front of other windows in the group.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::allocateRenderingWindow
        
            typedef void ( Editbox_wrapper::*allocateRenderingWindow_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "allocateRenderingWindow"
                , allocateRenderingWindow_function_type( &Editbox_wrapper::allocateRenderingWindow )
                , "! helper to create and setup the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::banPropertiesForAutoWindow
        
            typedef void ( Editbox_wrapper::*banPropertiesForAutoWindow_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "banPropertiesForAutoWindow"
                , banPropertiesForAutoWindow_function_type( &Editbox_wrapper::default_banPropertiesForAutoWindow ) );
        
        }
        { //::CEGUI::Window::beginInitialisation
        
            typedef void ( ::CEGUI::Window::*beginInitialisation_function_type )(  ) ;
            typedef void ( Editbox_wrapper::*default_beginInitialisation_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "beginInitialisation"
                , beginInitialisation_function_type(&::CEGUI::Window::beginInitialisation)
                , default_beginInitialisation_function_type(&Editbox_wrapper::default_beginInitialisation) );
        
        }
        { //::CEGUI::Window::bufferGeometry
        
            typedef void ( Editbox_wrapper::*bufferGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Editbox_exposer.def( 
                "bufferGeometry"
                , bufferGeometry_function_type( &Editbox_wrapper::bufferGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with generating and buffering\n\
                    window geometry.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf; it is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::cleanupChildren
        
            typedef void ( Editbox_wrapper::*cleanupChildren_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "cleanupChildren"
                , cleanupChildren_function_type( &Editbox_wrapper::default_cleanupChildren )
                , "*!\n\
            \n\
                Cleanup child windows\n\
            *\n" );
        
        }
        { //::CEGUI::Window::cloneChildWidgetsTo
        
            typedef void ( ::CEGUI::Window::*cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Editbox_wrapper::*default_cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            
            Editbox_exposer.def( 
                "cloneChildWidgetsTo"
                , cloneChildWidgetsTo_function_type(&::CEGUI::Window::cloneChildWidgetsTo)
                , default_cloneChildWidgetsTo_function_type(&Editbox_wrapper::default_cloneChildWidgetsTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::clonePropertiesTo
        
            typedef void ( ::CEGUI::Window::*clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Editbox_wrapper::*default_clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            
            Editbox_exposer.def( 
                "clonePropertiesTo"
                , clonePropertiesTo_function_type(&::CEGUI::Window::clonePropertiesTo)
                , default_clonePropertiesTo_function_type(&Editbox_wrapper::default_clonePropertiesTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::destroy
        
            typedef void ( ::CEGUI::Window::*destroy_function_type )(  ) ;
            typedef void ( Editbox_wrapper::*default_destroy_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "destroy"
                , destroy_function_type(&::CEGUI::Window::destroy)
                , default_destroy_function_type(&Editbox_wrapper::default_destroy) );
        
        }
        { //::CEGUI::Window::drawSelf
        
            typedef void ( Editbox_wrapper::*drawSelf_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Editbox_exposer.def( 
                "drawSelf"
                , drawSelf_function_type( &Editbox_wrapper::default_drawSelf )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform the actual rendering for this Window.\n\
            \n\
                @param ctx\n\
                    RenderingContext holding the details of the RenderingSurface to be\n\
                    used for the Window rendering operations.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Window::endInitialisation
        
            typedef void ( ::CEGUI::Window::*endInitialisation_function_type )(  ) ;
            typedef void ( Editbox_wrapper::*default_endInitialisation_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "endInitialisation"
                , endInitialisation_function_type(&::CEGUI::Window::endInitialisation)
                , default_endInitialisation_function_type(&Editbox_wrapper::default_endInitialisation) );
        
        }
        { //::CEGUI::Element::fireAreaChangeEvents
        
            typedef void ( Editbox_wrapper::*fireAreaChangeEvents_function_type )( bool const,bool const ) ;
            
            Editbox_exposer.def( 
                "fireAreaChangeEvents"
                , fireAreaChangeEvents_function_type( &Editbox_wrapper::fireAreaChangeEvents )
                , ( bp::arg("moved"), bp::arg("sized") )
                , "! helper to fire events based on changes to area rect\n" );
        
        }
        { //::CEGUI::EventSet::fireEvent
        
            typedef void ( ::CEGUI::EventSet::*fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            typedef void ( Editbox_wrapper::*default_fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "fireEvent"
                , fireEvent_function_type(&::CEGUI::EventSet::fireEvent)
                , default_fireEvent_function_type(&Editbox_wrapper::default_fireEvent)
                , ( bp::arg("name"), bp::arg("args"), bp::arg("eventNamespace")="" ) );
        
        }
        { //::CEGUI::EventSet::fireEvent_impl
        
            typedef void ( Editbox_wrapper::*fireEvent_impl_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs & ) ;
            
            Editbox_exposer.def( 
                "fireEvent_impl"
                , fireEvent_impl_function_type( &Editbox_wrapper::fireEvent_impl )
                , ( bp::arg("name"), bp::arg("args") )
                , "! Implementation event firing member\n" );
        
        }
        { //::CEGUI::Window::generateAutoRepeatEvent
        
            typedef void ( Editbox_wrapper::*generateAutoRepeatEvent_function_type )( ::CEGUI::MouseButton ) ;
            
            Editbox_exposer.def( 
                "generateAutoRepeatEvent"
                , generateAutoRepeatEvent_function_type( &Editbox_wrapper::generateAutoRepeatEvent )
                , ( bp::arg("button") )
                , "*!\n\
            \n\
                Fires off a repeated mouse button down event for this window.\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNamePath_impl
        
            typedef ::CEGUI::NamedElement * ( Editbox_wrapper::*getChildByNamePath_impl_function_type )( ::CEGUI::String const & ) const;
            
            Editbox_exposer.def( 
                "getChildByNamePath_impl"
                , getChildByNamePath_impl_function_type( &Editbox_wrapper::default_getChildByNamePath_impl )
                , ( bp::arg("name_path") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Retrieves a child at  name_path or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::NamedElement::getChildByNameRecursive_impl
        
            typedef ::CEGUI::NamedElement * ( Editbox_wrapper::*getChildByNameRecursive_impl_function_type )( ::CEGUI::String const & ) const;
            
            Editbox_exposer.def( 
                "getChildByNameRecursive_impl"
                , getChildByNameRecursive_impl_function_type( &Editbox_wrapper::default_getChildByNameRecursive_impl )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
             Finds a child by  name or 0 if none such exists\n\
            *\n" );
        
        }
        { //::CEGUI::Element::getClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getClientChildContentArea_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getClientChildContentArea"
                , getClientChildContentArea_function_type(&::CEGUI::Element::getClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getHitTestRect_impl
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getHitTestRect_impl_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getHitTestRect_impl"
                , getHitTestRect_impl_function_type( &Editbox_wrapper::default_getHitTestRect_impl )
                , "! Default implementation of function to return Window inner clipper area.\n\
            ! Default implementation of function to return Window hit-test area.\n" );
        
        }
        { //::CEGUI::Window::getInnerRectClipper_impl
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getInnerRectClipper_impl_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getInnerRectClipper_impl"
                , getInnerRectClipper_impl_function_type( &Editbox_wrapper::default_getInnerRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n\
            ! Default implementation of function to return Window inner clipper area.\n" );
        
        }
        { //::CEGUI::Element::getNonClientChildContentArea
        
            typedef ::CEGUI::Element::CachedRectf const & ( ::CEGUI::Element::*getNonClientChildContentArea_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getNonClientChildContentArea"
                , getNonClientChildContentArea_function_type(&::CEGUI::Element::getNonClientChildContentArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::Window::getOuterRectClipper_impl
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getOuterRectClipper_impl_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getOuterRectClipper_impl"
                , getOuterRectClipper_impl_function_type( &Editbox_wrapper::default_getOuterRectClipper_impl )
                , "! Default implementation of function to return Window outer clipper area.\n" );
        
        }
        { //::CEGUI::Window::getParentElementClipIntersection
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getParentElementClipIntersection_function_type )( ::CEGUI::Rectf const & ) const;
            
            Editbox_exposer.def( 
                "getParentElementClipIntersection"
                , getParentElementClipIntersection_function_type( &Editbox_wrapper::getParentElementClipIntersection )
                , ( bp::arg("unclipped_area") )
                , "! helper function for calculating clipping rectangles.\n" );
        
        }
        { //::CEGUI::Window::getRenderedStringParser
        
            typedef ::CEGUI::RenderedStringParser & ( ::CEGUI::Window::*getRenderedStringParser_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getRenderedStringParser"
                , getRenderedStringParser_function_type(&::CEGUI::Window::getRenderedStringParser)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Window::getRenderingContext_impl
        
            typedef void ( ::CEGUI::Window::*getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            typedef void ( Editbox_wrapper::*default_getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            
            Editbox_exposer.def( 
                "getRenderingContext_impl"
                , getRenderingContext_impl_function_type(&::CEGUI::Window::getRenderingContext_impl)
                , default_getRenderingContext_impl_function_type(&Editbox_wrapper::default_getRenderingContext_impl)
                , ( bp::arg("ctx") ) );
        
        }
        { //::CEGUI::Window::getRootContainerSize
        
            typedef ::CEGUI::Sizef const & ( ::CEGUI::Window::*getRootContainerSize_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getRootContainerSize"
                , getRootContainerSize_function_type(&::CEGUI::Window::getRootContainerSize)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::EventSet::getScriptModule
        
            typedef ::CEGUI::ScriptModule * ( Editbox_wrapper::*getScriptModule_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "getScriptModule"
                , getScriptModule_function_type( &Editbox_wrapper::getScriptModule )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "! Implementation event firing member\n\
            ! Helper to return the script module pointer or throw.\n" );
        
        }
        { //::CEGUI::Window::getUnclippedInnerRect_impl
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getUnclippedInnerRect_impl_function_type )( bool ) const;
            
            Editbox_exposer.def( 
                "getUnclippedInnerRect_impl"
                , getUnclippedInnerRect_impl_function_type( &Editbox_wrapper::default_getUnclippedInnerRect_impl )
                , ( bp::arg("skipAllPixelAlignment") ) );
        
        }
        { //::CEGUI::Element::getUnclippedOuterRect_impl
        
            typedef ::CEGUI::Rectf ( Editbox_wrapper::*getUnclippedOuterRect_impl_function_type )( bool ) const;
            
            Editbox_exposer.def( 
                "getUnclippedOuterRect_impl"
                , getUnclippedOuterRect_impl_function_type( &Editbox_wrapper::default_getUnclippedOuterRect_impl )
                , ( bp::arg("skipAllPixelAlignment") )
                , "! Default implementation of function to return Element's outer rect area.\n" );
        
        }
        { //::CEGUI::Window::getWindowAttachedToCommonAncestor
        
            typedef ::CEGUI::Window const * ( Editbox_wrapper::*getWindowAttachedToCommonAncestor_function_type )( ::CEGUI::Window const & ) const;
            
            Editbox_exposer.def( 
                "getWindowAttachedToCommonAncestor"
                , getWindowAttachedToCommonAncestor_function_type( &Editbox_wrapper::getWindowAttachedToCommonAncestor )
                , ( bp::arg("wnd") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
            \n\
                Helper function to return the ancestor Window of a wnd that is attached\n\
                as a child to a window that is also an ancestor of a this.  Returns 0\n\
                if a wnd and a this are not part of the same hierachy.\n\
             *\n" );
        
        }
        { //::CEGUI::Window::handleFontRenderSizeChange
        
            typedef bool ( Editbox_wrapper::*handleFontRenderSizeChange_function_type )( ::CEGUI::EventArgs const & ) ;
            
            Editbox_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type( &Editbox_wrapper::default_handleFontRenderSizeChange )
                , ( bp::arg("args") )
                , "! handler function for when font render size changes.\n" );
        
        }
        { //::CEGUI::Window::initialiseClippers
        
            typedef void ( Editbox_wrapper::*initialiseClippers_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Editbox_exposer.def( 
                "initialiseClippers"
                , initialiseClippers_function_type( &Editbox_wrapper::initialiseClippers )
                , ( bp::arg("ctx") )
                , "! Helper to intialise the needed clipping for geometry and render surface.\n" );
        
        }
        { //::CEGUI::Window::initialiseComponents
        
            typedef void ( ::CEGUI::Window::*initialiseComponents_function_type )(  ) ;
            typedef void ( Editbox_wrapper::*default_initialiseComponents_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "initialiseComponents"
                , initialiseComponents_function_type(&::CEGUI::Window::initialiseComponents)
                , default_initialiseComponents_function_type(&Editbox_wrapper::default_initialiseComponents) );
        
        }
        { //::CEGUI::Window::invalidate_impl
        
            typedef void ( Editbox_wrapper::*invalidate_impl_function_type )( bool const ) ;
            
            Editbox_exposer.def( 
                "invalidate_impl"
                , invalidate_impl_function_type( &Editbox_wrapper::invalidate_impl )
                , ( bp::arg("recursive") )
                , "! helper function to invalidate window and optionally child windows.\n" );
        
        }
        { //::CEGUI::Window::isHit
        
            typedef bool ( ::CEGUI::Window::*isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            typedef bool ( Editbox_wrapper::*default_isHit_function_type )( ::CEGUI::Vector2f const &,bool const ) const;
            
            Editbox_exposer.def( 
                "isHit"
                , isHit_function_type(&::CEGUI::Window::isHit)
                , default_isHit_function_type(&Editbox_wrapper::default_isHit)
                , ( bp::arg("position"), bp::arg("allow_disabled")=(bool const)(false) ) );
        
        }
        { //::CEGUI::Window::isHitTargetWindow
        
            typedef bool ( Editbox_wrapper::*isHitTargetWindow_function_type )( ::CEGUI::Vector2f const &,bool ) const;
            
            Editbox_exposer.def( 
                "isHitTargetWindow"
                , isHitTargetWindow_function_type( &Editbox_wrapper::isHitTargetWindow )
                , ( bp::arg("position"), bp::arg("allow_disabled") ) );
        
        }
        { //::CEGUI::Element::isInnerRectSizeChanged
        
            typedef bool ( Editbox_wrapper::*isInnerRectSizeChanged_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "isInnerRectSizeChanged"
                , isInnerRectSizeChanged_function_type( &Editbox_wrapper::isInnerRectSizeChanged )
                , "! helper to return whether the inner rect size has changed\n" );
        
        }
        { //::CEGUI::Window::isPropertyAtDefault
        
            typedef bool ( Editbox_wrapper::*isPropertyAtDefault_function_type )( ::CEGUI::Property const * ) const;
            
            Editbox_exposer.def( 
                "isPropertyAtDefault"
                , isPropertyAtDefault_function_type( &Editbox_wrapper::isPropertyAtDefault )
                , ( bp::arg("property") )
                , "*!\n\
            \n\
                Returns whether a property is at it's default value.\n\
                This function is different from Property.isDefatult as it takes the assigned look'n'feel\n\
                (if the is one) into account.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::isTopOfZOrder
        
            typedef bool ( Editbox_wrapper::*isTopOfZOrder_function_type )(  ) const;
            
            Editbox_exposer.def( 
                "isTopOfZOrder"
                , isTopOfZOrder_function_type( &Editbox_wrapper::isTopOfZOrder )
                , "*!\n\
                \n\
                    Return whether the window is at the top of the Z-Order.  This will\n\
                    correctly take into account 'Always on top' windows as needed.\n\
            \n\
                @return\n\
                    - true if the Window is at the top of the z-order in relation to sibling\n\
                      windows with the same 'always on top' setting.\n\
                    - false if the Window is not at the top of the z-order in relation to\n\
                      sibling windows with the same 'always on top' setting.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::layoutLookNFeelChildWidgets
        
            typedef void ( Editbox_wrapper::*layoutLookNFeelChildWidgets_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "layoutLookNFeelChildWidgets"
                , layoutLookNFeelChildWidgets_function_type( &Editbox_wrapper::layoutLookNFeelChildWidgets )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::markCachedWindowRectsInvalid
        
            typedef void ( Editbox_wrapper::*markCachedWindowRectsInvalid_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "markCachedWindowRectsInvalid"
                , markCachedWindowRectsInvalid_function_type( &Editbox_wrapper::markCachedWindowRectsInvalid )
                , "mark the rect caches defined on Window invalid (does not affect Element)\n" );
        
        }
        { //::CEGUI::Window::moveToFront_impl
        
            typedef bool ( Editbox_wrapper::*moveToFront_impl_function_type )( bool ) ;
            
            Editbox_exposer.def( 
                "moveToFront_impl"
                , moveToFront_impl_function_type( &Editbox_wrapper::default_moveToFront_impl )
                , ( bp::arg("wasClicked") )
                , "*!\n\
                \n\
                    Implements move to front behavior.\n\
            \n\
                @return\n\
                    Should return true if some action was taken, or false if there was\n\
                    nothing to be done.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::notifyChildrenOfSizeChange
        
            typedef void ( Editbox_wrapper::*notifyChildrenOfSizeChange_function_type )( bool const,bool const ) ;
            
            Editbox_exposer.def( 
                "notifyChildrenOfSizeChange"
                , notifyChildrenOfSizeChange_function_type( &Editbox_wrapper::notifyChildrenOfSizeChange )
                , ( bp::arg("non_client"), bp::arg("client") ) );
        
        }
        { //::CEGUI::Window::notifyClippingChanged
        
            typedef void ( Editbox_wrapper::*notifyClippingChanged_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "notifyClippingChanged"
                , notifyClippingChanged_function_type( &Editbox_wrapper::notifyClippingChanged )
                , "*!\n\
            \n\
                Recursively inform all children that the clipping has changed and screen rects\n\
                needs to be recached.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::notifyScreenAreaChanged
        
            typedef void ( ::CEGUI::Window::*notifyScreenAreaChanged_function_type )( bool ) ;
            typedef void ( Editbox_wrapper::*default_notifyScreenAreaChanged_function_type )( bool ) ;
            
            Editbox_exposer.def( 
                "notifyScreenAreaChanged"
                , notifyScreenAreaChanged_function_type(&::CEGUI::Window::notifyScreenAreaChanged)
                , default_notifyScreenAreaChanged_function_type(&Editbox_wrapper::default_notifyScreenAreaChanged)
                , ( bp::arg("recursive")=(bool)(true) ) );
        
        }
        { //::CEGUI::Window::onActivated
        
            typedef void ( Editbox_wrapper::*onActivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onActivated"
                , onActivated_function_type( &Editbox_wrapper::default_onActivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has become the active window.\n\
            \n\
                @param e\n\
                    ActivationEventArgs class whose 'otherWindow' field is set to the window\n\
                    that previously was active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlphaChanged
        
            typedef void ( Editbox_wrapper::*onAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onAlphaChanged"
                , onAlphaChanged_function_type( &Editbox_wrapper::default_onAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's alpha blend value is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onAlwaysOnTopChanged
        
            typedef void ( Editbox_wrapper::*onAlwaysOnTopChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onAlwaysOnTopChanged"
                , onAlwaysOnTopChanged_function_type( &Editbox_wrapper::default_onAlwaysOnTopChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's always-on-top setting is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onCaptureGained
        
            typedef void ( Editbox_wrapper::*onCaptureGained_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onCaptureGained"
                , onCaptureGained_function_type( &Editbox_wrapper::default_onCaptureGained )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gains capture of mouse inputs.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildAdded
        
            typedef void ( Editbox_wrapper::*onChildAdded_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onChildAdded"
                , onChildAdded_function_type( &Editbox_wrapper::default_onChildAdded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is added to this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that has been added.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onChildRemoved
        
            typedef void ( Editbox_wrapper::*onChildRemoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onChildRemoved"
                , onChildRemoved_function_type( &Editbox_wrapper::default_onChildRemoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a child window is removed from this window.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the window\n\
                    that has been removed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onClippingChanged
        
            typedef void ( Editbox_wrapper::*onClippingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onClippingChanged"
                , onClippingChanged_function_type( &Editbox_wrapper::default_onClippingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being clipped by it's\n\
                    parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDeactivated
        
            typedef void ( Editbox_wrapper::*onDeactivated_function_type )( ::CEGUI::ActivationEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDeactivated"
                , onDeactivated_function_type( &Editbox_wrapper::default_onDeactivated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window has lost input focus and has been\n\
                    deactivated.\n\
            \n\
                @param e\n\
                    ActivationEventArgs object whose 'otherWindow' field is set to the\n\
                    window that has now become active, or NULL for none.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDestructionStarted
        
            typedef void ( Editbox_wrapper::*onDestructionStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDestructionStarted"
                , onDestructionStarted_function_type( &Editbox_wrapper::default_onDestructionStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's destruction sequence has begun.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDisabled
        
            typedef void ( Editbox_wrapper::*onDisabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDisabled"
                , onDisabled_function_type( &Editbox_wrapper::default_onDisabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is disabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemDropped
        
            typedef void ( Editbox_wrapper::*onDragDropItemDropped_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDragDropItemDropped"
                , onDragDropItemDropped_function_type( &Editbox_wrapper::default_onDragDropItemDropped )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemEnters
        
            typedef void ( Editbox_wrapper::*onDragDropItemEnters_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDragDropItemEnters"
                , onDragDropItemEnters_function_type( &Editbox_wrapper::default_onDragDropItemEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onDragDropItemLeaves
        
            typedef void ( Editbox_wrapper::*onDragDropItemLeaves_function_type )( ::CEGUI::DragDropEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onDragDropItemLeaves"
                , onDragDropItemLeaves_function_type( &Editbox_wrapper::default_onDragDropItemLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a DragContainer is dragged over this window.\n\
            \n\
                @param e\n\
                    DragDropEventArgs object initialised as follows:\n\
                    - window field is normaly set to point to 'this' window.\n\
                    - dragDropItem is a pointer to a DragContainer window that triggered\n\
                      the event.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onEnabled
        
            typedef void ( Editbox_wrapper::*onEnabled_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onEnabled"
                , onEnabled_function_type( &Editbox_wrapper::default_onEnabled )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is enabled.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onFontChanged
        
            typedef void ( Editbox_wrapper::*onFontChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onFontChanged"
                , onFontChanged_function_type( &Editbox_wrapper::default_onFontChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's font is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onHidden
        
            typedef void ( Editbox_wrapper::*onHidden_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onHidden"
                , onHidden_function_type( &Editbox_wrapper::default_onHidden )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is hidden.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onHorizontalAlignmentChanged
        
            typedef void ( Editbox_wrapper::*onHorizontalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onHorizontalAlignmentChanged"
                , onHorizontalAlignmentChanged_function_type( &Editbox_wrapper::default_onHorizontalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the horizontal alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onIDChanged
        
            typedef void ( Editbox_wrapper::*onIDChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onIDChanged"
                , onIDChanged_function_type( &Editbox_wrapper::default_onIDChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's client assigned ID is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInheritsAlphaChanged
        
            typedef void ( Editbox_wrapper::*onInheritsAlphaChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onInheritsAlphaChanged"
                , onInheritsAlphaChanged_function_type( &Editbox_wrapper::default_onInheritsAlphaChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for inheriting alpha-blending\n\
                    is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onInvalidated
        
            typedef void ( Editbox_wrapper::*onInvalidated_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onInvalidated"
                , onInvalidated_function_type( &Editbox_wrapper::default_onInvalidated )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window gets invalidated.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onKeyUp
        
            typedef void ( Editbox_wrapper::*onKeyUp_function_type )( ::CEGUI::KeyEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onKeyUp"
                , onKeyUp_function_type( &Editbox_wrapper::default_onKeyUp )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a key as been released while this window has input\n\
                    focus.\n\
            \n\
                @param e\n\
                    KeyEventArgs object whose 'scancode' field is set to the Key.Scan value\n\
                    representing the key that was released, and whose 'sysKeys' field\n\
                    represents the combination of SystemKey that were active when the event\n\
                    was generated.  All other fields should be considered as 'junk'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMarginChanged
        
            typedef void ( Editbox_wrapper::*onMarginChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMarginChanged"
                , onMarginChanged_function_type( &Editbox_wrapper::default_onMarginChanged )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onMouseClicked
        
            typedef void ( Editbox_wrapper::*onMouseClicked_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseClicked"
                , onMouseClicked_function_type( &Editbox_wrapper::default_onMouseClicked )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a mouse button has been clicked (that is depressed\n\
                    and then released, within a specified time) within this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEnters
        
            typedef void ( Editbox_wrapper::*onMouseEnters_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseEnters"
                , onMouseEnters_function_type( &Editbox_wrapper::default_onMouseEnters )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area and\n\
                    is actually over some part of this windows surface and not, for\n\
                    instance over a child window - even though technically in those cases\n\
                    the mouse is also within this Window's area, the handler will not be\n\
                    called.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseEntersArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseEntersArea
        
            typedef void ( Editbox_wrapper::*onMouseEntersArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseEntersArea"
                , onMouseEntersArea_function_type( &Editbox_wrapper::default_onMouseEntersArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has entered this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeaves
        
            typedef void ( Editbox_wrapper::*onMouseLeaves_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseLeaves"
                , onMouseLeaves_function_type( &Editbox_wrapper::default_onMouseLeaves )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor is no longer over this window's\n\
                    surface area.  This will be called when the mouse is not over a part\n\
                    of this Window's actual surface - even though technically the mouse is\n\
                    still within the Window's area, for example if the mouse moves over a\n\
                    child window.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
            \n\
                @see\n\
                    Window.onMouseLeavesArea\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseLeavesArea
        
            typedef void ( Editbox_wrapper::*onMouseLeavesArea_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseLeavesArea"
                , onMouseLeavesArea_function_type( &Editbox_wrapper::default_onMouseLeavesArea )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse cursor has left this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMouseWheel
        
            typedef void ( Editbox_wrapper::*onMouseWheel_function_type )( ::CEGUI::MouseEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMouseWheel"
                , onMouseWheel_function_type( &Editbox_wrapper::default_onMouseWheel )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the mouse wheel (z-axis) position changes within\n\
                    this window's area.\n\
            \n\
                @param e\n\
                    MouseEventArgs object.  All fields are valid.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onMoved
        
            typedef void ( Editbox_wrapper::*onMoved_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onMoved"
                , onMoved_function_type( &Editbox_wrapper::default_onMoved )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's position changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::NamedElement::onNameChanged
        
            typedef void ( Editbox_wrapper::*onNameChanged_function_type )( ::CEGUI::NamedElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onNameChanged"
                , onNameChanged_function_type( &Editbox_wrapper::default_onNameChanged )
                , ( bp::arg("e") )
                , "*!\n\
                 Handler called when the element's name changes.\n\
            \n\
                @param e\n\
                    NamedElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onNonClientChanged
        
            typedef void ( Editbox_wrapper::*onNonClientChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onNonClientChanged"
                , onNonClientChanged_function_type( &Editbox_wrapper::default_onNonClientChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the element's non-client setting, affecting it's\n\
                    position and size relative to it's parent is changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object whose 'element' pointer field is set to the element\n\
                    that triggered the event. For this event the trigger element is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentDestroyChanged
        
            typedef void ( Editbox_wrapper::*onParentDestroyChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onParentDestroyChanged"
                , onParentDestroyChanged_function_type( &Editbox_wrapper::default_onParentDestroyChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for being destroyed\n\
                    automatically be it's parent is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onParentSized
        
            typedef void ( Editbox_wrapper::*onParentSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onParentSized"
                , onParentSized_function_type( &Editbox_wrapper::default_onParentSized )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when this window's parent window has been resized.  If\n\
                    this window is the root  GUI Sheet window, this call will be made when\n\
                    the display size changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set the the\n\
                    window that caused the event; this is typically either this window's\n\
                    parent window, or NULL to indicate the screen size has changed.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingEnded
        
            typedef void ( Editbox_wrapper::*onRenderingEnded_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onRenderingEnded"
                , onRenderingEnded_function_type( &Editbox_wrapper::default_onRenderingEnded )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has ended.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRenderingStarted
        
            typedef void ( Editbox_wrapper::*onRenderingStarted_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onRenderingStarted"
                , onRenderingStarted_function_type( &Editbox_wrapper::default_onRenderingStarted )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when rendering for this window has started.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onRotated
        
            typedef void ( Editbox_wrapper::*onRotated_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onRotated"
                , onRotated_function_type( &Editbox_wrapper::default_onRotated )
                , ( bp::arg("e") ) );
        
        }
        { //::CEGUI::Window::onShown
        
            typedef void ( Editbox_wrapper::*onShown_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onShown"
                , onShown_function_type( &Editbox_wrapper::default_onShown )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window is shown (made visible).\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onSized
        
            typedef void ( Editbox_wrapper::*onSized_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onSized"
                , onSized_function_type( &Editbox_wrapper::default_onSized )
                , ( bp::arg("e") )
                , "*************************************************************************\n\
                    Event trigger methods\n\
                *************************************************************************\n\
                *!\n\
                \n\
                    Handler called when the window's size changes.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onTextParsingChanged
        
            typedef void ( Editbox_wrapper::*onTextParsingChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onTextParsingChanged"
                , onTextParsingChanged_function_type( &Editbox_wrapper::default_onTextParsingChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the window's setting for whether text parsing is\n\
                    enabled is changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::onVerticalAlignmentChanged
        
            typedef void ( Editbox_wrapper::*onVerticalAlignmentChanged_function_type )( ::CEGUI::ElementEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onVerticalAlignmentChanged"
                , onVerticalAlignmentChanged_function_type( &Editbox_wrapper::default_onVerticalAlignmentChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the vertical alignment setting for the element is\n\
                    changed.\n\
            \n\
                @param e\n\
                    ElementEventArgs object initialised as follows:\n\
                    - element field is set to point to the element object who's alignment has\n\
                      changed (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererAttached
        
            typedef void ( Editbox_wrapper::*onWindowRendererAttached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onWindowRendererAttached"
                , onWindowRendererAttached_function_type( &Editbox_wrapper::default_onWindowRendererAttached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when a new window renderer object is attached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got a new\n\
                      window renderer attached. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onWindowRendererDetached
        
            typedef void ( Editbox_wrapper::*onWindowRendererDetached_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onWindowRendererDetached"
                , onWindowRendererDetached_function_type( &Editbox_wrapper::default_onWindowRendererDetached )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the currently attached window renderer object is detached.\n\
            \n\
                @param e\n\
                    WindowEventArgs object initialised as follows:\n\
                    - window field is set to point to the Window object that just got lost its\n\
                      window renderer. (typically 'this').\n\
                *\n" );
        
        }
        { //::CEGUI::Window::onZChange_impl
        
            typedef void ( Editbox_wrapper::*onZChange_impl_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "onZChange_impl"
                , onZChange_impl_function_type( &Editbox_wrapper::default_onZChange_impl )
                , "*!\n\
            \n\
                Notify 'this' and all siblings of a ZOrder change event\n\
            *\n" );
        
        }
        { //::CEGUI::Window::onZChanged
        
            typedef void ( Editbox_wrapper::*onZChanged_function_type )( ::CEGUI::WindowEventArgs & ) ;
            
            Editbox_exposer.def( 
                "onZChanged"
                , onZChanged_function_type( &Editbox_wrapper::default_onZChanged )
                , ( bp::arg("e") )
                , "*!\n\
                \n\
                    Handler called when the z-order position of this window has changed.\n\
            \n\
                @param e\n\
                    WindowEventArgs object whose 'window' pointer field is set to the window\n\
                    that triggered the event.  For this event the trigger window is always\n\
                    'this'.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::performChildWindowLayout
        
            typedef void ( ::CEGUI::Window::*performChildWindowLayout_function_type )( bool,bool ) ;
            typedef void ( Editbox_wrapper::*default_performChildWindowLayout_function_type )( bool,bool ) ;
            
            Editbox_exposer.def( 
                "performChildWindowLayout"
                , performChildWindowLayout_function_type(&::CEGUI::Window::performChildWindowLayout)
                , default_performChildWindowLayout_function_type(&Editbox_wrapper::default_performChildWindowLayout)
                , ( bp::arg("nonclient_sized_hint")=(bool)(false), bp::arg("client_sized_hint")=(bool)(false) ) );
        
        }
        { //::CEGUI::Window::populateGeometryBuffer
        
            typedef void ( Editbox_wrapper::*populateGeometryBuffer_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "populateGeometryBuffer"
                , populateGeometryBuffer_function_type( &Editbox_wrapper::default_populateGeometryBuffer )
                , "*!\n\
                \n\
                    Update the rendering cache.\n\
            \n\
                    Populates the Window's GeometryBuffer ready for rendering.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::queueGeometry
        
            typedef void ( Editbox_wrapper::*queueGeometry_function_type )( ::CEGUI::RenderingContext const & ) ;
            
            Editbox_exposer.def( 
                "queueGeometry"
                , queueGeometry_function_type( &Editbox_wrapper::queueGeometry )
                , ( bp::arg("ctx") )
                , "*!\n\
                \n\
                    Perform drawing operations concerned with positioning, clipping and\n\
                    queueing of window geometry to RenderingSurfaces.\n\
            \n\
                \note\n\
                    This function is a sub-function of drawSelf and is provided to make it\n\
                    easier to override drawSelf without needing to duplicate large sections\n\
                    of the code from the default implementation.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::releaseRenderingWindow
        
            typedef void ( Editbox_wrapper::*releaseRenderingWindow_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "releaseRenderingWindow"
                , releaseRenderingWindow_function_type( &Editbox_wrapper::releaseRenderingWindow )
                , "! helper to clean up the auto RenderingWindow surface\n" );
        
        }
        { //::CEGUI::Window::removeChild_impl
        
            typedef void ( Editbox_wrapper::*removeChild_impl_function_type )( ::CEGUI::Element * ) ;
            
            Editbox_exposer.def( 
                "removeChild_impl"
                , removeChild_impl_function_type( &Editbox_wrapper::default_removeChild_impl )
                , ( bp::arg("element") )
                , "*!\n\
            opydoc Element.removeChild_impl\n\
            *\n" );
        
        }
        { //::CEGUI::Window::removeWindowFromDrawList
        
            typedef void ( Editbox_wrapper::*removeWindowFromDrawList_function_type )( ::CEGUI::Window const & ) ;
            
            Editbox_exposer.def( 
                "removeWindowFromDrawList"
                , removeWindowFromDrawList_function_type( &Editbox_wrapper::removeWindowFromDrawList )
                , ( bp::arg("wnd") )
                , "*!\n\
                \n\
                    Removes the window from the drawing list.  If the window is not attached\n\
                    to the drawing list then nothing happens.\n\
            \n\
                @param wnd\n\
                    Window object to be removed from the drawing list.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            typedef void ( Editbox_wrapper::*default_setArea_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const & ) ;
            
            Editbox_exposer.def( 
                "setArea"
                , setArea_function_type(&::CEGUI::Element::setArea)
                , default_setArea_function_type(&Editbox_wrapper::default_setArea)
                , ( bp::arg("pos"), bp::arg("size") ) );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const &,::CEGUI::UDim const & ) ;
            
            Editbox_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("xpos"), bp::arg("ypos"), bp::arg("width"), bp::arg("height") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Element::setArea
        
            typedef void ( ::CEGUI::Element::*setArea_function_type )( ::CEGUI::URect const & ) ;
            
            Editbox_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::Element::setArea )
                , ( bp::arg("area") )
                , "!  overload\n" );
        
        }
        { //::CEGUI::Window::setArea_impl
        
            typedef void ( Editbox_wrapper::*setArea_impl_function_type )( ::CEGUI::UVector2 const &,::CEGUI::USize const &,bool,bool ) ;
            
            Editbox_exposer.def( 
                "setArea_impl"
                , setArea_impl_function_type( &Editbox_wrapper::default_setArea_impl )
                , ( bp::arg("pos"), bp::arg("size"), bp::arg("topLeftSizing")=(bool)(false), bp::arg("fireEvents")=(bool)(true) )
                , "! opydoc Element.setArea_impl\n" );
        
        }
        { //::CEGUI::Element::setHorizontalAlignment
        
            typedef void ( ::CEGUI::Element::*setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            typedef void ( Editbox_wrapper::*default_setHorizontalAlignment_function_type )( ::CEGUI::HorizontalAlignment const ) ;
            
            Editbox_exposer.def( 
                "setHorizontalAlignment"
                , setHorizontalAlignment_function_type(&::CEGUI::Element::setHorizontalAlignment)
                , default_setHorizontalAlignment_function_type(&Editbox_wrapper::default_setHorizontalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::Window::setLookNFeel
        
            typedef void ( ::CEGUI::Window::*setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            typedef void ( Editbox_wrapper::*default_setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "setLookNFeel"
                , setLookNFeel_function_type(&::CEGUI::Window::setLookNFeel)
                , default_setLookNFeel_function_type(&Editbox_wrapper::default_setLookNFeel)
                , ( bp::arg("look") ) );
        
        }
        { //::CEGUI::Window::setMargin
        
            typedef void ( ::CEGUI::Window::*setMargin_function_type )( ::CEGUI::UBox const & ) ;
            typedef void ( Editbox_wrapper::*default_setMargin_function_type )( ::CEGUI::UBox const & ) ;
            
            Editbox_exposer.def( 
                "setMargin"
                , setMargin_function_type(&::CEGUI::Window::setMargin)
                , default_setMargin_function_type(&Editbox_wrapper::default_setMargin)
                , ( bp::arg("margin") ) );
        
        }
        { //::CEGUI::NamedElement::setName
        
            typedef void ( ::CEGUI::NamedElement::*setName_function_type )( ::CEGUI::String const & ) ;
            typedef void ( Editbox_wrapper::*default_setName_function_type )( ::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "setName"
                , setName_function_type(&::CEGUI::NamedElement::setName)
                , default_setName_function_type(&Editbox_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::CEGUI::Window::setParent
        
            typedef void ( Editbox_wrapper::*setParent_function_type )( ::CEGUI::Element * ) ;
            
            Editbox_exposer.def( 
                "setParent"
                , setParent_function_type( &Editbox_wrapper::default_setParent )
                , ( bp::arg("parent") )
                , "*!\n\
                \n\
                    Set the parent window for this window object.\n\
            \n\
                @param parent\n\
                    Pointer to a Window object that is to be assigned as the parent to this\n\
                    Window.\n\
            \n\
                @return\n\
                    Nothing\n\
                *\n" );
        
        }
        { //::CEGUI::Element::setVerticalAlignment
        
            typedef void ( ::CEGUI::Element::*setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            typedef void ( Editbox_wrapper::*default_setVerticalAlignment_function_type )( ::CEGUI::VerticalAlignment const ) ;
            
            Editbox_exposer.def( 
                "setVerticalAlignment"
                , setVerticalAlignment_function_type(&::CEGUI::Element::setVerticalAlignment)
                , default_setVerticalAlignment_function_type(&Editbox_wrapper::default_setVerticalAlignment)
                , ( bp::arg("alignment") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Editbox_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Editbox_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Editbox_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            
            Editbox_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Editbox_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("group"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::Window::transferChildSurfaces
        
            typedef void ( Editbox_wrapper::*transferChildSurfaces_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "transferChildSurfaces"
                , transferChildSurfaces_function_type( &Editbox_wrapper::transferChildSurfaces )
                , "! transfer RenderingSurfaces to be owned by our target RenderingSurface.\n" );
        
        }
        { //::CEGUI::Window::update
        
            typedef void ( ::CEGUI::Window::*update_function_type )( float ) ;
            typedef void ( Editbox_wrapper::*default_update_function_type )( float ) ;
            
            Editbox_exposer.def( 
                "update"
                , update_function_type(&::CEGUI::Window::update)
                , default_update_function_type(&Editbox_wrapper::default_update)
                , ( bp::arg("elapsed") ) );
        
        }
        { //::CEGUI::Window::updateGeometryRenderSettings
        
            typedef void ( Editbox_wrapper::*updateGeometryRenderSettings_function_type )(  ) ;
            
            Editbox_exposer.def( 
                "updateGeometryRenderSettings"
                , updateGeometryRenderSettings_function_type( &Editbox_wrapper::updateGeometryRenderSettings )
                , "*!\n\
            \n\
                Update position and clip region on this Windows geometry  rendering\n\
                surface.\n\
            *\n" );
        
        }
        { //::CEGUI::Window::updateSelf
        
            typedef void ( Editbox_wrapper::*updateSelf_function_type )( float ) ;
            
            Editbox_exposer.def( 
                "updateSelf"
                , updateSelf_function_type( &Editbox_wrapper::default_updateSelf )
                , ( bp::arg("elapsed") )
                , "*************************************************************************\n\
                    Implementation Functions\n\
                *************************************************************************\n\
                *!\n\
                \n\
                    Perform actual update processing for this Window.\n\
            \n\
                @param elapsed\n\
                    float value indicating the number of seconds elapsed since the last\n\
                    update call.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::Window::writeAutoChildWindowXML
        
            typedef bool ( Editbox_wrapper::*writeAutoChildWindowXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Editbox_exposer.def( 
                "writeAutoChildWindowXML"
                , writeAutoChildWindowXML_function_type( &Editbox_wrapper::default_writeAutoChildWindowXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeChildWindowsXML
        
            typedef int ( Editbox_wrapper::*writeChildWindowsXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Editbox_exposer.def( 
                "writeChildWindowsXML"
                , writeChildWindowsXML_function_type( &Editbox_wrapper::default_writeChildWindowsXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writePropertiesXML
        
            typedef int ( Editbox_wrapper::*writePropertiesXML_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Editbox_exposer.def( 
                "writePropertiesXML"
                , writePropertiesXML_function_type( &Editbox_wrapper::default_writePropertiesXML )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::Window::writeXMLToStream
        
            typedef void ( ::CEGUI::Window::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            typedef void ( Editbox_wrapper::*default_writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Editbox_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type(&::CEGUI::Window::writeXMLToStream)
                , default_writeXMLToStream_function_type(&Editbox_wrapper::default_writeXMLToStream)
                , ( bp::arg("xml_stream") ) );
        
        }
    }

}
