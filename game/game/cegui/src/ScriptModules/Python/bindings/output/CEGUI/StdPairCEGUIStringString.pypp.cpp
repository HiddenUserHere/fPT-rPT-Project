// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "StdPairCEGUIStringString.pypp.hpp"

namespace bp = boost::python;

void register_StdPairCEGUIStringString_class(){

    { //::std::pair< CEGUI::String, CEGUI::String >
        typedef bp::class_< std::pair< CEGUI::String, CEGUI::String > > StdPairCEGUIStringString_exposer_t;
        StdPairCEGUIStringString_exposer_t StdPairCEGUIStringString_exposer = StdPairCEGUIStringString_exposer_t( "StdPairCEGUIStringString", bp::init< >("_GLIBCXX_RESOLVE_LIB_DEFECTS\n\
         265.  std.pair.pair() effects overly restrictive\n\
        ** The default constructor creates @c first and @c second using their\n\
         *  respective default constructors.  *\n") );
        bp::scope StdPairCEGUIStringString_scope( StdPairCEGUIStringString_exposer );
        StdPairCEGUIStringString_exposer.def( bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("__a"), bp::arg("__b") ), "** Two objects may be passed to a @c pair constructor to be copied.  *\n") );
        StdPairCEGUIStringString_exposer.add_property( "first"
                        , bp::make_getter( &std::pair< CEGUI::String, CEGUI::String >::first
                                , bp::return_value_policy< bp::return_by_value >() )
                        , bp::make_setter( &std::pair< CEGUI::String, CEGUI::String >::first ) );
        StdPairCEGUIStringString_exposer.add_property( "second"
                        , bp::make_getter( &std::pair< CEGUI::String, CEGUI::String >::second
                                , bp::return_value_policy< bp::return_by_value >() )
                        , bp::make_setter( &std::pair< CEGUI::String, CEGUI::String >::second ) );
    }

}
