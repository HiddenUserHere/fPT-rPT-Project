// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generators/include/python_CEGUI.h"
#include "WidgetLookFeel.pypp.hpp"

namespace bp = boost::python;

void register_WidgetLookFeel_class(){

    { //::CEGUI::WidgetLookFeel
        typedef bp::class_< CEGUI::WidgetLookFeel > WidgetLookFeel_exposer_t;
        WidgetLookFeel_exposer_t WidgetLookFeel_exposer = WidgetLookFeel_exposer_t( "WidgetLookFeel", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("name"), bp::arg("inherits") )) );
        bp::scope WidgetLookFeel_scope( WidgetLookFeel_exposer );
        WidgetLookFeel_exposer.def( bp::init< >() );
        WidgetLookFeel_exposer.def( bp::init< CEGUI::WidgetLookFeel const & >(( bp::arg("other") )) );
        { //::CEGUI::WidgetLookFeel::addAnimationName
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addAnimationName_function_type )( ::CEGUI::String const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addAnimationName"
                , addAnimationName_function_type( &::CEGUI::WidgetLookFeel::addAnimationName )
                , ( bp::arg("anim_name") )
                , "*!\n\
                \n\
                    Add the name of an animation that is associated with the\n\
                    WidgetLookFeel.\n\
            \n\
                @param anim_name\n\
                    Reference to a String object that contains the name of the animation\n\
                    to be associated with this WidgetLookFeel.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addEventLinkDefinition
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addEventLinkDefinition_function_type )( ::CEGUI::EventLinkDefinition const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addEventLinkDefinition"
                , addEventLinkDefinition_function_type( &::CEGUI::WidgetLookFeel::addEventLinkDefinition )
                , ( bp::arg("evtdef") )
                , "! adds an event link definition to the WidgetLookFeel.\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addImagerySection
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addImagerySection_function_type )( ::CEGUI::ImagerySection const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addImagerySection"
                , addImagerySection_function_type( &::CEGUI::WidgetLookFeel::addImagerySection )
                , ( bp::arg("section") )
                , "*!\n\
                \n\
                    Add an ImagerySection to the WidgetLookFeel.\n\
            \n\
                @param section\n\
                    ImagerySection object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addNamedArea
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addNamedArea_function_type )( ::CEGUI::NamedArea const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addNamedArea"
                , addNamedArea_function_type( &::CEGUI::WidgetLookFeel::addNamedArea )
                , ( bp::arg("area") )
                , "*!\n\
                \n\
                    Adds a named area to the WidgetLookFeel.\n\
            \n\
                @param area\n\
                    NamedArea to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addPropertyDefinition
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addPropertyDefinition_function_type )( ::CEGUI::PropertyDefinitionBase * ) ;
            
            WidgetLookFeel_exposer.def( 
                "addPropertyDefinition"
                , addPropertyDefinition_function_type( &::CEGUI::WidgetLookFeel::addPropertyDefinition )
                , ( bp::arg("propdef") )
                , "*!\n\
                \n\
                    Adds a property definition to the WidgetLookFeel.\n\
            \n\
                @param propdef\n\
                    PropertyDefinition object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addPropertyInitialiser
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addPropertyInitialiser_function_type )( ::CEGUI::PropertyInitialiser const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addPropertyInitialiser"
                , addPropertyInitialiser_function_type( &::CEGUI::WidgetLookFeel::addPropertyInitialiser )
                , ( bp::arg("initialiser") )
                , "*!\n\
                \n\
                    Add a property initialiser to the WidgetLookFeel.\n\
            \n\
                @param initialiser\n\
                    PropertyInitialiser object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addPropertyLinkDefinition
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addPropertyLinkDefinition_function_type )( ::CEGUI::PropertyDefinitionBase * ) ;
            
            WidgetLookFeel_exposer.def( 
                "addPropertyLinkDefinition"
                , addPropertyLinkDefinition_function_type( &::CEGUI::WidgetLookFeel::addPropertyLinkDefinition )
                , ( bp::arg("propdef") )
                , "*!\n\
                \n\
                    Adds a property link definition to the WidgetLookFeel.\n\
            \n\
                @param propdef\n\
                    PropertyLinkDefinition object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addStateSpecification
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addStateSpecification_function_type )( ::CEGUI::StateImagery const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addStateSpecification"
                , addStateSpecification_function_type( &::CEGUI::WidgetLookFeel::addStateSpecification )
                , ( bp::arg("state") )
                , "*!\n\
                \n\
                    Add a state specification (StateImagery object) to the WidgetLookFeel.\n\
            \n\
                @param section\n\
                    StateImagery object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::addWidgetComponent
        
            typedef void ( ::CEGUI::WidgetLookFeel::*addWidgetComponent_function_type )( ::CEGUI::WidgetComponent const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "addWidgetComponent"
                , addWidgetComponent_function_type( &::CEGUI::WidgetLookFeel::addWidgetComponent )
                , ( bp::arg("widget") )
                , "*!\n\
                \n\
                    Add a WidgetComponent to the WidgetLookFeel.\n\
            \n\
                @param widget\n\
                    WidgetComponent object to be added.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::cleanUpWidget
        
            typedef void ( ::CEGUI::WidgetLookFeel::*cleanUpWidget_function_type )( ::CEGUI::Window & ) const;
            
            WidgetLookFeel_exposer.def( 
                "cleanUpWidget"
                , cleanUpWidget_function_type( &::CEGUI::WidgetLookFeel::cleanUpWidget )
                , ( bp::arg("widget") )
                , "*!\n\
                \n\
                    Clean up the given window from all properties and component widgets\n\
                    created by this WidgetLookFeel\n\
            \n\
                @param widget\n\
                    Window based object to be cleaned up.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearEventLinkDefinitions
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearEventLinkDefinitions_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearEventLinkDefinitions"
                , clearEventLinkDefinitions_function_type( &::CEGUI::WidgetLookFeel::clearEventLinkDefinitions )
                , "! clear all defined event link definitions from the WidgetLookFeel.\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearImagerySections
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearImagerySections_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearImagerySections"
                , clearImagerySections_function_type( &::CEGUI::WidgetLookFeel::clearImagerySections )
                , "*!\n\
                \n\
                    Clear all ImagerySections from the WidgetLookFeel.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearNamedAreas
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearNamedAreas_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearNamedAreas"
                , clearNamedAreas_function_type( &::CEGUI::WidgetLookFeel::clearNamedAreas )
                , "*!\n\
                \n\
                    Clear all defined named areas from the WidgetLookFeel\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearPropertyDefinitions
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearPropertyDefinitions_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearPropertyDefinitions"
                , clearPropertyDefinitions_function_type( &::CEGUI::WidgetLookFeel::clearPropertyDefinitions )
                , "*!\n\
                \n\
                    Clear all defined property definitions from the WidgetLookFeel\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearPropertyInitialisers
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearPropertyInitialisers_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearPropertyInitialisers"
                , clearPropertyInitialisers_function_type( &::CEGUI::WidgetLookFeel::clearPropertyInitialisers )
                , "*!\n\
                \n\
                    Clear all PropertyInitialiser objects from the WidgetLookFeel.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearPropertyLinkDefinitions
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearPropertyLinkDefinitions_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearPropertyLinkDefinitions"
                , clearPropertyLinkDefinitions_function_type( &::CEGUI::WidgetLookFeel::clearPropertyLinkDefinitions )
                , "*!\n\
                \n\
                    Clear all defined property link definitions from the WidgetLookFeel\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearStateSpecifications
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearStateSpecifications_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearStateSpecifications"
                , clearStateSpecifications_function_type( &::CEGUI::WidgetLookFeel::clearStateSpecifications )
                , "*!\n\
                \n\
                    Clear all StateImagery objects from the WidgetLookFeel.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::clearWidgetComponents
        
            typedef void ( ::CEGUI::WidgetLookFeel::*clearWidgetComponents_function_type )(  ) ;
            
            WidgetLookFeel_exposer.def( 
                "clearWidgetComponents"
                , clearWidgetComponents_function_type( &::CEGUI::WidgetLookFeel::clearWidgetComponents )
                , "*!\n\
                \n\
                    Clear all WidgetComponents from the WidgetLookFeel.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::findPropertyInitialiser
        
            typedef ::CEGUI::PropertyInitialiser const * ( ::CEGUI::WidgetLookFeel::*findPropertyInitialiser_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "findPropertyInitialiser"
                , findPropertyInitialiser_function_type( &::CEGUI::WidgetLookFeel::findPropertyInitialiser )
                , ( bp::arg("propertyName") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name of a property and returns a pointer to the last\n\
                    PropertyInitialiser for this property or 0 if the is no\n\
                    PropertyInitialiser for this property in the WidgetLookFeel\n\
            \n\
                @param propertyName\n\
                    The name of the property to look for.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::findWidgetComponent
        
            typedef ::CEGUI::WidgetComponent const * ( ::CEGUI::WidgetLookFeel::*findWidgetComponent_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "findWidgetComponent"
                , findWidgetComponent_function_type( &::CEGUI::WidgetLookFeel::findWidgetComponent )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a WidgetComponent and returns a pointer to\n\
                    it if it exists or a null pointer if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the Child component to look for.\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getWidgetComponent in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getAnimationNameIterator
        
            typedef ::CEGUI::ConstVectorIterator< std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > > ( ::CEGUI::WidgetLookFeel::*getAnimationNameIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getAnimationNameIterator"
                , getAnimationNameIterator_function_type( &::CEGUI::WidgetLookFeel::getAnimationNameIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the AnimationNames of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getAnimationNames function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getAnimationNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getAnimationNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getAnimationNames"
                , getAnimationNames_function_type( &::CEGUI::WidgetLookFeel::getAnimationNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getEventLinkDefinitionIterator
        
            typedef ::CEGUI::ConstVectorIterator< CEGUI::NamedDefinitionCollator< CEGUI::String, CEGUI::EventLinkDefinition const* > > ( ::CEGUI::WidgetLookFeel::*getEventLinkDefinitionIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getEventLinkDefinitionIterator"
                , getEventLinkDefinitionIterator_function_type( &::CEGUI::WidgetLookFeel::getEventLinkDefinitionIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the EventLinkDefinitions of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getEventLinkDefinitionMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getEventLinkDefinitionMap
        
            typedef ::std::map<CEGUI::String, CEGUI::EventLinkDefinition*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::EventLinkDefinition*> > > ( ::CEGUI::WidgetLookFeel::*getEventLinkDefinitionMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getEventLinkDefinitionMap"
                , getEventLinkDefinitionMap_function_type( &::CEGUI::WidgetLookFeel::getEventLinkDefinitionMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all EventLinkDefinition elements this WidgetLookFeel\
                    owns. If the list of\n\
                    EventLinkDefinitions of this or an inherited WidgetLookFeel is modified in any way (by\
                    clearing it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to EventLinkDefinition pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getEventLinkDefinitionNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getEventLinkDefinitionNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getEventLinkDefinitionNames"
                , getEventLinkDefinitionNames_function_type( &::CEGUI::WidgetLookFeel::getEventLinkDefinitionNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getImageryIterator
        
            typedef ::CEGUI::ConstMapIterator< std::map<CEGUI::String, CEGUI::ImagerySection, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::ImagerySection> > > > ( ::CEGUI::WidgetLookFeel::*getImageryIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getImageryIterator"
                , getImageryIterator_function_type( &::CEGUI::WidgetLookFeel::getImageryIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the StateImageries of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getStateImageryMap function instead to access the container.\n\
                *\n\
                *!\n\
                \n\
                    Returns an iterator for the ImagerySections of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getImagerySectionMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getImageryNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getImageryNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getImageryNames"
                , getImageryNames_function_type( &::CEGUI::WidgetLookFeel::getImageryNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getImagerySectionNames to conform the general way of\
            naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getImagerySection
        
            typedef ::CEGUI::ImagerySection const & ( ::CEGUI::WidgetLookFeel::*getImagerySection_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "getImagerySection"
                , getImagerySection_function_type( &::CEGUI::WidgetLookFeel::getImagerySection )
                , ( bp::arg("section") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Return a const reference to the ImagerySection object with the\n\
                    specified name.\n\
            \n\
                @return\n\
                    ImagerySection object with the specified name.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getImagerySectionMap
        
            typedef ::std::map<CEGUI::String, CEGUI::ImagerySection*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::ImagerySection*> > > ( ::CEGUI::WidgetLookFeel::*getImagerySectionMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getImagerySectionMap"
                , getImagerySectionMap_function_type( &::CEGUI::WidgetLookFeel::getImagerySectionMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all ImagerySection elements this WidgetLookFeel owns.\
                    If the list of\n\
                    ImagerySections of this or an inherited WidgetLookFeel is modified in any way (by clearing\
                    it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to ImagerySection pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getImagerySectionNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getImagerySectionNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getImagerySectionNames"
                , getImagerySectionNames_function_type( &::CEGUI::WidgetLookFeel::getImagerySectionNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getStateImageryNames to conform the general way of\
            naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getInheritedWidgetLookName
        
            typedef ::CEGUI::String const & ( ::CEGUI::WidgetLookFeel::*getInheritedWidgetLookName_function_type )(  ) const;
            
            WidgetLookFeel_exposer.def( 
                "getInheritedWidgetLookName"
                , getInheritedWidgetLookName_function_type( &::CEGUI::WidgetLookFeel::getInheritedWidgetLookName )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Returns a String containing the name of the inherited WidgetLookFeel.\n\
            \n\
                @return\n\
                    A String containing the name of the inherited WidgetLookFeel.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getName
        
            typedef ::CEGUI::String const & ( ::CEGUI::WidgetLookFeel::*getName_function_type )(  ) const;
            
            WidgetLookFeel_exposer.def( 
                "getName"
                , getName_function_type( &::CEGUI::WidgetLookFeel::getName )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Return the name of the widget look.\n\
            \n\
                @return\n\
                    String object holding the name of the WidgetLookFeel.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getNamedArea
        
            typedef ::CEGUI::NamedArea const & ( ::CEGUI::WidgetLookFeel::*getNamedArea_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "getNamedArea"
                , getNamedArea_function_type( &::CEGUI::WidgetLookFeel::getNamedArea )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Return the NamedArea with the specified name.\n\
            \n\
                @param name\n\
                    String object holding the name of the NamedArea to be returned.\n\
            \n\
                @return\n\
                    The requested NamedArea object.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getNamedAreaIterator
        
            typedef ::CEGUI::ConstMapIterator< std::map<CEGUI::String, CEGUI::NamedArea, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::NamedArea> > > > ( ::CEGUI::WidgetLookFeel::*getNamedAreaIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getNamedAreaIterator"
                , getNamedAreaIterator_function_type( &::CEGUI::WidgetLookFeel::getNamedAreaIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the NamedAreas of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getNamedAreaMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getNamedAreaMap
        
            typedef ::std::map<CEGUI::String, CEGUI::NamedArea*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::NamedArea*> > > ( ::CEGUI::WidgetLookFeel::*getNamedAreaMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getNamedAreaMap"
                , getNamedAreaMap_function_type( &::CEGUI::WidgetLookFeel::getNamedAreaMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all NamedArea elements this WidgetLookFeel owns. If\
                    the list of\n\
                    NamedAreas of this or an inherited WidgetLookFeel is modified in any way (by clearing it,\
                    adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to NamedArea pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getNamedAreaNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getNamedAreaNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getNamedAreaNames"
                , getNamedAreaNames_function_type( &::CEGUI::WidgetLookFeel::getNamedAreaNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getImagerySectionNames to conform the general way of\
            naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getProperties
        
            typedef ::std::vector< CEGUI::PropertyInitialiser > const & ( ::CEGUI::WidgetLookFeel::*getProperties_function_type )(  ) const;
            
            WidgetLookFeel_exposer.def( 
                "getProperties"
                , getProperties_function_type( &::CEGUI::WidgetLookFeel::getProperties )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "** Obtains list of properties.\n\
             * @access public\n\
             * @return CEGUI.WidgetLookFeel.PropertyList List of properties\n\
             *\n\
            *!\n\
                 deprecated\n\
                    This function is deprecated because the return type is to be replaced by a map, a bool\
                    parameter for WLF-inheritance added.\n\
                    The function will be replaced by getPropertyMap in the next version.\n\
            *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyDefinitionIterator
        
            typedef ::CEGUI::ConstVectorIterator< CEGUI::NamedDefinitionCollator< CEGUI::String, CEGUI::PropertyDefinitionBase* > > ( ::CEGUI::WidgetLookFeel::*getPropertyDefinitionIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyDefinitionIterator"
                , getPropertyDefinitionIterator_function_type( &::CEGUI::WidgetLookFeel::getPropertyDefinitionIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the PropertyDefinitions of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getPropertyDefinitionMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyDefinitionMap
        
            typedef ::std::map<CEGUI::String, CEGUI::PropertyDefinitionBase*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::PropertyDefinitionBase*> > > ( ::CEGUI::WidgetLookFeel::*getPropertyDefinitionMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyDefinitionMap"
                , getPropertyDefinitionMap_function_type( &::CEGUI::WidgetLookFeel::getPropertyDefinitionMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all PropertyDefinition elements this WidgetLookFeel\
                    owns. If the list of\n\
                    PropertyDefinitions of this or an inherited WidgetLookFeel is modified in any way (by\
                    clearing it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to PropertyDefinition pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyDefinitionNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getPropertyDefinitionNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyDefinitionNames"
                , getPropertyDefinitionNames_function_type( &::CEGUI::WidgetLookFeel::getPropertyDefinitionNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyDefinitions
        
            typedef ::std::vector< CEGUI::PropertyDefinitionBase* > const & ( ::CEGUI::WidgetLookFeel::*getPropertyDefinitions_function_type )(  ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyDefinitions"
                , getPropertyDefinitions_function_type( &::CEGUI::WidgetLookFeel::getPropertyDefinitions )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "** Obtains list of properties definitions.\n\
             * @access public\n\
             * @return CEGUI.WidgetLookFeel.PropertyDefinitionList List of properties\n\
             * definitions\n\
             *\n\
            *!\n\
                 deprecated\n\
                    This function is deprecated because the return type is to be replaced by a map, a bool\
                    parameter for WLF-inheritance added.\n\
                    The function will be replaced by getPropertyDefinitionMap in the next version.\n\
            *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyInitialiserIterator
        
            typedef ::CEGUI::ConstVectorIterator< CEGUI::NamedDefinitionCollator< CEGUI::String, CEGUI::PropertyInitialiser const* > > ( ::CEGUI::WidgetLookFeel::*getPropertyInitialiserIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyInitialiserIterator"
                , getPropertyInitialiserIterator_function_type( &::CEGUI::WidgetLookFeel::getPropertyInitialiserIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the PropertyInitialisers of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getPropertyInitialiserMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyInitialiserMap
        
            typedef ::std::map<CEGUI::String, CEGUI::PropertyInitialiser*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::PropertyInitialiser*> > > ( ::CEGUI::WidgetLookFeel::*getPropertyInitialiserMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyInitialiserMap"
                , getPropertyInitialiserMap_function_type( &::CEGUI::WidgetLookFeel::getPropertyInitialiserMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all PropertyInitialiser elements this WidgetLookFeel\
                    owns. If the list of\n\
                    PropertyInitialisers of this or an inherited WidgetLookFeel is modified in any way (by\
                    clearing it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to PropertyInitialiser pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyInitialiserNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getPropertyInitialiserNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyInitialiserNames"
                , getPropertyInitialiserNames_function_type( &::CEGUI::WidgetLookFeel::getPropertyInitialiserNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getWidgetComponentNames to conform the general way\
            of naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionIterator
        
            typedef ::CEGUI::ConstVectorIterator< CEGUI::NamedDefinitionCollator< CEGUI::String, CEGUI::PropertyDefinitionBase* > > ( ::CEGUI::WidgetLookFeel::*getPropertyLinkDefinitionIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyLinkDefinitionIterator"
                , getPropertyLinkDefinitionIterator_function_type( &::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the PropertyLinkDefinitions of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getPropertyLinkDefinitionMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionMap
        
            typedef ::std::map<CEGUI::String, CEGUI::PropertyDefinitionBase*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::PropertyDefinitionBase*> > > ( ::CEGUI::WidgetLookFeel::*getPropertyLinkDefinitionMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyLinkDefinitionMap"
                , getPropertyLinkDefinitionMap_function_type( &::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all PropertyLinkDefinition elements this\
                    WidgetLookFeel owns. If the list of\n\
                    PropertyLinkDefinitions of this or an inherited WidgetLookFeel is modified in any way (by\
                    clearing it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to PropertyLinkDefinition pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getPropertyLinkDefinitionNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyLinkDefinitionNames"
                , getPropertyLinkDefinitionNames_function_type( &::CEGUI::WidgetLookFeel::getPropertyLinkDefinitionNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getPropertyLinkDefinitions
        
            typedef ::std::vector< CEGUI::PropertyDefinitionBase* > const & ( ::CEGUI::WidgetLookFeel::*getPropertyLinkDefinitions_function_type )(  ) const;
            
            WidgetLookFeel_exposer.def( 
                "getPropertyLinkDefinitions"
                , getPropertyLinkDefinitions_function_type( &::CEGUI::WidgetLookFeel::getPropertyLinkDefinitions )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "** Obtains list of properties link definitions.\n\
             * @access public\n\
             * @return CEGUI.WidgetLookFeel.PropertyLinkDefinitionList List of\n\
             * properties link definitions\n\
             *\n\
            *!\n\
                 deprecated\n\
                    This function is deprecated because the return type is to be replaced by a map, a bool\
                    parameter for WLF-inheritance added.\n\
                    The function will be replaced by getPropertyLinkDefinitionMap in the next version.\n\
            *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getStateImagery
        
            typedef ::CEGUI::StateImagery const & ( ::CEGUI::WidgetLookFeel::*getStateImagery_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "getStateImagery"
                , getStateImagery_function_type( &::CEGUI::WidgetLookFeel::getStateImagery )
                , ( bp::arg("state") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                \n\
                    Return a const reference to the StateImagery object for the specified\n\
                    state.\n\
            \n\
                @return\n\
                    StateImagery object for the requested state.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getStateImageryMap
        
            typedef ::std::map<CEGUI::String, CEGUI::StateImagery*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::StateImagery*> > > ( ::CEGUI::WidgetLookFeel::*getStateImageryMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getStateImageryMap"
                , getStateImageryMap_function_type( &::CEGUI::WidgetLookFeel::getStateImageryMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all StateImagery elements this WidgetLookFeel owns.\
                    If the list of\n\
                    StateImageries of this or an inherited WidgetLookFeel is modified in any way (by clearing\
                    it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to StateImagery pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getStateImageryNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getStateImageryNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getStateImageryNames"
                , getStateImageryNames_function_type( &::CEGUI::WidgetLookFeel::getStateImageryNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getStateIterator
        
            typedef ::CEGUI::ConstMapIterator< std::map<CEGUI::String, CEGUI::StateImagery, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::StateImagery> > > > ( ::CEGUI::WidgetLookFeel::*getStateIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getStateIterator"
                , getStateIterator_function_type( &::CEGUI::WidgetLookFeel::getStateIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the StateImageries of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getStateImageryMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getStateNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getStateNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getStateNames"
                , getStateNames_function_type( &::CEGUI::WidgetLookFeel::getStateNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getStateImageryNames to conform the general way of\
            naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getWidgetComponentIterator
        
            typedef ::CEGUI::ConstVectorIterator< CEGUI::NamedDefinitionCollator< CEGUI::String, CEGUI::WidgetComponent const* > > ( ::CEGUI::WidgetLookFeel::*getWidgetComponentIterator_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getWidgetComponentIterator"
                , getWidgetComponentIterator_function_type( &::CEGUI::WidgetLookFeel::getWidgetComponentIterator )
                , ( bp::arg("inherits")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns an iterator for the WidgetComponents of this WidgetLookFeel.\n\
            \n\
                 deprecated\n\
                    This function is deprecated because all iterator getter functions will be removed. Please\
                    use the getWidgetComponentMap function instead to access the container.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getWidgetComponentMap
        
            typedef ::std::map<CEGUI::String, CEGUI::WidgetComponent*, CEGUI::StringFastLessCompare, std::allocator<std::pair<CEGUI::String const, CEGUI::WidgetComponent*> > > ( ::CEGUI::WidgetLookFeel::*getWidgetComponentMap_function_type )( bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "getWidgetComponentMap"
                , getWidgetComponentMap_function_type( &::CEGUI::WidgetLookFeel::getWidgetComponentMap )
                , ( bp::arg("includeInheritedElements")=(bool)(false) )
                , "*!\n\
                \n\
                    Returns a map of names to pointers for all WidgetComponent elements this WidgetLookFeel\
                    owns. If the list of\n\
                    WidgetComponents of this or an inherited WidgetLookFeel is modified in any way (by clearing\
                    it, adding or\n\
                    removing elements), then the pointers in this map are not valid anymore. The function should\
                    then be called\n\
                    again to retrieve valid pointers.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A map of names to WidgetComponent pointers.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::getWidgetComponentNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getWidgetComponentNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getWidgetComponentNames"
                , getWidgetComponentNames_function_type( &::CEGUI::WidgetLookFeel::getWidgetComponentNames )
                , ( bp::arg("inherits")=(bool)(false) ) );
        
        }
        { //::CEGUI::WidgetLookFeel::getWidgetNames
        
            typedef ::std::set<CEGUI::String, CEGUI::StringFastLessCompare, std::allocator<CEGUI::String> > ( ::CEGUI::WidgetLookFeel::*getWidgetNames_function_type )( bool ) const;
            
            WidgetLookFeel_exposer.def( 
                "getWidgetNames"
                , getWidgetNames_function_type( &::CEGUI::WidgetLookFeel::getWidgetNames )
                , ( bp::arg("inherits")=(bool)(false) )
                , "!  deprecated This function has been renamed to getWidgetComponentNames to conform the general way\
            of naming functions, and will be replaced in the next version\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::handleFontRenderSizeChange
        
            typedef bool ( ::CEGUI::WidgetLookFeel::*handleFontRenderSizeChange_function_type )( ::CEGUI::Window &,::CEGUI::Font const * ) const;
            
            WidgetLookFeel_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type( &::CEGUI::WidgetLookFeel::handleFontRenderSizeChange )
                , ( bp::arg("window"), bp::arg("font") )
                , "! perform any processing required due to the given font having changed.\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::initialiseWidget
        
            typedef void ( ::CEGUI::WidgetLookFeel::*initialiseWidget_function_type )( ::CEGUI::Window & ) const;
            
            WidgetLookFeel_exposer.def( 
                "initialiseWidget"
                , initialiseWidget_function_type( &::CEGUI::WidgetLookFeel::initialiseWidget )
                , ( bp::arg("widget") )
                , "*!\n\
                \n\
                    Initialise the given window using PropertyInitialsers and component\n\
                    widgets specified for this WidgetLookFeel.\n\
            \n\
                @param widget\n\
                    Window based object to be initialised.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::isNamedAreaDefined
        
            typedef bool ( ::CEGUI::WidgetLookFeel::*isNamedAreaDefined_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "isNamedAreaDefined"
                , isNamedAreaDefined_function_type( &::CEGUI::WidgetLookFeel::isNamedAreaDefined )
                , ( bp::arg("name") )
                , "*!\n\
                \n\
                    return whether a NamedArea object with the specified name exists for\n\
                    this WidgetLookFeel.\n\
            \n\
                @param name\n\
                    String holding the name of the NamedArea to check for.\n\
            \n\
                @return\n\
                    - true if a named area with the requested name is defined for this\n\
                      WidgetLookFeel.\n\
                    - false if no such named area is defined for this WidgetLookFeel.\n\
            \n\
                 deprecated This function is deprecated because it does not consider WidgetLook inheritance. It\
                 will be changed to isNamedAreaPresent() in the next major version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::isStateImageryPresent
        
            typedef bool ( ::CEGUI::WidgetLookFeel::*isStateImageryPresent_function_type )( ::CEGUI::String const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "isStateImageryPresent"
                , isStateImageryPresent_function_type( &::CEGUI::WidgetLookFeel::isStateImageryPresent )
                , ( bp::arg("state") )
                , "*!\n\
                \n\
                    Return whether imagery is defined for the given state.\n\
            \n\
                @param state\n\
                    String object containing name of state to look for.\n\
            \n\
                @return\n\
                    - true if imagery exists for the specified state,\n\
                    - false if no imagery exists for the specified state.\n\
            \n\
                 deprecated This function is deprecated because it does not consider WidgetLook inheritance. It\
                 will be replaced by a\n\
                            new isStateImageryPresent function in the next major version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::layoutChildWidgets
        
            typedef void ( ::CEGUI::WidgetLookFeel::*layoutChildWidgets_function_type )( ::CEGUI::Window const & ) const;
            
            WidgetLookFeel_exposer.def( 
                "layoutChildWidgets"
                , layoutChildWidgets_function_type( &::CEGUI::WidgetLookFeel::layoutChildWidgets )
                , ( bp::arg("owner") )
                , "*!\n\
                \n\
                    Layout the child widgets defined for this WidgetLookFeel which are\n\
                    attached to the given window.\n\
            \n\
                @param owner\n\
                    Window object that has the child widgets that require laying out.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::operator=
        
            typedef ::CEGUI::WidgetLookFeel & ( ::CEGUI::WidgetLookFeel::*assign_function_type )( ::CEGUI::WidgetLookFeel const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "assign"
                , assign_function_type( &::CEGUI::WidgetLookFeel::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::CEGUI::WidgetLookFeel::renameImagerySection
        
            typedef void ( ::CEGUI::WidgetLookFeel::*renameImagerySection_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "renameImagerySection"
                , renameImagerySection_function_type( &::CEGUI::WidgetLookFeel::renameImagerySection )
                , ( bp::arg("oldName"), bp::arg("newName") )
                , "!  deprecated This function is to be replaced by a new renameImagerySection function in the new\
            version, which considers inheritance and accepts more appropriate parameters.\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::renameNamedArea
        
            typedef void ( ::CEGUI::WidgetLookFeel::*renameNamedArea_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            WidgetLookFeel_exposer.def( 
                "renameNamedArea"
                , renameNamedArea_function_type( &::CEGUI::WidgetLookFeel::renameNamedArea )
                , ( bp::arg("oldName"), bp::arg("newName") )
                , "!  deprecated This function is to be replaced by a new renameNamedArea function in the new version,\
            which considers inheritance and accepts more appropriate parameters.\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::retrieveEventLinkDefinitionFromList
        
            typedef ::CEGUI::EventLinkDefinition * ( ::CEGUI::WidgetLookFeel::*retrieveEventLinkDefinitionFromList_function_type )( ::CEGUI::String const &,bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "retrieveEventLinkDefinitionFromList"
                , retrieveEventLinkDefinitionFromList_function_type( &::CEGUI::WidgetLookFeel::retrieveEventLinkDefinitionFromList )
                , ( bp::arg("name"), bp::arg("includeInheritedElements")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a EventLinkDefinition and returns a pointer to\n\
                    it if it exists or 0 if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the EventLinkDefinition to look for.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A pointer to the EventLinkDefinition.\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getEventLinkDefinition in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::retrievePropertyDefinitionFromList
        
            typedef ::CEGUI::PropertyDefinitionBase * ( ::CEGUI::WidgetLookFeel::*retrievePropertyDefinitionFromList_function_type )( ::CEGUI::String const &,bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "retrievePropertyDefinitionFromList"
                , retrievePropertyDefinitionFromList_function_type( &::CEGUI::WidgetLookFeel::retrievePropertyDefinitionFromList )
                , ( bp::arg("name"), bp::arg("includeInheritedElements")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a PropertyDefinition and returns a pointer to\n\
                    it if it exists or 0 if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the PropertyDefinition (PropertyDefinitionBase) to look for.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A pointer to the PropertyDefinition (PropertyDefinitionBase).\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getPropertyDefinition in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::retrievePropertyInitialiserFromList
        
            typedef ::CEGUI::PropertyInitialiser * ( ::CEGUI::WidgetLookFeel::*retrievePropertyInitialiserFromList_function_type )( ::CEGUI::String const &,bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "retrievePropertyInitialiserFromList"
                , retrievePropertyInitialiserFromList_function_type( &::CEGUI::WidgetLookFeel::retrievePropertyInitialiserFromList )
                , ( bp::arg("name"), bp::arg("includeInheritedElements")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a Property (PropertyInitialiser) and returns a pointer to\n\
                    it if it exists or 0 if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the Property (PropertyInitialiser) to look for.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A pointer to the Property (PropertyInitialiser).\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getPropertyInitialiser in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::retrievePropertyLinkDefinitionFromList
        
            typedef ::CEGUI::PropertyDefinitionBase * ( ::CEGUI::WidgetLookFeel::*retrievePropertyLinkDefinitionFromList_function_type )( ::CEGUI::String const &,bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "retrievePropertyLinkDefinitionFromList"
                , retrievePropertyLinkDefinitionFromList_function_type( &::CEGUI::WidgetLookFeel::retrievePropertyLinkDefinitionFromList )
                , ( bp::arg("name"), bp::arg("includeInheritedElements")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a PropertyLinkDefinition and returns a pointer to\n\
                    it if it exists or 0 if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the PropertyLinkDefinition (PropertyDefinitionBase) to look for.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A pointer to the PropertyLinkDefinition (PropertyDefinitionBase).\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getPropertyLinkDefinition in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::retrieveWidgetComponentFromList
        
            typedef ::CEGUI::WidgetComponent * ( ::CEGUI::WidgetLookFeel::*retrieveWidgetComponentFromList_function_type )( ::CEGUI::String const &,bool ) ;
            
            WidgetLookFeel_exposer.def( 
                "retrieveWidgetComponentFromList"
                , retrieveWidgetComponentFromList_function_type( &::CEGUI::WidgetLookFeel::retrieveWidgetComponentFromList )
                , ( bp::arg("name"), bp::arg("includeInheritedElements")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Takes the name for a WidgetComponent and returns a pointer to\n\
                    it if it exists or null pointer if it doesn't.\n\
            \n\
                @param name\n\
                    The name of the WidgetComponent to look for.\n\
            \n\
                @param includeInheritedElements\n\
                    If set to true, this function will try to also include elements from the inherited\
                    WidgetLookFeel.\n\
            \n\
                @return\n\
                    A pointer to the WidgetComponent.\n\
            \n\
                 deprecated\n\
                    This function will be replaced by getWidgetComponent in the next version.\n\
                *\n" );
        
        }
        { //::CEGUI::WidgetLookFeel::writeXMLToStream
        
            typedef void ( ::CEGUI::WidgetLookFeel::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            WidgetLookFeel_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type( &::CEGUI::WidgetLookFeel::writeXMLToStream )
                , ( bp::arg("xml_stream") )
                , "*!\n\
                \n\
                    Writes an xml representation of this WidgetLookFeel to  out_stream.\n\
            \n\
                @param xml_stream\n\
                    Stream where xml data should be output.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
    }

}
